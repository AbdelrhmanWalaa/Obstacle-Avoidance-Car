
Obstacle Avoidance Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000d9e  00000e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080006c  0080006c  00000e3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000143c  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a66  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1a  00000000  00000000  00002ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000876  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000126d  00000000  00000000  00004872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_1>
   8:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_2>
   c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_initialization>:
Description: Function to .
*/
void APP_initialization(void)
{
	/* MCAL Initialization */
	GLI_enableGIE();
  92:	0e 94 73 02 	call	0x4e6	; 0x4e6 <GLI_enableGIE>
// 
// 	u8_gs_appMode = APP_CAR_STOP;
	//LCD_init();
	//KPD_initialization();
	
	DCM_initialization( ast_g_DCMs );
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 57 00 	call	0xae	; 0xae <DCM_initialization>
// 	PWM_generatePWM( 50 );
// 
// 	TMR2_PWM_Init (1, 3, 0);
// 	TMR2_PWM_start(50);

	DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CCW, 10 );
  9e:	4a e0       	ldi	r20, 0x0A	; 10
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 94 00 	call	0x128	; 0x128 <DCM_controlDCM>
  aa:	08 95       	ret

000000ac <APP_startProgram>:
Input:
Output:
Description: Function to .
*/
void APP_startProgram(void)
{
  ac:	ff cf       	rjmp	.-2      	; 0xac <APP_startProgram>

000000ae <DCM_initialization>:
 Input: void
 Output: void
 Description: Function to Initialize DCM peripheral.
*/
void DCM_initialization( DCM_ST_CONFIG *st_a_DCMConfig )
{	
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	7c 01       	movw	r14, r24
	/* Initialize initial value of left DCM, in both Direction Pins */	
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2A, HIGH );
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2B, LOW );

	/* Method 2: Linking Configuration Initialization */
	for ( u8 u8_l_index = 0; u8_l_index < DCM_U8_NUMBER_OF_DCM; u8_l_index++ )
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	2d c0       	rjmp	.+90     	; 0x118 <DCM_initialization+0x6a>
	{
		/* Initialize initial direction of DCM, in both Direction and PWM Pins */	
		DIO_init ( st_a_DCMConfig[u8_l_index].u8_g_directionCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCWPin  , OUT );
  be:	c1 2f       	mov	r28, r17
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	ce 01       	movw	r24, r28
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	c8 0f       	add	r28, r24
  ca:	d9 1f       	adc	r29, r25
  cc:	cc 0f       	add	r28, r28
  ce:	dd 1f       	adc	r29, r29
  d0:	ce 0d       	add	r28, r14
  d2:	df 1d       	adc	r29, r15
  d4:	69 81       	ldd	r22, Y+1	; 0x01
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	88 81       	ld	r24, Y
  da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
		DIO_init ( st_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, OUT );
  de:	6b 81       	ldd	r22, Y+3	; 0x03
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
		DIO_init ( st_a_DCMConfig[u8_l_index].u8_g_pwmPort, st_a_DCMConfig[u8_l_index].u8_g_pwmPin, OUT );
  e8:	6d 81       	ldd	r22, Y+5	; 0x05
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	8c 81       	ldd	r24, Y+4	; 0x04
  ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
		
		/* Initialize initial value of DCM, in both Direction Pins */
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCWPin  , LOW );
  f2:	69 81       	ldd	r22, Y+1	; 0x01
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	88 81       	ld	r24, Y
  f8:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, HIGH );
  fc:	6b 81       	ldd	r22, Y+3	; 0x03
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
		TMR2_PWM_Init( 0.2, st_a_DCMConfig[u8_l_index].u8_g_pwmPort, st_a_DCMConfig[u8_l_index].u8_g_pwmPin );
 106:	2d 81       	ldd	r18, Y+5	; 0x05
 108:	4c 81       	ldd	r20, Y+4	; 0x04
 10a:	6d ec       	ldi	r22, 0xCD	; 205
 10c:	7c ec       	ldi	r23, 0xCC	; 204
 10e:	8c e4       	ldi	r24, 0x4C	; 76
 110:	9e e3       	ldi	r25, 0x3E	; 62
 112:	0e 94 c9 03 	call	0x792	; 0x792 <TMR2_PWM_Init>
	/* Initialize initial value of left DCM, in both Direction Pins */	
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2A, HIGH );
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2B, LOW );

	/* Method 2: Linking Configuration Initialization */
	for ( u8 u8_l_index = 0; u8_l_index < DCM_U8_NUMBER_OF_DCM; u8_l_index++ )
 116:	1f 5f       	subi	r17, 0xFF	; 255
 118:	12 30       	cpi	r17, 0x02	; 2
 11a:	88 f2       	brcs	.-94     	; 0xbe <DCM_initialization+0x10>
		/* Initialize initial value of DCM, in both Direction Pins */
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCWPin  , LOW );
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, HIGH );
		TMR2_PWM_Init( 0.2, st_a_DCMConfig[u8_l_index].u8_g_pwmPort, st_a_DCMConfig[u8_l_index].u8_g_pwmPin );
	}	
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	08 95       	ret

00000128 <DCM_controlDCM>:
 Input: Pointer to st DCMConfig, u8 ControlMode, and u8 SpeedPercentage
 Output: u8 Error or No Error
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM      ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode, u8 u8_a_speedPercentage )
{
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
		
	/* Check 1: Pointer is not equal to NULL, and ControlMode and SpeedPercentage are in the valid range */
	if ( ( pst_a_DCMConfig != NULL ) && ( u8_a_controlMode <= DCM_U8_ROTATE_CCW ) && ( u8_a_speedPercentage <= 100 ) )
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	89 f1       	breq	.+98     	; 0x194 <DCM_controlDCM+0x6c>
 132:	63 30       	cpi	r22, 0x03	; 3
 134:	88 f5       	brcc	.+98     	; 0x198 <DCM_controlDCM+0x70>
 136:	45 36       	cpi	r20, 0x65	; 101
 138:	88 f5       	brcc	.+98     	; 0x19c <DCM_controlDCM+0x74>
 13a:	14 2f       	mov	r17, r20
 13c:	ec 01       	movw	r28, r24
	{
		switch ( u8_a_controlMode )
 13e:	61 30       	cpi	r22, 0x01	; 1
 140:	79 f0       	breq	.+30     	; 0x160 <DCM_controlDCM+0x38>
 142:	18 f0       	brcs	.+6      	; 0x14a <DCM_controlDCM+0x22>
 144:	62 30       	cpi	r22, 0x02	; 2
 146:	b9 f0       	breq	.+46     	; 0x176 <DCM_controlDCM+0x4e>
 148:	20 c0       	rjmp	.+64     	; 0x18a <DCM_controlDCM+0x62>
		{
			case DCM_U8_STOP: 
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , LOW );
 14a:	69 81       	ldd	r22, Y+1	; 0x01
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	88 81       	ld	r24, Y
 150:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW );
 154:	6b 81       	ldd	r22, Y+3	; 0x03
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			break;
 15e:	15 c0       	rjmp	.+42     	; 0x18a <DCM_controlDCM+0x62>
			
			case DCM_U8_ROTATE_CW:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , HIGH );
 160:	69 81       	ldd	r22, Y+1	; 0x01
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	88 81       	ld	r24, Y
 166:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW  );
 16a:	6b 81       	ldd	r22, Y+3	; 0x03
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			break;
 174:	0a c0       	rjmp	.+20     	; 0x18a <DCM_controlDCM+0x62>
			
			case DCM_U8_ROTATE_CCW:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , LOW  );
 176:	69 81       	ldd	r22, Y+1	; 0x01
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	88 81       	ld	r24, Y
 17c:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, HIGH );
 180:	6b 81       	ldd	r22, Y+3	; 0x03
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			break;
		}
		
		TMR2_PWM_start( u8_a_speedPercentage );
 18a:	81 2f       	mov	r24, r17
 18c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <TMR2_PWM_start>
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM      ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode, u8 u8_a_speedPercentage )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
 190:	81 e0       	ldi	r24, 0x01	; 1
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , LOW  );
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, HIGH );
			break;
		}
		
		TMR2_PWM_start( u8_a_speedPercentage );
 192:	05 c0       	rjmp	.+10     	; 0x19e <DCM_controlDCM+0x76>
	}
	/* Check 2: Pointer is equal to NULL, or ControlMode or SpeedPercentage is not in the valid range */
	else
	{
		/* Update error state = NOK, Pointer is NULL, or wrong ControlMode or SpeedPercentage! */
		u8_l_errorState = STD_TYPES_NOK;
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	03 c0       	rjmp	.+6      	; 0x19e <DCM_controlDCM+0x76>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	01 c0       	rjmp	.+2      	; 0x19e <DCM_controlDCM+0x76>
 19c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	08 95       	ret

000001a6 <main>:
/* Main */
#include "main.h"

int main(void)
{
	APP_initialization();
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <APP_initialization>
	APP_startProgram();
 1aa:	0e 94 56 00 	call	0xac	; 0xac <APP_startProgram>
	
	return 0;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	08 95       	ret

000001b4 <DIO_init>:
		break;
		case C:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PINC_REG , en_a_pinNumber );
		break;
		case D:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PIND_REG , en_a_pinNumber );
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	11 f1       	breq	.+68     	; 0x1fc <DIO_init+0x48>
 1b8:	30 f0       	brcs	.+12     	; 0x1c6 <DIO_init+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	d1 f1       	breq	.+116    	; 0x232 <DIO_init+0x7e>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_init+0x10>
 1c2:	52 c0       	rjmp	.+164    	; 0x268 <DIO_init+0xb4>
 1c4:	08 95       	ret
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_init+0x2c>
 1ca:	2a b3       	in	r18, 0x1a	; 26
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_init+0x22>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_init+0x1e>
 1da:	82 2b       	or	r24, r18
 1dc:	8a bb       	out	0x1a, r24	; 26
 1de:	08 95       	ret
 1e0:	41 11       	cpse	r20, r1
 1e2:	5c c0       	rjmp	.+184    	; 0x29c <DIO_init+0xe8>
 1e4:	2a b3       	in	r18, 0x1a	; 26
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_init+0x3c>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_init+0x38>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	8a bb       	out	0x1a, r24	; 26
 1fa:	08 95       	ret
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	59 f4       	brne	.+22     	; 0x216 <DIO_init+0x62>
 200:	27 b3       	in	r18, 0x17	; 23
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_init+0x58>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_init+0x54>
 210:	82 2b       	or	r24, r18
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
 216:	41 11       	cpse	r20, r1
 218:	41 c0       	rjmp	.+130    	; 0x29c <DIO_init+0xe8>
 21a:	27 b3       	in	r18, 0x17	; 23
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_init+0x72>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_init+0x6e>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	87 bb       	out	0x17, r24	; 23
 230:	08 95       	ret
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	59 f4       	brne	.+22     	; 0x24c <DIO_init+0x98>
 236:	24 b3       	in	r18, 0x14	; 20
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_init+0x8e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_init+0x8a>
 246:	82 2b       	or	r24, r18
 248:	84 bb       	out	0x14, r24	; 20
 24a:	08 95       	ret
 24c:	41 11       	cpse	r20, r1
 24e:	26 c0       	rjmp	.+76     	; 0x29c <DIO_init+0xe8>
 250:	24 b3       	in	r18, 0x14	; 20
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0xa8>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0xa4>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_init+0xce>
 26c:	21 b3       	in	r18, 0x11	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_init+0xc4>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_init+0xc0>
 27c:	82 2b       	or	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret
 282:	41 11       	cpse	r20, r1
 284:	0b c0       	rjmp	.+22     	; 0x29c <DIO_init+0xe8>
 286:	21 b3       	in	r18, 0x11	; 17
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_init+0xde>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_init+0xda>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	81 bb       	out	0x11, r24	; 17
 29c:	08 95       	ret

0000029e <DIO_write>:
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	11 f1       	breq	.+68     	; 0x2e6 <DIO_write+0x48>
 2a2:	30 f0       	brcs	.+12     	; 0x2b0 <DIO_write+0x12>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	d1 f1       	breq	.+116    	; 0x31c <DIO_write+0x7e>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_write+0x10>
 2ac:	52 c0       	rjmp	.+164    	; 0x352 <DIO_write+0xb4>
 2ae:	08 95       	ret
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_write+0x2c>
 2b4:	2b b3       	in	r18, 0x1b	; 27
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write+0x22>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write+0x1e>
 2c4:	82 2b       	or	r24, r18
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret
 2ca:	41 11       	cpse	r20, r1
 2cc:	5c c0       	rjmp	.+184    	; 0x386 <DIO_write+0xe8>
 2ce:	2b b3       	in	r18, 0x1b	; 27
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write+0x3c>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write+0x38>
 2de:	80 95       	com	r24
 2e0:	82 23       	and	r24, r18
 2e2:	8b bb       	out	0x1b, r24	; 27
 2e4:	08 95       	ret
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	59 f4       	brne	.+22     	; 0x300 <DIO_write+0x62>
 2ea:	28 b3       	in	r18, 0x18	; 24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_write+0x58>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_write+0x54>
 2fa:	82 2b       	or	r24, r18
 2fc:	88 bb       	out	0x18, r24	; 24
 2fe:	08 95       	ret
 300:	41 11       	cpse	r20, r1
 302:	41 c0       	rjmp	.+130    	; 0x386 <DIO_write+0xe8>
 304:	28 b3       	in	r18, 0x18	; 24
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_write+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_write+0x6e>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	88 bb       	out	0x18, r24	; 24
 31a:	08 95       	ret
 31c:	41 30       	cpi	r20, 0x01	; 1
 31e:	59 f4       	brne	.+22     	; 0x336 <DIO_write+0x98>
 320:	25 b3       	in	r18, 0x15	; 21
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_write+0x8e>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_write+0x8a>
 330:	82 2b       	or	r24, r18
 332:	85 bb       	out	0x15, r24	; 21
 334:	08 95       	ret
 336:	41 11       	cpse	r20, r1
 338:	26 c0       	rjmp	.+76     	; 0x386 <DIO_write+0xe8>
 33a:	25 b3       	in	r18, 0x15	; 21
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_write+0xa8>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_write+0xa4>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	85 bb       	out	0x15, r24	; 21
 350:	08 95       	ret
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	59 f4       	brne	.+22     	; 0x36c <DIO_write+0xce>
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_write+0xc4>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_write+0xc0>
 366:	82 2b       	or	r24, r18
 368:	82 bb       	out	0x12, r24	; 18
 36a:	08 95       	ret
 36c:	41 11       	cpse	r20, r1
 36e:	0b c0       	rjmp	.+22     	; 0x386 <DIO_write+0xe8>
 370:	22 b3       	in	r18, 0x12	; 18
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_write+0xde>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_write+0xda>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	82 bb       	out	0x12, r24	; 18
 386:	08 95       	ret

00000388 <DIO_toggle>:
 Output: void
 Description: Function to toggle Pin value.
*/
void DIO_toggle ( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber )
{
	switch(en_a_portNumber)
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	89 f0       	breq	.+34     	; 0x3ae <DIO_toggle+0x26>
 38c:	28 f0       	brcs	.+10     	; 0x398 <DIO_toggle+0x10>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	c9 f0       	breq	.+50     	; 0x3c4 <DIO_toggle+0x3c>
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	11 f1       	breq	.+68     	; 0x3da <DIO_toggle+0x52>
 396:	08 95       	ret
	{
		case A:
			TOG_BIT( DIO_U8_PORTA_REG , en_a_pinNumber );
 398:	2b b3       	in	r18, 0x1b	; 27
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_toggle+0x1c>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_toggle+0x18>
 3a8:	82 27       	eor	r24, r18
 3aa:	8b bb       	out	0x1b, r24	; 27
		break;
 3ac:	08 95       	ret
		case B:
			TOG_BIT( DIO_U8_PORTB_REG , en_a_pinNumber );
 3ae:	28 b3       	in	r18, 0x18	; 24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_toggle+0x32>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_toggle+0x2e>
 3be:	82 27       	eor	r24, r18
 3c0:	88 bb       	out	0x18, r24	; 24
		break;
 3c2:	08 95       	ret
		case C:
			TOG_BIT( DIO_U8_PORTC_REG , en_a_pinNumber );
 3c4:	25 b3       	in	r18, 0x15	; 21
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_toggle+0x48>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_toggle+0x44>
 3d4:	82 27       	eor	r24, r18
 3d6:	85 bb       	out	0x15, r24	; 21
		break;
 3d8:	08 95       	ret
		case D:
			TOG_BIT( DIO_U8_PORTD_REG , en_a_pinNumber );
 3da:	22 b3       	in	r18, 0x12	; 18
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_toggle+0x5e>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_toggle+0x5a>
 3ea:	82 27       	eor	r24, r18
 3ec:	82 bb       	out	0x12, r24	; 18
 3ee:	08 95       	ret

000003f0 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
 412:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 416:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0x1>
 41a:	30 97       	sbiw	r30, 0x00	; 0
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT0]();
 41e:	09 95       	icall
	}	
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
 464:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end+0x2>
 468:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x3>
 46c:	30 97       	sbiw	r30, 0x00	; 0
 46e:	09 f0       	breq	.+2      	; 0x472 <__vector_2+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT1]();
 470:	09 95       	icall
	}	
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
 4b6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x4>
 4ba:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x5>
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__vector_3+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT2]();
 4c2:	09 95       	icall
	}	
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <GLI_enableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
void GLI_enableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
 4e6:	8f b7       	in	r24, 0x3f	; 63
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	8f bf       	out	0x3f, r24	; 63
 4ec:	08 95       	ret

000004ee <calc_prescaler>:
}



static u8 calc_prescaler(f32 delay,u16* prescaler)
{
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	6b 01       	movw	r12, r22
 4fc:	7c 01       	movw	r14, r24
 4fe:	ea 01       	movw	r28, r20
	if(delay <= MAX_DELAY_MS(P_1024))
 500:	2f e6       	ldi	r18, 0x6F	; 111
 502:	32 e1       	ldi	r19, 0x12	; 18
 504:	43 e0       	ldi	r20, 0x03	; 3
 506:	52 e4       	ldi	r21, 0x42	; 66
 508:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 50c:	18 16       	cp	r1, r24
 50e:	0c f4       	brge	.+2      	; 0x512 <calc_prescaler+0x24>
 510:	73 c0       	rjmp	.+230    	; 0x5f8 <calc_prescaler+0x10a>
	{
		if(delay <= MAX_DELAY_MS(P_1))
 512:	2f e6       	ldi	r18, 0x6F	; 111
 514:	32 e1       	ldi	r19, 0x12	; 18
 516:	43 e0       	ldi	r20, 0x03	; 3
 518:	5d e3       	ldi	r21, 0x3D	; 61
 51a:	c7 01       	movw	r24, r14
 51c:	b6 01       	movw	r22, r12
 51e:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 522:	18 16       	cp	r1, r24
 524:	2c f0       	brlt	.+10     	; 0x530 <calc_prescaler+0x42>
		*prescaler=P_1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	99 83       	std	Y+1, r25	; 0x01
 52c:	88 83       	st	Y, r24
 52e:	65 c0       	rjmp	.+202    	; 0x5fa <calc_prescaler+0x10c>
		else if(delay <= MAX_DELAY_MS(P_8))
 530:	2f e6       	ldi	r18, 0x6F	; 111
 532:	32 e1       	ldi	r19, 0x12	; 18
 534:	43 e8       	ldi	r20, 0x83	; 131
 536:	5e e3       	ldi	r21, 0x3E	; 62
 538:	c7 01       	movw	r24, r14
 53a:	b6 01       	movw	r22, r12
 53c:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 540:	18 16       	cp	r1, r24
 542:	34 f0       	brlt	.+12     	; 0x550 <calc_prescaler+0x62>
		*prescaler=P_8;
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	99 83       	std	Y+1, r25	; 0x01
 54a:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return 1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	55 c0       	rjmp	.+170    	; 0x5fa <calc_prescaler+0x10c>
	{
		if(delay <= MAX_DELAY_MS(P_1))
		*prescaler=P_1;
		else if(delay <= MAX_DELAY_MS(P_8))
		*prescaler=P_8;
		else if(delay <= MAX_DELAY_MS(P_32))
 550:	2f e6       	ldi	r18, 0x6F	; 111
 552:	32 e1       	ldi	r19, 0x12	; 18
 554:	43 e8       	ldi	r20, 0x83	; 131
 556:	5f e3       	ldi	r21, 0x3F	; 63
 558:	c7 01       	movw	r24, r14
 55a:	b6 01       	movw	r22, r12
 55c:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 560:	18 16       	cp	r1, r24
 562:	34 f0       	brlt	.+12     	; 0x570 <calc_prescaler+0x82>
		*prescaler=P_32;
 564:	80 e2       	ldi	r24, 0x20	; 32
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	99 83       	std	Y+1, r25	; 0x01
 56a:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return 1;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	45 c0       	rjmp	.+138    	; 0x5fa <calc_prescaler+0x10c>
		*prescaler=P_1;
		else if(delay <= MAX_DELAY_MS(P_8))
		*prescaler=P_8;
		else if(delay <= MAX_DELAY_MS(P_32))
		*prescaler=P_32;
		else if(delay <= MAX_DELAY_MS(P_64))
 570:	2f e6       	ldi	r18, 0x6F	; 111
 572:	32 e1       	ldi	r19, 0x12	; 18
 574:	43 e0       	ldi	r20, 0x03	; 3
 576:	50 e4       	ldi	r21, 0x40	; 64
 578:	c7 01       	movw	r24, r14
 57a:	b6 01       	movw	r22, r12
 57c:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 580:	18 16       	cp	r1, r24
 582:	34 f0       	brlt	.+12     	; 0x590 <calc_prescaler+0xa2>
		*prescaler=P_64;
 584:	80 e4       	ldi	r24, 0x40	; 64
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	99 83       	std	Y+1, r25	; 0x01
 58a:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return 1;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	35 c0       	rjmp	.+106    	; 0x5fa <calc_prescaler+0x10c>
		*prescaler=P_8;
		else if(delay <= MAX_DELAY_MS(P_32))
		*prescaler=P_32;
		else if(delay <= MAX_DELAY_MS(P_64))
		*prescaler=P_64;
		else if(delay <= MAX_DELAY_MS(P_128))
 590:	2f e6       	ldi	r18, 0x6F	; 111
 592:	32 e1       	ldi	r19, 0x12	; 18
 594:	43 e8       	ldi	r20, 0x83	; 131
 596:	50 e4       	ldi	r21, 0x40	; 64
 598:	c7 01       	movw	r24, r14
 59a:	b6 01       	movw	r22, r12
 59c:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 5a0:	18 16       	cp	r1, r24
 5a2:	34 f0       	brlt	.+12     	; 0x5b0 <calc_prescaler+0xc2>
		*prescaler=P_128;
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	99 83       	std	Y+1, r25	; 0x01
 5aa:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	25 c0       	rjmp	.+74     	; 0x5fa <calc_prescaler+0x10c>
		*prescaler=P_32;
		else if(delay <= MAX_DELAY_MS(P_64))
		*prescaler=P_64;
		else if(delay <= MAX_DELAY_MS(P_128))
		*prescaler=P_128;
		else if(delay <= MAX_DELAY_MS(P_256))
 5b0:	2f e6       	ldi	r18, 0x6F	; 111
 5b2:	32 e1       	ldi	r19, 0x12	; 18
 5b4:	43 e0       	ldi	r20, 0x03	; 3
 5b6:	51 e4       	ldi	r21, 0x41	; 65
 5b8:	c7 01       	movw	r24, r14
 5ba:	b6 01       	movw	r22, r12
 5bc:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 5c0:	18 16       	cp	r1, r24
 5c2:	34 f0       	brlt	.+12     	; 0x5d0 <calc_prescaler+0xe2>
		*prescaler=P_256;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	99 83       	std	Y+1, r25	; 0x01
 5ca:	88 83       	st	Y, r24
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return 1;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	15 c0       	rjmp	.+42     	; 0x5fa <calc_prescaler+0x10c>
		*prescaler=P_64;
		else if(delay <= MAX_DELAY_MS(P_128))
		*prescaler=P_128;
		else if(delay <= MAX_DELAY_MS(P_256))
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
 5d0:	2f e6       	ldi	r18, 0x6F	; 111
 5d2:	32 e1       	ldi	r19, 0x12	; 18
 5d4:	43 e0       	ldi	r20, 0x03	; 3
 5d6:	52 e4       	ldi	r21, 0x42	; 66
 5d8:	c7 01       	movw	r24, r14
 5da:	b6 01       	movw	r22, r12
 5dc:	0e 94 08 05 	call	0xa10	; 0xa10 <__cmpsf2>
 5e0:	18 16       	cp	r1, r24
 5e2:	34 f0       	brlt	.+12     	; 0x5f0 <calc_prescaler+0x102>
		*prescaler=P_1024;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	94 e0       	ldi	r25, 0x04	; 4
 5e8:	99 83       	std	Y+1, r25	; 0x01
 5ea:	88 83       	st	Y, r24
		else
		*prescaler = P_0;
		return 1;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <calc_prescaler+0x10c>
		else if(delay <= MAX_DELAY_MS(P_256))
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
 5f0:	19 82       	std	Y+1, r1	; 0x01
 5f2:	18 82       	st	Y, r1
		return 1;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	01 c0       	rjmp	.+2      	; 0x5fa <calc_prescaler+0x10c>
	}
	else
	return 0;
 5f8:	80 e0       	ldi	r24, 0x00	; 0
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	df 90       	pop	r13
 604:	cf 90       	pop	r12
 606:	08 95       	ret

00000608 <calc_initialValue>:

static void calc_initialValue(u16 prescaler,u8* init_value,f32 delay)
{
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	eb 01       	movw	r28, r22
	switch(prescaler)
 60e:	80 34       	cpi	r24, 0x40	; 64
 610:	91 05       	cpc	r25, r1
 612:	09 f4       	brne	.+2      	; 0x616 <calc_initialValue+0xe>
 614:	4a c0       	rjmp	.+148    	; 0x6aa <calc_initialValue+0xa2>
 616:	50 f4       	brcc	.+20     	; 0x62c <calc_initialValue+0x24>
 618:	88 30       	cpi	r24, 0x08	; 8
 61a:	91 05       	cpc	r25, r1
 61c:	31 f1       	breq	.+76     	; 0x66a <calc_initialValue+0x62>
 61e:	80 32       	cpi	r24, 0x20	; 32
 620:	91 05       	cpc	r25, r1
 622:	99 f1       	breq	.+102    	; 0x68a <calc_initialValue+0x82>
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	09 f0       	breq	.+2      	; 0x62a <calc_initialValue+0x22>
 628:	80 c0       	rjmp	.+256    	; 0x72a <calc_initialValue+0x122>
 62a:	0f c0       	rjmp	.+30     	; 0x64a <calc_initialValue+0x42>
 62c:	81 15       	cp	r24, r1
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	96 07       	cpc	r25, r22
 632:	09 f4       	brne	.+2      	; 0x636 <calc_initialValue+0x2e>
 634:	5a c0       	rjmp	.+180    	; 0x6ea <calc_initialValue+0xe2>
 636:	81 15       	cp	r24, r1
 638:	64 e0       	ldi	r22, 0x04	; 4
 63a:	96 07       	cpc	r25, r22
 63c:	09 f4       	brne	.+2      	; 0x640 <calc_initialValue+0x38>
 63e:	65 c0       	rjmp	.+202    	; 0x70a <calc_initialValue+0x102>
 640:	80 38       	cpi	r24, 0x80	; 128
 642:	91 05       	cpc	r25, r1
 644:	09 f0       	breq	.+2      	; 0x648 <calc_initialValue+0x40>
 646:	71 c0       	rjmp	.+226    	; 0x72a <calc_initialValue+0x122>
 648:	40 c0       	rjmp	.+128    	; 0x6ca <calc_initialValue+0xc2>
	{
		case P_1:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
 64a:	6f e6       	ldi	r22, 0x6F	; 111
 64c:	72 e1       	ldi	r23, 0x12	; 18
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	9d e3       	ldi	r25, 0x3D	; 61
 652:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 656:	2f e6       	ldi	r18, 0x6F	; 111
 658:	32 e1       	ldi	r19, 0x12	; 18
 65a:	43 e0       	ldi	r20, 0x03	; 3
 65c:	59 e3       	ldi	r21, 0x39	; 57
 65e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 662:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 666:	68 83       	st	Y, r22
		break;
 668:	61 c0       	rjmp	.+194    	; 0x72c <calc_initialValue+0x124>
		case P_8:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
 66a:	6f e6       	ldi	r22, 0x6F	; 111
 66c:	72 e1       	ldi	r23, 0x12	; 18
 66e:	83 e8       	ldi	r24, 0x83	; 131
 670:	9e e3       	ldi	r25, 0x3E	; 62
 672:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 676:	2f e6       	ldi	r18, 0x6F	; 111
 678:	32 e1       	ldi	r19, 0x12	; 18
 67a:	43 e8       	ldi	r20, 0x83	; 131
 67c:	5a e3       	ldi	r21, 0x3A	; 58
 67e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 682:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 686:	68 83       	st	Y, r22
		break;
 688:	51 c0       	rjmp	.+162    	; 0x72c <calc_initialValue+0x124>
		case P_32:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
 68a:	6f e6       	ldi	r22, 0x6F	; 111
 68c:	72 e1       	ldi	r23, 0x12	; 18
 68e:	83 e8       	ldi	r24, 0x83	; 131
 690:	9f e3       	ldi	r25, 0x3F	; 63
 692:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 696:	2f e6       	ldi	r18, 0x6F	; 111
 698:	32 e1       	ldi	r19, 0x12	; 18
 69a:	43 e8       	ldi	r20, 0x83	; 131
 69c:	5b e3       	ldi	r21, 0x3B	; 59
 69e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 6a2:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 6a6:	68 83       	st	Y, r22
		break;
 6a8:	41 c0       	rjmp	.+130    	; 0x72c <calc_initialValue+0x124>
		case P_64:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
 6aa:	6f e6       	ldi	r22, 0x6F	; 111
 6ac:	72 e1       	ldi	r23, 0x12	; 18
 6ae:	83 e0       	ldi	r24, 0x03	; 3
 6b0:	90 e4       	ldi	r25, 0x40	; 64
 6b2:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 6b6:	2f e6       	ldi	r18, 0x6F	; 111
 6b8:	32 e1       	ldi	r19, 0x12	; 18
 6ba:	43 e0       	ldi	r20, 0x03	; 3
 6bc:	5c e3       	ldi	r21, 0x3C	; 60
 6be:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 6c2:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 6c6:	68 83       	st	Y, r22
		break;
 6c8:	31 c0       	rjmp	.+98     	; 0x72c <calc_initialValue+0x124>
		case P_128:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
 6ca:	6f e6       	ldi	r22, 0x6F	; 111
 6cc:	72 e1       	ldi	r23, 0x12	; 18
 6ce:	83 e8       	ldi	r24, 0x83	; 131
 6d0:	90 e4       	ldi	r25, 0x40	; 64
 6d2:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 6d6:	2f e6       	ldi	r18, 0x6F	; 111
 6d8:	32 e1       	ldi	r19, 0x12	; 18
 6da:	43 e8       	ldi	r20, 0x83	; 131
 6dc:	5c e3       	ldi	r21, 0x3C	; 60
 6de:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 6e2:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 6e6:	68 83       	st	Y, r22
		break;
 6e8:	21 c0       	rjmp	.+66     	; 0x72c <calc_initialValue+0x124>
		case P_256:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
 6ea:	6f e6       	ldi	r22, 0x6F	; 111
 6ec:	72 e1       	ldi	r23, 0x12	; 18
 6ee:	83 e0       	ldi	r24, 0x03	; 3
 6f0:	91 e4       	ldi	r25, 0x41	; 65
 6f2:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 6f6:	2f e6       	ldi	r18, 0x6F	; 111
 6f8:	32 e1       	ldi	r19, 0x12	; 18
 6fa:	43 e0       	ldi	r20, 0x03	; 3
 6fc:	5d e3       	ldi	r21, 0x3D	; 61
 6fe:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 702:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 706:	68 83       	st	Y, r22
		break;
 708:	11 c0       	rjmp	.+34     	; 0x72c <calc_initialValue+0x124>
		case P_1024:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
 70a:	6f e6       	ldi	r22, 0x6F	; 111
 70c:	72 e1       	ldi	r23, 0x12	; 18
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	92 e4       	ldi	r25, 0x42	; 66
 712:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 716:	2f e6       	ldi	r18, 0x6F	; 111
 718:	32 e1       	ldi	r19, 0x12	; 18
 71a:	43 e0       	ldi	r20, 0x03	; 3
 71c:	5e e3       	ldi	r21, 0x3E	; 62
 71e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 722:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 726:	68 83       	st	Y, r22
		break;
 728:	01 c0       	rjmp	.+2      	; 0x72c <calc_initialValue+0x124>
		default:
		*init_value=0;
 72a:	18 82       	st	Y, r1
		break;
	}
}
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <set_prescale>:

static void set_prescale(u16 prescaler)
{
	switch(prescaler)
 732:	80 34       	cpi	r24, 0x40	; 64
 734:	91 05       	cpc	r25, r1
 736:	f9 f0       	breq	.+62     	; 0x776 <set_prescale+0x44>
 738:	48 f4       	brcc	.+18     	; 0x74c <set_prescale+0x1a>
 73a:	88 30       	cpi	r24, 0x08	; 8
 73c:	91 05       	cpc	r25, r1
 73e:	a9 f0       	breq	.+42     	; 0x76a <set_prescale+0x38>
 740:	80 32       	cpi	r24, 0x20	; 32
 742:	91 05       	cpc	r25, r1
 744:	a9 f0       	breq	.+42     	; 0x770 <set_prescale+0x3e>
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	11 f5       	brne	.+68     	; 0x78e <set_prescale+0x5c>
 74a:	0c c0       	rjmp	.+24     	; 0x764 <set_prescale+0x32>
 74c:	81 15       	cp	r24, r1
 74e:	21 e0       	ldi	r18, 0x01	; 1
 750:	92 07       	cpc	r25, r18
 752:	b9 f0       	breq	.+46     	; 0x782 <set_prescale+0x50>
 754:	81 15       	cp	r24, r1
 756:	24 e0       	ldi	r18, 0x04	; 4
 758:	92 07       	cpc	r25, r18
 75a:	b1 f0       	breq	.+44     	; 0x788 <set_prescale+0x56>
 75c:	80 38       	cpi	r24, 0x80	; 128
 75e:	91 05       	cpc	r25, r1
 760:	b1 f4       	brne	.+44     	; 0x78e <set_prescale+0x5c>
 762:	0c c0       	rjmp	.+24     	; 0x77c <set_prescale+0x4a>
	{
		case P_1:
		TCCR2 = (1<<FOC2) | (1<<CS20);
 764:	81 e8       	ldi	r24, 0x81	; 129
 766:	85 bd       	out	0x25, r24	; 37
		break;
 768:	08 95       	ret
		case P_8:
		TCCR2 = (1<<FOC2) | (1<<CS21);
 76a:	82 e8       	ldi	r24, 0x82	; 130
 76c:	85 bd       	out	0x25, r24	; 37
		break;
 76e:	08 95       	ret
		case P_32:
		TCCR2 = (1<<FOC2) | (1<<CS20) | (1<<CS21);
 770:	83 e8       	ldi	r24, 0x83	; 131
 772:	85 bd       	out	0x25, r24	; 37
		break;
 774:	08 95       	ret
		case P_64:
		TCCR2 = (1<<FOC2) | (1<<CS22);
 776:	84 e8       	ldi	r24, 0x84	; 132
 778:	85 bd       	out	0x25, r24	; 37
		break;
 77a:	08 95       	ret
		case P_128:
		TCCR2 = (1<<FOC2) | (1<<CS20) | (1<<CS22);
 77c:	85 e8       	ldi	r24, 0x85	; 133
 77e:	85 bd       	out	0x25, r24	; 37
		break;
 780:	08 95       	ret
		case P_256:
		TCCR2 = (1<<FOC2) | (1<<CS21) | (1<<CS22);
 782:	86 e8       	ldi	r24, 0x86	; 134
 784:	85 bd       	out	0x25, r24	; 37
		break;
 786:	08 95       	ret
		case P_1024:
		TCCR2 = (1<<FOC2) | (1<<CS20) | (1<<CS21)| (1<<CS22);
 788:	87 e8       	ldi	r24, 0x87	; 135
 78a:	85 bd       	out	0x25, r24	; 37
		break;
 78c:	08 95       	ret
		default:
		TCCR2 = 0;
 78e:	15 bc       	out	0x25, r1	; 37
 790:	08 95       	ret

00000792 <TMR2_PWM_Init>:

/*============= FUNCTION DEFINITIONS =============*/

//pwm_frequency:frequency of PWM in KHZ
void TMR2_PWM_Init(f32 pwm_frequency,u8 port_ID,u8 pin_num)
{
 792:	cf 92       	push	r12
 794:	df 92       	push	r13
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	6b 01       	movw	r12, r22
 7a0:	7c 01       	movw	r14, r24
 7a2:	c4 2f       	mov	r28, r20
 7a4:	d2 2f       	mov	r29, r18
	g_port=port_ID;
 7a6:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <g_port>
	g_pin=pin_num;
 7aa:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <g_pin>
	//GPIO_setPinDirection(port_ID,pin_num,PIN_OUTPUT);
	DIO_init(port_ID,pin_num,OUT);
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	62 2f       	mov	r22, r18
 7b2:	8c 2f       	mov	r24, r28
 7b4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
	//GPIO_writePin(port_ID,pin_num,Low);
	DIO_write(port_ID,pin_num,LOW);
 7b8:	40 e0       	ldi	r20, 0x00	; 0
 7ba:	6d 2f       	mov	r22, r29
 7bc:	8c 2f       	mov	r24, r28
 7be:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
	g_period_time=1.0F/pwm_frequency;							//PWM periodic time in milli_seconds
 7c2:	a7 01       	movw	r20, r14
 7c4:	96 01       	movw	r18, r12
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	80 e8       	ldi	r24, 0x80	; 128
 7cc:	9f e3       	ldi	r25, 0x3F	; 63
 7ce:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 7d2:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <g_period_time>
 7d6:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <g_period_time+0x1>
 7da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <g_period_time+0x2>
 7de:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <g_period_time+0x3>
	TIMSK |= (1<<TOIE2);										// Enable Timer2 Overflow Interrupt
 7e2:	89 b7       	in	r24, 0x39	; 57
 7e4:	80 64       	ori	r24, 0x40	; 64
 7e6:	89 bf       	out	0x39, r24	; 57
}
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	ff 90       	pop	r15
 7ee:	ef 90       	pop	r14
 7f0:	df 90       	pop	r13
 7f2:	cf 90       	pop	r12
 7f4:	08 95       	ret

000007f6 <TMR2_PWM_start>:

void TMR2_PWM_start(u8 duty_cycle)
{
 7f6:	8f 92       	push	r8
 7f8:	9f 92       	push	r9
 7fa:	af 92       	push	r10
 7fc:	bf 92       	push	r11
 7fe:	cf 92       	push	r12
 800:	df 92       	push	r13
 802:	ef 92       	push	r14
 804:	ff 92       	push	r15
	f32 time_on,time_off;
	time_on=((f32)g_period_time*duty_cycle)/100.0F;					//calculate on time delay
 806:	80 90 78 00 	lds	r8, 0x0078	; 0x800078 <g_period_time>
 80a:	90 90 79 00 	lds	r9, 0x0079	; 0x800079 <g_period_time+0x1>
 80e:	a0 90 7a 00 	lds	r10, 0x007A	; 0x80007a <g_period_time+0x2>
 812:	b0 90 7b 00 	lds	r11, 0x007B	; 0x80007b <g_period_time+0x3>
 816:	68 2f       	mov	r22, r24
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatsisf>
 822:	a5 01       	movw	r20, r10
 824:	94 01       	movw	r18, r8
 826:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__mulsf3>
 82a:	20 e0       	ldi	r18, 0x00	; 0
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	48 ec       	ldi	r20, 0xC8	; 200
 830:	52 e4       	ldi	r21, 0x42	; 66
 832:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divsf3>
 836:	6b 01       	movw	r12, r22
 838:	7c 01       	movw	r14, r24
	time_off=g_period_time-time_on;									//calculate off time delay
 83a:	9b 01       	movw	r18, r22
 83c:	ac 01       	movw	r20, r24
 83e:	c5 01       	movw	r24, r10
 840:	b4 01       	movw	r22, r8
 842:	0e 94 9b 04 	call	0x936	; 0x936 <__subsf3>
 846:	4b 01       	movw	r8, r22
 848:	5c 01       	movw	r10, r24
	calc_prescaler(time_on,&g_Ton_prescale);						//calculate prescaler value of on time
 84a:	43 e7       	ldi	r20, 0x73	; 115
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	c7 01       	movw	r24, r14
 850:	b6 01       	movw	r22, r12
 852:	0e 94 77 02 	call	0x4ee	; 0x4ee <calc_prescaler>
	calc_prescaler(time_off,&g_Toff_prescale);						//calculate prescaler value of off time
 856:	45 e7       	ldi	r20, 0x75	; 117
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	c5 01       	movw	r24, r10
 85c:	b4 01       	movw	r22, r8
 85e:	0e 94 77 02 	call	0x4ee	; 0x4ee <calc_prescaler>
	calc_initialValue(g_Ton_prescale,&g_Ton_initValue,time_on);		//calculate initial value of on time
 862:	a7 01       	movw	r20, r14
 864:	96 01       	movw	r18, r12
 866:	67 e7       	ldi	r22, 0x77	; 119
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <g_Ton_prescale>
 86e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <g_Ton_prescale+0x1>
 872:	0e 94 04 03 	call	0x608	; 0x608 <calc_initialValue>
	calc_initialValue(g_Toff_prescale,&g_Toff_initValue,time_off);	//calculate initial value of off time
 876:	a5 01       	movw	r20, r10
 878:	94 01       	movw	r18, r8
 87a:	6c e7       	ldi	r22, 0x7C	; 124
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <g_Toff_prescale>
 882:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <g_Toff_prescale+0x1>
 886:	0e 94 04 03 	call	0x608	; 0x608 <calc_initialValue>
	TCNT2=g_Ton_initValue;											//set timer initial value
 88a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_Ton_initValue>
 88e:	84 bd       	out	0x24, r24	; 36
	set_prescale(g_Ton_prescale);									//set timer prescaler value
 890:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <g_Ton_prescale>
 894:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <g_Ton_prescale+0x1>
 898:	0e 94 99 03 	call	0x732	; 0x732 <set_prescale>
}
 89c:	ff 90       	pop	r15
 89e:	ef 90       	pop	r14
 8a0:	df 90       	pop	r13
 8a2:	cf 90       	pop	r12
 8a4:	bf 90       	pop	r11
 8a6:	af 90       	pop	r10
 8a8:	9f 90       	pop	r9
 8aa:	8f 90       	pop	r8
 8ac:	08 95       	ret

000008ae <__vector_5>:

ISR_HANDLER(TMR2_OVF)
{
 8ae:	1f 92       	push	r1
 8b0:	0f 92       	push	r0
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	0f 92       	push	r0
 8b6:	11 24       	eor	r1, r1
 8b8:	2f 93       	push	r18
 8ba:	3f 93       	push	r19
 8bc:	4f 93       	push	r20
 8be:	5f 93       	push	r21
 8c0:	6f 93       	push	r22
 8c2:	7f 93       	push	r23
 8c4:	8f 93       	push	r24
 8c6:	9f 93       	push	r25
 8c8:	af 93       	push	r26
 8ca:	bf 93       	push	r27
 8cc:	ef 93       	push	r30
 8ce:	ff 93       	push	r31
	if(g_PWM_flag==0)
 8d0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <g_PWM_flag>
 8d4:	81 11       	cpse	r24, r1
 8d6:	0d c0       	rjmp	.+26     	; 0x8f2 <__vector_5+0x44>
	{
		set_prescale(g_Toff_prescale);
 8d8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <g_Toff_prescale>
 8dc:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <g_Toff_prescale+0x1>
 8e0:	0e 94 99 03 	call	0x732	; 0x732 <set_prescale>
		TCNT2=g_Toff_initValue;
 8e4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_Toff_initValue>
 8e8:	84 bd       	out	0x24, r24	; 36
		g_PWM_flag=1;
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <g_PWM_flag>
 8f0:	0b c0       	rjmp	.+22     	; 0x908 <__vector_5+0x5a>
	}
	else
	{
		set_prescale(g_Ton_prescale);
 8f2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <g_Ton_prescale>
 8f6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <g_Ton_prescale+0x1>
 8fa:	0e 94 99 03 	call	0x732	; 0x732 <set_prescale>
		TCNT2=g_Ton_initValue;
 8fe:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_Ton_initValue>
 902:	84 bd       	out	0x24, r24	; 36
		g_PWM_flag=0;
 904:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <g_PWM_flag>
	}
	//GPIO_togglePin(g_port, g_pin);
	DIO_toggle(g_port,g_pin);
 908:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <g_pin>
 90c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <g_port>
 910:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_toggle>
}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	0f 90       	pop	r0
 92e:	0f be       	out	0x3f, r0	; 63
 930:	0f 90       	pop	r0
 932:	1f 90       	pop	r1
 934:	18 95       	reti

00000936 <__subsf3>:
 936:	50 58       	subi	r21, 0x80	; 128

00000938 <__addsf3>:
 938:	bb 27       	eor	r27, r27
 93a:	aa 27       	eor	r26, r26
 93c:	0e 94 b3 04 	call	0x966	; 0x966 <__addsf3x>
 940:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
 944:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
 948:	38 f0       	brcs	.+14     	; 0x958 <__addsf3+0x20>
 94a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
 94e:	20 f0       	brcs	.+8      	; 0x958 <__addsf3+0x20>
 950:	39 f4       	brne	.+14     	; 0x960 <__addsf3+0x28>
 952:	9f 3f       	cpi	r25, 0xFF	; 255
 954:	19 f4       	brne	.+6      	; 0x95c <__addsf3+0x24>
 956:	26 f4       	brtc	.+8      	; 0x960 <__addsf3+0x28>
 958:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>
 95c:	0e f4       	brtc	.+2      	; 0x960 <__addsf3+0x28>
 95e:	e0 95       	com	r30
 960:	e7 fb       	bst	r30, 7
 962:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>

00000966 <__addsf3x>:
 966:	e9 2f       	mov	r30, r25
 968:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
 96c:	58 f3       	brcs	.-42     	; 0x944 <__addsf3+0xc>
 96e:	ba 17       	cp	r27, r26
 970:	62 07       	cpc	r22, r18
 972:	73 07       	cpc	r23, r19
 974:	84 07       	cpc	r24, r20
 976:	95 07       	cpc	r25, r21
 978:	20 f0       	brcs	.+8      	; 0x982 <__addsf3x+0x1c>
 97a:	79 f4       	brne	.+30     	; 0x99a <__addsf3x+0x34>
 97c:	a6 f5       	brtc	.+104    	; 0x9e6 <__addsf3x+0x80>
 97e:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_zero>
 982:	0e f4       	brtc	.+2      	; 0x986 <__addsf3x+0x20>
 984:	e0 95       	com	r30
 986:	0b 2e       	mov	r0, r27
 988:	ba 2f       	mov	r27, r26
 98a:	a0 2d       	mov	r26, r0
 98c:	0b 01       	movw	r0, r22
 98e:	b9 01       	movw	r22, r18
 990:	90 01       	movw	r18, r0
 992:	0c 01       	movw	r0, r24
 994:	ca 01       	movw	r24, r20
 996:	a0 01       	movw	r20, r0
 998:	11 24       	eor	r1, r1
 99a:	ff 27       	eor	r31, r31
 99c:	59 1b       	sub	r21, r25
 99e:	99 f0       	breq	.+38     	; 0x9c6 <__addsf3x+0x60>
 9a0:	59 3f       	cpi	r21, 0xF9	; 249
 9a2:	50 f4       	brcc	.+20     	; 0x9b8 <__addsf3x+0x52>
 9a4:	50 3e       	cpi	r21, 0xE0	; 224
 9a6:	68 f1       	brcs	.+90     	; 0xa02 <__addsf3x+0x9c>
 9a8:	1a 16       	cp	r1, r26
 9aa:	f0 40       	sbci	r31, 0x00	; 0
 9ac:	a2 2f       	mov	r26, r18
 9ae:	23 2f       	mov	r18, r19
 9b0:	34 2f       	mov	r19, r20
 9b2:	44 27       	eor	r20, r20
 9b4:	58 5f       	subi	r21, 0xF8	; 248
 9b6:	f3 cf       	rjmp	.-26     	; 0x99e <__addsf3x+0x38>
 9b8:	46 95       	lsr	r20
 9ba:	37 95       	ror	r19
 9bc:	27 95       	ror	r18
 9be:	a7 95       	ror	r26
 9c0:	f0 40       	sbci	r31, 0x00	; 0
 9c2:	53 95       	inc	r21
 9c4:	c9 f7       	brne	.-14     	; 0x9b8 <__addsf3x+0x52>
 9c6:	7e f4       	brtc	.+30     	; 0x9e6 <__addsf3x+0x80>
 9c8:	1f 16       	cp	r1, r31
 9ca:	ba 0b       	sbc	r27, r26
 9cc:	62 0b       	sbc	r22, r18
 9ce:	73 0b       	sbc	r23, r19
 9d0:	84 0b       	sbc	r24, r20
 9d2:	ba f0       	brmi	.+46     	; 0xa02 <__addsf3x+0x9c>
 9d4:	91 50       	subi	r25, 0x01	; 1
 9d6:	a1 f0       	breq	.+40     	; 0xa00 <__addsf3x+0x9a>
 9d8:	ff 0f       	add	r31, r31
 9da:	bb 1f       	adc	r27, r27
 9dc:	66 1f       	adc	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	c2 f7       	brpl	.-16     	; 0x9d4 <__addsf3x+0x6e>
 9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__addsf3x+0x9c>
 9e6:	ba 0f       	add	r27, r26
 9e8:	62 1f       	adc	r22, r18
 9ea:	73 1f       	adc	r23, r19
 9ec:	84 1f       	adc	r24, r20
 9ee:	48 f4       	brcc	.+18     	; 0xa02 <__addsf3x+0x9c>
 9f0:	87 95       	ror	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b7 95       	ror	r27
 9f8:	f7 95       	ror	r31
 9fa:	9e 3f       	cpi	r25, 0xFE	; 254
 9fc:	08 f0       	brcs	.+2      	; 0xa00 <__addsf3x+0x9a>
 9fe:	b0 cf       	rjmp	.-160    	; 0x960 <__addsf3+0x28>
 a00:	93 95       	inc	r25
 a02:	88 0f       	add	r24, r24
 a04:	08 f0       	brcs	.+2      	; 0xa08 <__addsf3x+0xa2>
 a06:	99 27       	eor	r25, r25
 a08:	ee 0f       	add	r30, r30
 a0a:	97 95       	ror	r25
 a0c:	87 95       	ror	r24
 a0e:	08 95       	ret

00000a10 <__cmpsf2>:
 a10:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_cmp>
 a14:	08 f4       	brcc	.+2      	; 0xa18 <__cmpsf2+0x8>
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	08 95       	ret

00000a1a <__divsf3>:
 a1a:	0e 94 21 05 	call	0xa42	; 0xa42 <__divsf3x>
 a1e:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
 a22:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
 a26:	58 f0       	brcs	.+22     	; 0xa3e <__divsf3+0x24>
 a28:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
 a2c:	40 f0       	brcs	.+16     	; 0xa3e <__divsf3+0x24>
 a2e:	29 f4       	brne	.+10     	; 0xa3a <__divsf3+0x20>
 a30:	5f 3f       	cpi	r21, 0xFF	; 255
 a32:	29 f0       	breq	.+10     	; 0xa3e <__divsf3+0x24>
 a34:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 a38:	51 11       	cpse	r21, r1
 a3a:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
 a3e:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>

00000a42 <__divsf3x>:
 a42:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
 a46:	68 f3       	brcs	.-38     	; 0xa22 <__divsf3+0x8>

00000a48 <__divsf3_pse>:
 a48:	99 23       	and	r25, r25
 a4a:	b1 f3       	breq	.-20     	; 0xa38 <__divsf3+0x1e>
 a4c:	55 23       	and	r21, r21
 a4e:	91 f3       	breq	.-28     	; 0xa34 <__divsf3+0x1a>
 a50:	95 1b       	sub	r25, r21
 a52:	55 0b       	sbc	r21, r21
 a54:	bb 27       	eor	r27, r27
 a56:	aa 27       	eor	r26, r26
 a58:	62 17       	cp	r22, r18
 a5a:	73 07       	cpc	r23, r19
 a5c:	84 07       	cpc	r24, r20
 a5e:	38 f0       	brcs	.+14     	; 0xa6e <__divsf3_pse+0x26>
 a60:	9f 5f       	subi	r25, 0xFF	; 255
 a62:	5f 4f       	sbci	r21, 0xFF	; 255
 a64:	22 0f       	add	r18, r18
 a66:	33 1f       	adc	r19, r19
 a68:	44 1f       	adc	r20, r20
 a6a:	aa 1f       	adc	r26, r26
 a6c:	a9 f3       	breq	.-22     	; 0xa58 <__divsf3_pse+0x10>
 a6e:	35 d0       	rcall	.+106    	; 0xada <__divsf3_pse+0x92>
 a70:	0e 2e       	mov	r0, r30
 a72:	3a f0       	brmi	.+14     	; 0xa82 <__divsf3_pse+0x3a>
 a74:	e0 e8       	ldi	r30, 0x80	; 128
 a76:	32 d0       	rcall	.+100    	; 0xadc <__divsf3_pse+0x94>
 a78:	91 50       	subi	r25, 0x01	; 1
 a7a:	50 40       	sbci	r21, 0x00	; 0
 a7c:	e6 95       	lsr	r30
 a7e:	00 1c       	adc	r0, r0
 a80:	ca f7       	brpl	.-14     	; 0xa74 <__divsf3_pse+0x2c>
 a82:	2b d0       	rcall	.+86     	; 0xada <__divsf3_pse+0x92>
 a84:	fe 2f       	mov	r31, r30
 a86:	29 d0       	rcall	.+82     	; 0xada <__divsf3_pse+0x92>
 a88:	66 0f       	add	r22, r22
 a8a:	77 1f       	adc	r23, r23
 a8c:	88 1f       	adc	r24, r24
 a8e:	bb 1f       	adc	r27, r27
 a90:	26 17       	cp	r18, r22
 a92:	37 07       	cpc	r19, r23
 a94:	48 07       	cpc	r20, r24
 a96:	ab 07       	cpc	r26, r27
 a98:	b0 e8       	ldi	r27, 0x80	; 128
 a9a:	09 f0       	breq	.+2      	; 0xa9e <__divsf3_pse+0x56>
 a9c:	bb 0b       	sbc	r27, r27
 a9e:	80 2d       	mov	r24, r0
 aa0:	bf 01       	movw	r22, r30
 aa2:	ff 27       	eor	r31, r31
 aa4:	93 58       	subi	r25, 0x83	; 131
 aa6:	5f 4f       	sbci	r21, 0xFF	; 255
 aa8:	3a f0       	brmi	.+14     	; 0xab8 <__divsf3_pse+0x70>
 aaa:	9e 3f       	cpi	r25, 0xFE	; 254
 aac:	51 05       	cpc	r21, r1
 aae:	78 f0       	brcs	.+30     	; 0xace <__divsf3_pse+0x86>
 ab0:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 ab4:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
 ab8:	5f 3f       	cpi	r21, 0xFF	; 255
 aba:	e4 f3       	brlt	.-8      	; 0xab4 <__divsf3_pse+0x6c>
 abc:	98 3e       	cpi	r25, 0xE8	; 232
 abe:	d4 f3       	brlt	.-12     	; 0xab4 <__divsf3_pse+0x6c>
 ac0:	86 95       	lsr	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b7 95       	ror	r27
 ac8:	f7 95       	ror	r31
 aca:	9f 5f       	subi	r25, 0xFF	; 255
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__divsf3_pse+0x78>
 ace:	88 0f       	add	r24, r24
 ad0:	91 1d       	adc	r25, r1
 ad2:	96 95       	lsr	r25
 ad4:	87 95       	ror	r24
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret
 ada:	e1 e0       	ldi	r30, 0x01	; 1
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	bb 1f       	adc	r27, r27
 ae4:	62 17       	cp	r22, r18
 ae6:	73 07       	cpc	r23, r19
 ae8:	84 07       	cpc	r24, r20
 aea:	ba 07       	cpc	r27, r26
 aec:	20 f0       	brcs	.+8      	; 0xaf6 <__divsf3_pse+0xae>
 aee:	62 1b       	sub	r22, r18
 af0:	73 0b       	sbc	r23, r19
 af2:	84 0b       	sbc	r24, r20
 af4:	ba 0b       	sbc	r27, r26
 af6:	ee 1f       	adc	r30, r30
 af8:	88 f7       	brcc	.-30     	; 0xadc <__divsf3_pse+0x94>
 afa:	e0 95       	com	r30
 afc:	08 95       	ret

00000afe <__fixunssfsi>:
 afe:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_splitA>
 b02:	88 f0       	brcs	.+34     	; 0xb26 <__fixunssfsi+0x28>
 b04:	9f 57       	subi	r25, 0x7F	; 127
 b06:	98 f0       	brcs	.+38     	; 0xb2e <__fixunssfsi+0x30>
 b08:	b9 2f       	mov	r27, r25
 b0a:	99 27       	eor	r25, r25
 b0c:	b7 51       	subi	r27, 0x17	; 23
 b0e:	b0 f0       	brcs	.+44     	; 0xb3c <__fixunssfsi+0x3e>
 b10:	e1 f0       	breq	.+56     	; 0xb4a <__fixunssfsi+0x4c>
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	1a f0       	brmi	.+6      	; 0xb22 <__fixunssfsi+0x24>
 b1c:	ba 95       	dec	r27
 b1e:	c9 f7       	brne	.-14     	; 0xb12 <__fixunssfsi+0x14>
 b20:	14 c0       	rjmp	.+40     	; 0xb4a <__fixunssfsi+0x4c>
 b22:	b1 30       	cpi	r27, 0x01	; 1
 b24:	91 f0       	breq	.+36     	; 0xb4a <__fixunssfsi+0x4c>
 b26:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_zero>
 b2a:	b1 e0       	ldi	r27, 0x01	; 1
 b2c:	08 95       	ret
 b2e:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_zero>
 b32:	67 2f       	mov	r22, r23
 b34:	78 2f       	mov	r23, r24
 b36:	88 27       	eor	r24, r24
 b38:	b8 5f       	subi	r27, 0xF8	; 248
 b3a:	39 f0       	breq	.+14     	; 0xb4a <__fixunssfsi+0x4c>
 b3c:	b9 3f       	cpi	r27, 0xF9	; 249
 b3e:	cc f3       	brlt	.-14     	; 0xb32 <__fixunssfsi+0x34>
 b40:	86 95       	lsr	r24
 b42:	77 95       	ror	r23
 b44:	67 95       	ror	r22
 b46:	b3 95       	inc	r27
 b48:	d9 f7       	brne	.-10     	; 0xb40 <__fixunssfsi+0x42>
 b4a:	3e f4       	brtc	.+14     	; 0xb5a <__fixunssfsi+0x5c>
 b4c:	90 95       	com	r25
 b4e:	80 95       	com	r24
 b50:	70 95       	com	r23
 b52:	61 95       	neg	r22
 b54:	7f 4f       	sbci	r23, 0xFF	; 255
 b56:	8f 4f       	sbci	r24, 0xFF	; 255
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	08 95       	ret

00000b5c <__floatunsisf>:
 b5c:	e8 94       	clt
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <__floatsisf+0x12>

00000b60 <__floatsisf>:
 b60:	97 fb       	bst	r25, 7
 b62:	3e f4       	brtc	.+14     	; 0xb72 <__floatsisf+0x12>
 b64:	90 95       	com	r25
 b66:	80 95       	com	r24
 b68:	70 95       	com	r23
 b6a:	61 95       	neg	r22
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	99 23       	and	r25, r25
 b74:	a9 f0       	breq	.+42     	; 0xba0 <__floatsisf+0x40>
 b76:	f9 2f       	mov	r31, r25
 b78:	96 e9       	ldi	r25, 0x96	; 150
 b7a:	bb 27       	eor	r27, r27
 b7c:	93 95       	inc	r25
 b7e:	f6 95       	lsr	r31
 b80:	87 95       	ror	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b7 95       	ror	r27
 b88:	f1 11       	cpse	r31, r1
 b8a:	f8 cf       	rjmp	.-16     	; 0xb7c <__floatsisf+0x1c>
 b8c:	fa f4       	brpl	.+62     	; 0xbcc <__floatsisf+0x6c>
 b8e:	bb 0f       	add	r27, r27
 b90:	11 f4       	brne	.+4      	; 0xb96 <__floatsisf+0x36>
 b92:	60 ff       	sbrs	r22, 0
 b94:	1b c0       	rjmp	.+54     	; 0xbcc <__floatsisf+0x6c>
 b96:	6f 5f       	subi	r22, 0xFF	; 255
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	16 c0       	rjmp	.+44     	; 0xbcc <__floatsisf+0x6c>
 ba0:	88 23       	and	r24, r24
 ba2:	11 f0       	breq	.+4      	; 0xba8 <__floatsisf+0x48>
 ba4:	96 e9       	ldi	r25, 0x96	; 150
 ba6:	11 c0       	rjmp	.+34     	; 0xbca <__floatsisf+0x6a>
 ba8:	77 23       	and	r23, r23
 baa:	21 f0       	breq	.+8      	; 0xbb4 <__floatsisf+0x54>
 bac:	9e e8       	ldi	r25, 0x8E	; 142
 bae:	87 2f       	mov	r24, r23
 bb0:	76 2f       	mov	r23, r22
 bb2:	05 c0       	rjmp	.+10     	; 0xbbe <__floatsisf+0x5e>
 bb4:	66 23       	and	r22, r22
 bb6:	71 f0       	breq	.+28     	; 0xbd4 <__floatsisf+0x74>
 bb8:	96 e8       	ldi	r25, 0x86	; 134
 bba:	86 2f       	mov	r24, r22
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	2a f0       	brmi	.+10     	; 0xbcc <__floatsisf+0x6c>
 bc2:	9a 95       	dec	r25
 bc4:	66 0f       	add	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	da f7       	brpl	.-10     	; 0xbc2 <__floatsisf+0x62>
 bcc:	88 0f       	add	r24, r24
 bce:	96 95       	lsr	r25
 bd0:	87 95       	ror	r24
 bd2:	97 f9       	bld	r25, 7
 bd4:	08 95       	ret

00000bd6 <__fp_cmp>:
 bd6:	99 0f       	add	r25, r25
 bd8:	00 08       	sbc	r0, r0
 bda:	55 0f       	add	r21, r21
 bdc:	aa 0b       	sbc	r26, r26
 bde:	e0 e8       	ldi	r30, 0x80	; 128
 be0:	fe ef       	ldi	r31, 0xFE	; 254
 be2:	16 16       	cp	r1, r22
 be4:	17 06       	cpc	r1, r23
 be6:	e8 07       	cpc	r30, r24
 be8:	f9 07       	cpc	r31, r25
 bea:	c0 f0       	brcs	.+48     	; 0xc1c <__fp_cmp+0x46>
 bec:	12 16       	cp	r1, r18
 bee:	13 06       	cpc	r1, r19
 bf0:	e4 07       	cpc	r30, r20
 bf2:	f5 07       	cpc	r31, r21
 bf4:	98 f0       	brcs	.+38     	; 0xc1c <__fp_cmp+0x46>
 bf6:	62 1b       	sub	r22, r18
 bf8:	73 0b       	sbc	r23, r19
 bfa:	84 0b       	sbc	r24, r20
 bfc:	95 0b       	sbc	r25, r21
 bfe:	39 f4       	brne	.+14     	; 0xc0e <__fp_cmp+0x38>
 c00:	0a 26       	eor	r0, r26
 c02:	61 f0       	breq	.+24     	; 0xc1c <__fp_cmp+0x46>
 c04:	23 2b       	or	r18, r19
 c06:	24 2b       	or	r18, r20
 c08:	25 2b       	or	r18, r21
 c0a:	21 f4       	brne	.+8      	; 0xc14 <__fp_cmp+0x3e>
 c0c:	08 95       	ret
 c0e:	0a 26       	eor	r0, r26
 c10:	09 f4       	brne	.+2      	; 0xc14 <__fp_cmp+0x3e>
 c12:	a1 40       	sbci	r26, 0x01	; 1
 c14:	a6 95       	lsr	r26
 c16:	8f ef       	ldi	r24, 0xFF	; 255
 c18:	81 1d       	adc	r24, r1
 c1a:	81 1d       	adc	r24, r1
 c1c:	08 95       	ret

00000c1e <__fp_inf>:
 c1e:	97 f9       	bld	r25, 7
 c20:	9f 67       	ori	r25, 0x7F	; 127
 c22:	80 e8       	ldi	r24, 0x80	; 128
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	60 e0       	ldi	r22, 0x00	; 0
 c28:	08 95       	ret

00000c2a <__fp_nan>:
 c2a:	9f ef       	ldi	r25, 0xFF	; 255
 c2c:	80 ec       	ldi	r24, 0xC0	; 192
 c2e:	08 95       	ret

00000c30 <__fp_pscA>:
 c30:	00 24       	eor	r0, r0
 c32:	0a 94       	dec	r0
 c34:	16 16       	cp	r1, r22
 c36:	17 06       	cpc	r1, r23
 c38:	18 06       	cpc	r1, r24
 c3a:	09 06       	cpc	r0, r25
 c3c:	08 95       	ret

00000c3e <__fp_pscB>:
 c3e:	00 24       	eor	r0, r0
 c40:	0a 94       	dec	r0
 c42:	12 16       	cp	r1, r18
 c44:	13 06       	cpc	r1, r19
 c46:	14 06       	cpc	r1, r20
 c48:	05 06       	cpc	r0, r21
 c4a:	08 95       	ret

00000c4c <__fp_round>:
 c4c:	09 2e       	mov	r0, r25
 c4e:	03 94       	inc	r0
 c50:	00 0c       	add	r0, r0
 c52:	11 f4       	brne	.+4      	; 0xc58 <__fp_round+0xc>
 c54:	88 23       	and	r24, r24
 c56:	52 f0       	brmi	.+20     	; 0xc6c <__fp_round+0x20>
 c58:	bb 0f       	add	r27, r27
 c5a:	40 f4       	brcc	.+16     	; 0xc6c <__fp_round+0x20>
 c5c:	bf 2b       	or	r27, r31
 c5e:	11 f4       	brne	.+4      	; 0xc64 <__fp_round+0x18>
 c60:	60 ff       	sbrs	r22, 0
 c62:	04 c0       	rjmp	.+8      	; 0xc6c <__fp_round+0x20>
 c64:	6f 5f       	subi	r22, 0xFF	; 255
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	08 95       	ret

00000c6e <__fp_split3>:
 c6e:	57 fd       	sbrc	r21, 7
 c70:	90 58       	subi	r25, 0x80	; 128
 c72:	44 0f       	add	r20, r20
 c74:	55 1f       	adc	r21, r21
 c76:	59 f0       	breq	.+22     	; 0xc8e <__fp_splitA+0x10>
 c78:	5f 3f       	cpi	r21, 0xFF	; 255
 c7a:	71 f0       	breq	.+28     	; 0xc98 <__fp_splitA+0x1a>
 c7c:	47 95       	ror	r20

00000c7e <__fp_splitA>:
 c7e:	88 0f       	add	r24, r24
 c80:	97 fb       	bst	r25, 7
 c82:	99 1f       	adc	r25, r25
 c84:	61 f0       	breq	.+24     	; 0xc9e <__fp_splitA+0x20>
 c86:	9f 3f       	cpi	r25, 0xFF	; 255
 c88:	79 f0       	breq	.+30     	; 0xca8 <__fp_splitA+0x2a>
 c8a:	87 95       	ror	r24
 c8c:	08 95       	ret
 c8e:	12 16       	cp	r1, r18
 c90:	13 06       	cpc	r1, r19
 c92:	14 06       	cpc	r1, r20
 c94:	55 1f       	adc	r21, r21
 c96:	f2 cf       	rjmp	.-28     	; 0xc7c <__fp_split3+0xe>
 c98:	46 95       	lsr	r20
 c9a:	f1 df       	rcall	.-30     	; 0xc7e <__fp_splitA>
 c9c:	08 c0       	rjmp	.+16     	; 0xcae <__fp_splitA+0x30>
 c9e:	16 16       	cp	r1, r22
 ca0:	17 06       	cpc	r1, r23
 ca2:	18 06       	cpc	r1, r24
 ca4:	99 1f       	adc	r25, r25
 ca6:	f1 cf       	rjmp	.-30     	; 0xc8a <__fp_splitA+0xc>
 ca8:	86 95       	lsr	r24
 caa:	71 05       	cpc	r23, r1
 cac:	61 05       	cpc	r22, r1
 cae:	08 94       	sec
 cb0:	08 95       	ret

00000cb2 <__fp_zero>:
 cb2:	e8 94       	clt

00000cb4 <__fp_szero>:
 cb4:	bb 27       	eor	r27, r27
 cb6:	66 27       	eor	r22, r22
 cb8:	77 27       	eor	r23, r23
 cba:	cb 01       	movw	r24, r22
 cbc:	97 f9       	bld	r25, 7
 cbe:	08 95       	ret

00000cc0 <__mulsf3>:
 cc0:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3x>
 cc4:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
 cc8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
 ccc:	38 f0       	brcs	.+14     	; 0xcdc <__mulsf3+0x1c>
 cce:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
 cd2:	20 f0       	brcs	.+8      	; 0xcdc <__mulsf3+0x1c>
 cd4:	95 23       	and	r25, r21
 cd6:	11 f0       	breq	.+4      	; 0xcdc <__mulsf3+0x1c>
 cd8:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 cdc:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>
 ce0:	11 24       	eor	r1, r1
 ce2:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>

00000ce6 <__mulsf3x>:
 ce6:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
 cea:	70 f3       	brcs	.-36     	; 0xcc8 <__mulsf3+0x8>

00000cec <__mulsf3_pse>:
 cec:	95 9f       	mul	r25, r21
 cee:	c1 f3       	breq	.-16     	; 0xce0 <__mulsf3+0x20>
 cf0:	95 0f       	add	r25, r21
 cf2:	50 e0       	ldi	r21, 0x00	; 0
 cf4:	55 1f       	adc	r21, r21
 cf6:	62 9f       	mul	r22, r18
 cf8:	f0 01       	movw	r30, r0
 cfa:	72 9f       	mul	r23, r18
 cfc:	bb 27       	eor	r27, r27
 cfe:	f0 0d       	add	r31, r0
 d00:	b1 1d       	adc	r27, r1
 d02:	63 9f       	mul	r22, r19
 d04:	aa 27       	eor	r26, r26
 d06:	f0 0d       	add	r31, r0
 d08:	b1 1d       	adc	r27, r1
 d0a:	aa 1f       	adc	r26, r26
 d0c:	64 9f       	mul	r22, r20
 d0e:	66 27       	eor	r22, r22
 d10:	b0 0d       	add	r27, r0
 d12:	a1 1d       	adc	r26, r1
 d14:	66 1f       	adc	r22, r22
 d16:	82 9f       	mul	r24, r18
 d18:	22 27       	eor	r18, r18
 d1a:	b0 0d       	add	r27, r0
 d1c:	a1 1d       	adc	r26, r1
 d1e:	62 1f       	adc	r22, r18
 d20:	73 9f       	mul	r23, r19
 d22:	b0 0d       	add	r27, r0
 d24:	a1 1d       	adc	r26, r1
 d26:	62 1f       	adc	r22, r18
 d28:	83 9f       	mul	r24, r19
 d2a:	a0 0d       	add	r26, r0
 d2c:	61 1d       	adc	r22, r1
 d2e:	22 1f       	adc	r18, r18
 d30:	74 9f       	mul	r23, r20
 d32:	33 27       	eor	r19, r19
 d34:	a0 0d       	add	r26, r0
 d36:	61 1d       	adc	r22, r1
 d38:	23 1f       	adc	r18, r19
 d3a:	84 9f       	mul	r24, r20
 d3c:	60 0d       	add	r22, r0
 d3e:	21 1d       	adc	r18, r1
 d40:	82 2f       	mov	r24, r18
 d42:	76 2f       	mov	r23, r22
 d44:	6a 2f       	mov	r22, r26
 d46:	11 24       	eor	r1, r1
 d48:	9f 57       	subi	r25, 0x7F	; 127
 d4a:	50 40       	sbci	r21, 0x00	; 0
 d4c:	9a f0       	brmi	.+38     	; 0xd74 <__mulsf3_pse+0x88>
 d4e:	f1 f0       	breq	.+60     	; 0xd8c <__mulsf3_pse+0xa0>
 d50:	88 23       	and	r24, r24
 d52:	4a f0       	brmi	.+18     	; 0xd66 <__mulsf3_pse+0x7a>
 d54:	ee 0f       	add	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	bb 1f       	adc	r27, r27
 d5a:	66 1f       	adc	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	91 50       	subi	r25, 0x01	; 1
 d62:	50 40       	sbci	r21, 0x00	; 0
 d64:	a9 f7       	brne	.-22     	; 0xd50 <__mulsf3_pse+0x64>
 d66:	9e 3f       	cpi	r25, 0xFE	; 254
 d68:	51 05       	cpc	r21, r1
 d6a:	80 f0       	brcs	.+32     	; 0xd8c <__mulsf3_pse+0xa0>
 d6c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 d70:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
 d74:	5f 3f       	cpi	r21, 0xFF	; 255
 d76:	e4 f3       	brlt	.-8      	; 0xd70 <__mulsf3_pse+0x84>
 d78:	98 3e       	cpi	r25, 0xE8	; 232
 d7a:	d4 f3       	brlt	.-12     	; 0xd70 <__mulsf3_pse+0x84>
 d7c:	86 95       	lsr	r24
 d7e:	77 95       	ror	r23
 d80:	67 95       	ror	r22
 d82:	b7 95       	ror	r27
 d84:	f7 95       	ror	r31
 d86:	e7 95       	ror	r30
 d88:	9f 5f       	subi	r25, 0xFF	; 255
 d8a:	c1 f7       	brne	.-16     	; 0xd7c <__mulsf3_pse+0x90>
 d8c:	fe 2b       	or	r31, r30
 d8e:	88 0f       	add	r24, r24
 d90:	91 1d       	adc	r25, r1
 d92:	96 95       	lsr	r25
 d94:	87 95       	ror	r24
 d96:	97 f9       	bld	r25, 7
 d98:	08 95       	ret

00000d9a <_exit>:
 d9a:	f8 94       	cli

00000d9c <__stop_program>:
 d9c:	ff cf       	rjmp	.-2      	; 0xd9c <__stop_program>
