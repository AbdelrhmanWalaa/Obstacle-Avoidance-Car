
Obstacle Avoidance Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  000023dc  00002470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000bc  008000bc  000024cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000024fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000415a  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000135e  00000000  00000000  000069e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000228e  00000000  00000000  00007d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00009fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000111a  00000000  00000000  0000a840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b7  00000000  00000000  0000b95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000dc11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_1>
       8:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_2>
       c:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__vector_10>
      2c:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3d       	cpi	r26, 0xDC	; 220
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 70 06 	call	0xce0	; 0xce0 <main>
      8a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_initialization>:
 Description: Function to .
*/ 
void APP_initialization(void)
{
	/* MCAL Initialization */
	GLI_enableGIE();
      92:	0e 94 1d 09 	call	0x123a	; 0x123a <GLI_enableGIE>
	
	/* HAL Initialization */
	BTN_init( C, P4 );
      96:	64 e0       	ldi	r22, 0x04	; 4
      98:	82 e0       	ldi	r24, 0x02	; 2
      9a:	0e 94 1b 03 	call	0x636	; 0x636 <BTN_init>
	LCD_init();
      9e:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_init>
	KPD_initialization();
      a2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <KPD_initialization>
	US_init( B, P3, EN_INT2 );
      a6:	42 e0       	ldi	r20, 0x02	; 2
      a8:	63 e0       	ldi	r22, 0x03	; 3
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	0e 94 17 06 	call	0xc2e	; 0xc2e <US_init>
	DCM_initialization( ast_g_DCMs );
      b0:	80 e6       	ldi	r24, 0x60	; 96
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	0e 94 2d 03 	call	0x65a	; 0x65a <DCM_initialization>
      b8:	08 95       	ret

000000ba <APP_stopCar>:
 Input: void
 Output: void
 Description: Function to 
*/
vd APP_stopCar( void )
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	1f 92       	push	r1
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
	u8 u8_l_keyValue = KPD_U8_KEY_NOT_PRESSED;
      c4:	8f ef       	ldi	r24, 0xFF	; 255
      c6:	89 83       	std	Y+1, r24	; 0x01
	
	KPD_getPressedKey( &u8_l_keyValue );
      c8:	ce 01       	movw	r24, r28
      ca:	01 96       	adiw	r24, 0x01	; 1
      cc:	0e 94 0b 04 	call	0x816	; 0x816 <KPD_getPressedKey>
	
	if ( u8_l_keyValue == '2' )
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	82 33       	cpi	r24, 0x32	; 50
      d4:	e9 f4       	brne	.+58     	; 0x110 <APP_stopCar+0x56>
	{
		DCM_controlDCMSpeed( 30 );
      d6:	8e e1       	ldi	r24, 0x1E	; 30
      d8:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
		DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_STOP );
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	80 e6       	ldi	r24, 0x60	; 96
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
		DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_STOP );
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	84 e6       	ldi	r24, 0x64	; 100
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
		
		LCD_setCursor( 0, 0 );
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
		LCD_sendString( ( u8* ) "Speed:00% Dir:S" );
      f8:	88 e6       	ldi	r24, 0x68	; 104
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
		
		while ( u8_l_keyValue != '1' )
     100:	04 c0       	rjmp	.+8      	; 0x10a <APP_stopCar+0x50>
		{
			KPD_getPressedKey( &u8_l_keyValue );
     102:	ce 01       	movw	r24, r28
     104:	01 96       	adiw	r24, 0x01	; 1
     106:	0e 94 0b 04 	call	0x816	; 0x816 <KPD_getPressedKey>
		DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_STOP );
		
		LCD_setCursor( 0, 0 );
		LCD_sendString( ( u8* ) "Speed:00% Dir:S" );
		
		while ( u8_l_keyValue != '1' )
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	81 33       	cpi	r24, 0x31	; 49
     10e:	c9 f7       	brne	.-14     	; 0x102 <APP_stopCar+0x48>
		{
			KPD_getPressedKey( &u8_l_keyValue );
		}
	}	
}
     110:	0f 90       	pop	r0
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <APP_startProgram>:
 Input: void
 Output: void
 Description: Function to 
*/
void APP_startProgram  (void)
{
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	00 d0       	rcall	.+0      	; 0x11e <APP_startProgram+0x6>
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
	u8 u8_l_keyValue = KPD_U8_KEY_NOT_PRESSED;
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	89 83       	std	Y+1, r24	; 0x01
	u8 u8_l_btnValue;

	while ( u8_l_keyValue != '1' )
     126:	04 c0       	rjmp	.+8      	; 0x130 <APP_startProgram+0x18>
	{
		KPD_getPressedKey( &u8_l_keyValue );
     128:	ce 01       	movw	r24, r28
     12a:	01 96       	adiw	r24, 0x01	; 1
     12c:	0e 94 0b 04 	call	0x816	; 0x816 <KPD_getPressedKey>
void APP_startProgram  (void)
{
	u8 u8_l_keyValue = KPD_U8_KEY_NOT_PRESSED;
	u8 u8_l_btnValue;

	while ( u8_l_keyValue != '1' )
     130:	89 81       	ldd	r24, Y+1	; 0x01
     132:	81 33       	cpi	r24, 0x31	; 49
     134:	c9 f7       	brne	.-14     	; 0x128 <APP_startProgram+0x10>
	{
		KPD_getPressedKey( &u8_l_keyValue );
	}
	
	TMR0_timeoutMS( 5000 );
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	70 e4       	ldi	r23, 0x40	; 64
     13a:	8c e9       	ldi	r24, 0x9C	; 156
     13c:	95 e4       	ldi	r25, 0x45	; 69
     13e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <TMR0_timeoutMS>
	
	LCD_setCursor( 0, 0 );
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
	LCD_sendString( ( u8* ) "Set Def. Rot." );
     14a:	88 e7       	ldi	r24, 0x78	; 120
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
	
	while( !g_timeout_flag )
     152:	2b c0       	rjmp	.+86     	; 0x1aa <APP_startProgram+0x92>
	{
		LCD_setCursor( 1, 0 );
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
		
		if ( u8_g_select == APP_U8_CAR_ROTATE_RGT )
     15c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
     160:	81 11       	cpse	r24, r1
     162:	05 c0       	rjmp	.+10     	; 0x16e <APP_startProgram+0x56>
		{
			LCD_sendString( ( u8* ) "Right" );
     164:	86 e8       	ldi	r24, 0x86	; 134
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
     16c:	04 c0       	rjmp	.+8      	; 0x176 <APP_startProgram+0x5e>
		}
		else
		{
			LCD_sendString( ( u8* ) "Left" );
     16e:	8c e8       	ldi	r24, 0x8C	; 140
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
		}

		BTN_read( C, P4, &u8_l_btnValue );
     176:	ae 01       	movw	r20, r28
     178:	4e 5f       	subi	r20, 0xFE	; 254
     17a:	5f 4f       	sbci	r21, 0xFF	; 255
     17c:	64 e0       	ldi	r22, 0x04	; 4
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	0e 94 2a 03 	call	0x654	; 0x654 <BTN_read>
		
		if ( u8_l_btnValue == LOW )
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	81 11       	cpse	r24, r1
     188:	10 c0       	rjmp	.+32     	; 0x1aa <APP_startProgram+0x92>
		{
			u8_g_select = ~u8_g_select;
     18a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
     18e:	80 95       	com	r24
     190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__data_end>
			
			while ( u8_l_btnValue == LOW )
     194:	07 c0       	rjmp	.+14     	; 0x1a4 <APP_startProgram+0x8c>
			{
				BTN_read( C, P4, &u8_l_btnValue );
     196:	ae 01       	movw	r20, r28
     198:	4e 5f       	subi	r20, 0xFE	; 254
     19a:	5f 4f       	sbci	r21, 0xFF	; 255
     19c:	64 e0       	ldi	r22, 0x04	; 4
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 2a 03 	call	0x654	; 0x654 <BTN_read>
		
		if ( u8_l_btnValue == LOW )
		{
			u8_g_select = ~u8_g_select;
			
			while ( u8_l_btnValue == LOW )
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	88 23       	and	r24, r24
     1a8:	b1 f3       	breq	.-20     	; 0x196 <APP_startProgram+0x7e>
	TMR0_timeoutMS( 5000 );
	
	LCD_setCursor( 0, 0 );
	LCD_sendString( ( u8* ) "Set Def. Rot." );
	
	while( !g_timeout_flag )
     1aa:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <g_timeout_flag>
     1ae:	88 23       	and	r24, r24
     1b0:	89 f2       	breq	.-94     	; 0x154 <APP_startProgram+0x3c>
				BTN_read( C, P4, &u8_l_btnValue );
			}
		}
	}
	
	LCD_clear();
     1b2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LCD_clear>

	DCM_controlDCMSpeed( 30 );
     1b6:	8e e1       	ldi	r24, 0x1E	; 30
     1b8:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
	DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_STOP );
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	80 e6       	ldi	r24, 0x60	; 96
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
	DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_STOP );
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	84 e6       	ldi	r24, 0x64	; 100
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
	
	LCD_setCursor( 0, 0 );
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
	LCD_sendString( ( u8* ) "Speed:00% Dir:S" );
     1d8:	88 e6       	ldi	r24, 0x68	; 104
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
	
	TMR0_delayMS( 2000 );
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	8a ef       	ldi	r24, 0xFA	; 250
     1e6:	94 e4       	ldi	r25, 0x44	; 68
     1e8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	
	u16 u16_l_distance = 0;
	
	u16_l_distance = US_readDistance();
     1ec:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     1f0:	8c 01       	movw	r16, r24
	
	LCD_setCursor( 1, 0 );
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
	
	LCD_sendString( ( u8* ) "Dist.:     cm");
     1fa:	81 e9       	ldi	r24, 0x91	; 145
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
	LCD_setCursor( 1, 7 );
     202:	67 e0       	ldi	r22, 0x07	; 7
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
	LCD_floatToString( u16_l_distance );
     20a:	b8 01       	movw	r22, r16
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     214:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
	while (1)
	{
		/************************************************************************************/
		/*****************************First State********************************************/
		/************************************************************************************/
		u16_l_distance = US_readDistance();
     218:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     21c:	8c 01       	movw	r16, r24
		
		LCD_setCursor( 1, 7 );
     21e:	67 e0       	ldi	r22, 0x07	; 7
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
		LCD_floatToString(u16_l_distance);
     226:	b8 01       	movw	r22, r16
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     230:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
			
		if ( u16_l_distance > 70 )
     234:	07 34       	cpi	r16, 0x47	; 71
     236:	11 05       	cpc	r17, r1
     238:	08 f4       	brcc	.+2      	; 0x23c <APP_startProgram+0x124>
     23a:	6b c0       	rjmp	.+214    	; 0x312 <APP_startProgram+0x1fa>
		{
			TMR0_timeoutMS( 5000 );
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e4       	ldi	r23, 0x40	; 64
     240:	8c e9       	ldi	r24, 0x9C	; 156
     242:	95 e4       	ldi	r25, 0x45	; 69
     244:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <TMR0_timeoutMS>
			
			while( !g_timeout_flag && u16_l_distance > 70 )
     248:	2c c0       	rjmp	.+88     	; 0x2a2 <APP_startProgram+0x18a>
			{
				DCM_controlDCMSpeed( 30 );
     24a:	8e e1       	ldi	r24, 0x1E	; 30
     24c:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
				DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CW );
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	80 e6       	ldi	r24, 0x60	; 96
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CW );
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	84 e6       	ldi	r24, 0x64	; 100
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				
				u16_l_distance = US_readDistance();
     264:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     268:	8c 01       	movw	r16, r24
				
				LCD_setCursor( 0, 6 );
     26a:	66 e0       	ldi	r22, 0x06	; 6
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendString( ( u8* ) "30" );
     272:	8f e9       	ldi	r24, 0x9F	; 159
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
				LCD_setCursor( 0,14 );
     27a:	6e e0       	ldi	r22, 0x0E	; 14
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendCharacter( 'F' );
     282:	86 e4       	ldi	r24, 0x46	; 70
     284:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
				LCD_setCursor( 1, 7 );
     288:	67 e0       	ldi	r22, 0x07	; 7
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_floatToString( u16_l_distance );
     290:	b8 01       	movw	r22, r16
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     29a:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
				
				APP_stopCar();
     29e:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
			
		if ( u16_l_distance > 70 )
		{
			TMR0_timeoutMS( 5000 );
			
			while( !g_timeout_flag && u16_l_distance > 70 )
     2a2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <g_timeout_flag>
     2a6:	81 11       	cpse	r24, r1
     2a8:	30 c0       	rjmp	.+96     	; 0x30a <APP_startProgram+0x1f2>
     2aa:	07 34       	cpi	r16, 0x47	; 71
     2ac:	11 05       	cpc	r17, r1
     2ae:	68 f6       	brcc	.-102    	; 0x24a <APP_startProgram+0x132>
     2b0:	2c c0       	rjmp	.+88     	; 0x30a <APP_startProgram+0x1f2>
				
				APP_stopCar();
			}
			while( u16_l_distance > 70 )
			{
				DCM_controlDCMSpeed( 50 );
     2b2:	82 e3       	ldi	r24, 0x32	; 50
     2b4:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
				DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CW );
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	80 e6       	ldi	r24, 0x60	; 96
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CW );
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	84 e6       	ldi	r24, 0x64	; 100
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				
				u16_l_distance = US_readDistance();
     2cc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     2d0:	8c 01       	movw	r16, r24
				
				LCD_setCursor( 0, 6 );
     2d2:	66 e0       	ldi	r22, 0x06	; 6
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendString( ( u8* ) "50" );
     2da:	82 ea       	ldi	r24, 0xA2	; 162
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
				LCD_setCursor( 0, 14 );
     2e2:	6e e0       	ldi	r22, 0x0E	; 14
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendCharacter( 'F' );
     2ea:	86 e4       	ldi	r24, 0x46	; 70
     2ec:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
				LCD_setCursor( 1, 7 );
     2f0:	67 e0       	ldi	r22, 0x07	; 7
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_floatToString( u16_l_distance );
     2f8:	b8 01       	movw	r22, r16
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     302:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
				
				APP_stopCar();
     306:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
				LCD_setCursor( 1, 7 );
				LCD_floatToString( u16_l_distance );
				
				APP_stopCar();
			}
			while( u16_l_distance > 70 )
     30a:	07 34       	cpi	r16, 0x47	; 71
     30c:	11 05       	cpc	r17, r1
     30e:	88 f6       	brcc	.-94     	; 0x2b2 <APP_startProgram+0x19a>
     310:	83 cf       	rjmp	.-250    	; 0x218 <APP_startProgram+0x100>
			}
		}
		/************************************************************************************/
		/*****************************Second State*******************************************/
		/************************************************************************************/
		else if ( ( u16_l_distance <= 70 ) && ( u16_l_distance > 30 ) )
     312:	c8 01       	movw	r24, r16
     314:	4f 97       	sbiw	r24, 0x1f	; 31
     316:	88 97       	sbiw	r24, 0x28	; 40
     318:	68 f5       	brcc	.+90     	; 0x374 <APP_startProgram+0x25c>
		{
			DCM_controlDCMSpeed( 30 );
     31a:	8e e1       	ldi	r24, 0x1E	; 30
     31c:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
			DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CW );
     320:	61 e0       	ldi	r22, 0x01	; 1
     322:	80 e6       	ldi	r24, 0x60	; 96
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CW );
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	84 e6       	ldi	r24, 0x64	; 100
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			
			u16_l_distance = US_readDistance();
     334:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     338:	8c 01       	movw	r16, r24
			
			LCD_setCursor( 0, 6 );
     33a:	66 e0       	ldi	r22, 0x06	; 6
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendString( ( u8* ) "30" );
     342:	8f e9       	ldi	r24, 0x9F	; 159
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
			LCD_setCursor( 0, 14 );
     34a:	6e e0       	ldi	r22, 0x0E	; 14
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendCharacter( 'F' );
     352:	86 e4       	ldi	r24, 0x46	; 70
     354:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
			LCD_setCursor( 1, 7 );
     358:	67 e0       	ldi	r22, 0x07	; 7
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_floatToString( u16_l_distance );
     360:	b8 01       	movw	r22, r16
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     36a:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
			
			APP_stopCar();
     36e:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
     372:	52 cf       	rjmp	.-348    	; 0x218 <APP_startProgram+0x100>
		}
		/************************************************************************************/
		/*****************************Third State********************************************/
		/************************************************************************************/
		else if ( ( u16_l_distance <= 30 ) && ( u16_l_distance > 20 ) )
     374:	c8 01       	movw	r24, r16
     376:	45 97       	sbiw	r24, 0x15	; 21
     378:	0a 97       	sbiw	r24, 0x0a	; 10
     37a:	08 f0       	brcs	.+2      	; 0x37e <APP_startProgram+0x266>
     37c:	bf c0       	rjmp	.+382    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
		{
			DCM_controlDCMSpeed( 30 );
     37e:	8e e1       	ldi	r24, 0x1E	; 30
     380:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
			DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_STOP );
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	80 e6       	ldi	r24, 0x60	; 96
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_STOP );
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	84 e6       	ldi	r24, 0x64	; 100
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			
			u16_l_distance = US_readDistance();
     398:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     39c:	8c 01       	movw	r16, r24
			
			LCD_setCursor( 0,6 );
     39e:	66 e0       	ldi	r22, 0x06	; 6
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendString( ( u8* ) "00" );
     3a6:	85 ea       	ldi	r24, 0xA5	; 165
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
			LCD_setCursor(0,14);
     3ae:	6e e0       	ldi	r22, 0x0E	; 14
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendCharacter('S');
     3b6:	83 e5       	ldi	r24, 0x53	; 83
     3b8:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
			
			while( u16_l_distance <= 30 )
     3bc:	2c c0       	rjmp	.+88     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				DCM_controlDCMSpeed( 30 );
     3be:	8e e1       	ldi	r24, 0x1E	; 30
     3c0:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
				DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CCW );
     3c4:	62 e0       	ldi	r22, 0x02	; 2
     3c6:	80 e6       	ldi	r24, 0x60	; 96
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CCW );
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	84 e6       	ldi	r24, 0x64	; 100
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				
				u16_l_distance = US_readDistance();
     3d8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     3dc:	8c 01       	movw	r16, r24
				
				LCD_setCursor( 0, 6 );
     3de:	66 e0       	ldi	r22, 0x06	; 6
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendString( ( u8* ) "30" );
     3e6:	8f e9       	ldi	r24, 0x9F	; 159
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
				LCD_setCursor( 0, 14 );
     3ee:	6e e0       	ldi	r22, 0x0E	; 14
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendCharacter( 'B' );
     3f6:	82 e4       	ldi	r24, 0x42	; 66
     3f8:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
				LCD_setCursor( 1 ,7 );
     3fc:	67 e0       	ldi	r22, 0x07	; 7
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_floatToString( u16_l_distance );
     404:	b8 01       	movw	r22, r16
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     40e:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
				APP_stopCar();
     412:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
			LCD_setCursor( 0,6 );
			LCD_sendString( ( u8* ) "00" );
			LCD_setCursor(0,14);
			LCD_sendCharacter('S');
			
			while( u16_l_distance <= 30 )
     416:	0f 31       	cpi	r16, 0x1F	; 31
     418:	11 05       	cpc	r17, r1
     41a:	88 f2       	brcs	.-94     	; 0x3be <APP_startProgram+0x2a6>
				LCD_setCursor( 1 ,7 );
				LCD_floatToString( u16_l_distance );
				APP_stopCar();
			}
			
			if ( u8_g_select == APP_U8_CAR_ROTATE_RGT )
     41c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
     420:	81 11       	cpse	r24, r1
     422:	1d c0       	rjmp	.+58     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			{
				DCM_controlDCMSpeed( 30 );
     424:	8e e1       	ldi	r24, 0x1E	; 30
     426:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
				DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CCW );
     42a:	62 e0       	ldi	r22, 0x02	; 2
     42c:	80 e6       	ldi	r24, 0x60	; 96
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CW );
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	84 e6       	ldi	r24, 0x64	; 100
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				
				LCD_setCursor( 0 ,6 );
     43e:	66 e0       	ldi	r22, 0x06	; 6
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendString( ( u8* ) "30" );
     446:	8f e9       	ldi	r24, 0x9F	; 159
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
				LCD_setCursor( 0, 14 );
     44e:	6e e0       	ldi	r22, 0x0E	; 14
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendCharacter( 'R' );
     456:	82 e5       	ldi	r24, 0x52	; 82
     458:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
     45c:	1c c0       	rjmp	.+56     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			}
			
			else
			{
				DCM_controlDCMSpeed( 30 );
     45e:	8e e1       	ldi	r24, 0x1E	; 30
     460:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
				DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CW );
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	80 e6       	ldi	r24, 0x60	; 96
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CCW );
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	84 e6       	ldi	r24, 0x64	; 100
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
				
				LCD_setCursor( 0, 6 );
     478:	66 e0       	ldi	r22, 0x06	; 6
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendString( ( u8* ) "30" );
     480:	8f e9       	ldi	r24, 0x9F	; 159
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
				LCD_setCursor( 0, 14 );
     488:	6e e0       	ldi	r22, 0x0E	; 14
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
				LCD_sendCharacter( 'R' );
     490:	82 e5       	ldi	r24, 0x52	; 82
     492:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
			}
			
			TMR0_delayMS( 600 );
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	86 e1       	ldi	r24, 0x16	; 22
     49c:	94 e4       	ldi	r25, 0x44	; 68
     49e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
			
			u16_l_distance = US_readDistance();
     4a2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     4a6:	8c 01       	movw	r16, r24
			
			LCD_setCursor( 1, 7 );
     4a8:	67 e0       	ldi	r22, 0x07	; 7
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_floatToString( u16_l_distance );
     4b0:	b8 01       	movw	r22, r16
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     4ba:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
			
			DCM_controlDCMSpeed( 30 );
     4be:	8e e1       	ldi	r24, 0x1E	; 30
     4c0:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
			DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_STOP );
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	80 e6       	ldi	r24, 0x60	; 96
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_STOP );
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	84 e6       	ldi	r24, 0x64	; 100
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			
			LCD_setCursor( 0, 6 );
     4d8:	66 e0       	ldi	r22, 0x06	; 6
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendString( ( u8* ) "00" );
     4e0:	85 ea       	ldi	r24, 0xA5	; 165
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
			LCD_setCursor( 0, 14 );
     4e8:	6e e0       	ldi	r22, 0x0E	; 14
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendCharacter( 'S' );
     4f0:	83 e5       	ldi	r24, 0x53	; 83
     4f2:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
			APP_stopCar();
     4f6:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
     4fa:	8e ce       	rjmp	.-740    	; 0x218 <APP_startProgram+0x100>
		}
		/************************************************************************************/
		/*****************************Forth State********************************************/
		/************************************************************************************/
		else if ( u16_l_distance <= 20 )
     4fc:	05 31       	cpi	r16, 0x15	; 21
     4fe:	11 05       	cpc	r17, r1
     500:	08 f0       	brcs	.+2      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     502:	8a ce       	rjmp	.-748    	; 0x218 <APP_startProgram+0x100>
		{
			DCM_controlDCMSpeed( 30 );
     504:	8e e1       	ldi	r24, 0x1E	; 30
     506:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
			DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_STOP );
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	80 e6       	ldi	r24, 0x60	; 96
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_STOP );
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	84 e6       	ldi	r24, 0x64	; 100
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
			
			u16_l_distance = US_readDistance();
     51e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     522:	8c 01       	movw	r16, r24
			
			LCD_setCursor( 0, 6 );
     524:	66 e0       	ldi	r22, 0x06	; 6
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendString( ( u8* ) "00" );
     52c:	85 ea       	ldi	r24, 0xA5	; 165
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
			LCD_setCursor( 0, 14 );
     534:	6e e0       	ldi	r22, 0x0E	; 14
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_sendCharacter( 'S' );
     53c:	83 e5       	ldi	r24, 0x53	; 83
     53e:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
			LCD_setCursor( 1, 7 );
     542:	67 e0       	ldi	r22, 0x07	; 7
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
			LCD_floatToString( u16_l_distance );
     54a:	b8 01       	movw	r22, r16
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatunsisf>
     554:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_floatToString>
			
			u8 u8_l_counter = 0;
     558:	f1 2c       	mov	r15, r1
			
			while ( ( u8_l_counter < 4 ) && ( u16_l_distance <= 20 ) )
     55a:	3b c0       	rjmp	.+118    	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
			{
				APP_stopCar();
     55c:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
				
				u16_l_distance = US_readDistance();
     560:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     564:	8c 01       	movw	r16, r24
				
				u8_l_counter++;
     566:	f3 94       	inc	r15
				
				if ( u8_g_select == APP_U8_CAR_ROTATE_RGT )
     568:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
     56c:	81 11       	cpse	r24, r1
     56e:	16 c0       	rjmp	.+44     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
				{
					DCM_controlDCMSpeed( 30 );
     570:	8e e1       	ldi	r24, 0x1E	; 30
     572:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
					DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CCW );
     576:	62 e0       	ldi	r22, 0x02	; 2
     578:	80 e6       	ldi	r24, 0x60	; 96
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
					DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CW );
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	84 e6       	ldi	r24, 0x64	; 100
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
					
					LCD_setCursor( 1, 0 );
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
					LCD_sendString((u8*)"Speed:30% Dir:R");
     592:	88 ea       	ldi	r24, 0xA8	; 168
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
     59a:	15 c0       	rjmp	.+42     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
				}
				
				else
				{
					DCM_controlDCMSpeed( 30 );
     59c:	8e e1       	ldi	r24, 0x1E	; 30
     59e:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
					DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CW );
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	80 e6       	ldi	r24, 0x60	; 96
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
					DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_ROTATE_CCW );
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	84 e6       	ldi	r24, 0x64	; 100
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
					
					LCD_setCursor( 1, 0 );
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
					LCD_sendString( ( u8* ) "Speed:30% Dir:R" );
     5be:	88 ea       	ldi	r24, 0xA8	; 168
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
				}
				
				TMR0_delayMS( 600 );
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	86 e1       	ldi	r24, 0x16	; 22
     5cc:	94 e4       	ldi	r25, 0x44	; 68
     5ce:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
			LCD_setCursor( 1, 7 );
			LCD_floatToString( u16_l_distance );
			
			u8 u8_l_counter = 0;
			
			while ( ( u8_l_counter < 4 ) && ( u16_l_distance <= 20 ) )
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	8f 15       	cp	r24, r15
     5d6:	20 f0       	brcs	.+8      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
     5d8:	05 31       	cpi	r16, 0x15	; 21
     5da:	11 05       	cpc	r17, r1
     5dc:	08 f4       	brcc	.+2      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
     5de:	be cf       	rjmp	.-132    	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
				}
				
				TMR0_delayMS( 600 );
			}
			
			if ( u8_l_counter == 4 )
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	f8 12       	cpse	r15, r24
     5e4:	25 c0       	rjmp	.+74     	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
     5e6:	21 c0       	rjmp	.+66     	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
			{
				while( u16_l_distance <= 20 )
				{
					DCM_controlDCMSpeed( 30 );
     5e8:	8e e1       	ldi	r24, 0x1E	; 30
     5ea:	0e 94 a0 03 	call	0x740	; 0x740 <DCM_controlDCMSpeed>
					DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_STOP );
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	80 e6       	ldi	r24, 0x60	; 96
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
					DCM_controlDCM( &ast_g_DCMs[1], DCM_U8_STOP );
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	84 e6       	ldi	r24, 0x64	; 100
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 67 03 	call	0x6ce	; 0x6ce <DCM_controlDCM>
					
					u16_l_distance = US_readDistance();
     602:	0e 94 59 06 	call	0xcb2	; 0xcb2 <US_readDistance>
     606:	8c 01       	movw	r16, r24
					
					LCD_setCursor( 0, 6 );
     608:	66 e0       	ldi	r22, 0x06	; 6
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
					LCD_sendString( ( u8* ) "00" );
     610:	85 ea       	ldi	r24, 0xA5	; 165
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
					LCD_setCursor( 0, 14 );
     618:	6e e0       	ldi	r22, 0x0E	; 14
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 5f 05 	call	0xabe	; 0xabe <LCD_setCursor>
					LCD_sendCharacter( 'S' );
     620:	83 e5       	ldi	r24, 0x53	; 83
     622:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
					APP_stopCar();
     626:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
				TMR0_delayMS( 600 );
			}
			
			if ( u8_l_counter == 4 )
			{
				while( u16_l_distance <= 20 )
     62a:	05 31       	cpi	r16, 0x15	; 21
     62c:	11 05       	cpc	r17, r1
     62e:	e0 f2       	brcs	.-72     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
					LCD_sendCharacter( 'S' );
					APP_stopCar();
				}
			}
			
			APP_stopCar();
     630:	0e 94 5d 00 	call	0xba	; 0xba <APP_stopCar>
     634:	f1 cd       	rjmp	.-1054   	; 0x218 <APP_startProgram+0x100>

00000636 <BTN_init>:
 Input: en PortNumber and en PinNumber
 Output: void
 Description: Function to initialize BTN pin as INPUT.
*/
void BTN_init( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber )
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	c8 2f       	mov	r28, r24
     63c:	d6 2f       	mov	r29, r22
	DIO_init( en_a_portNumber, en_a_pinNumber, IN );	
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_write( en_a_portNumber, en_a_pinNumber, HIGH );
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	6d 2f       	mov	r22, r29
     648:	8c 2f       	mov	r24, r28
     64a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <BTN_read>:
 Output: void
 Description: Function to get BTN state.
*/
void BTN_read( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber, u8 *pu8_a_returnedBTNState )
{
	DIO_read( en_a_portNumber, en_a_pinNumber, pu8_a_returnedBTNState );
     654:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_read>
     658:	08 95       	ret

0000065a <DCM_initialization>:
 Input: Pointer to st DCMConfig
 Output: u8 Error or No Error
 Description: Function to Initialize DCM peripheral.
*/
u8 DCM_initialization ( DCM_ST_CONFIG *pst_a_DCMConfig )
{
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: Pointer is not equal to NULL */
	if ( pst_a_DCMConfig != NULL )	
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	01 f5       	brne	.+64     	; 0x6a8 <DCM_initialization+0x4e>
	}
	/* Check 2: Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, Pointer is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	2b c0       	rjmp	.+86     	; 0x6c2 <DCM_initialization+0x68>
	{
		/* Loop: Until the number of configured DCM(s) is initialized */
		for ( u8 u8_l_index = 0; u8_l_index < DCM_U8_NUMBER_OF_DCM; u8_l_index++ )
		{
			/* Step 1: Initialize initial direction of DCM, in both Direction Pins */
			DIO_init( pst_a_DCMConfig[u8_l_index].u8_g_directionCWPort, pst_a_DCMConfig[u8_l_index].u8_g_directionCWPin, OUT );
     66c:	c1 2f       	mov	r28, r17
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	cc 0f       	add	r28, r28
     672:	dd 1f       	adc	r29, r29
     674:	cc 0f       	add	r28, r28
     676:	dd 1f       	adc	r29, r29
     678:	ce 0d       	add	r28, r14
     67a:	df 1d       	adc	r29, r15
     67c:	69 81       	ldd	r22, Y+1	; 0x01
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	88 81       	ld	r24, Y
     682:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
			DIO_init( pst_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, pst_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, OUT );
     686:	6b 81       	ldd	r22, Y+3	; 0x03
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
		
			/* Step 2: Initialize initial value of DCM, in both Direction Pins */
			DIO_write( pst_a_DCMConfig[u8_l_index].u8_g_directionCWPort, pst_a_DCMConfig[u8_l_index].u8_g_directionCWPin, LOW );
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	88 81       	ld	r24, Y
     696:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
			DIO_write( pst_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, pst_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, LOW );		
     69a:	6b 81       	ldd	r22, Y+3	; 0x03
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>

	/* Check 1: Pointer is not equal to NULL */
	if ( pst_a_DCMConfig != NULL )	
	{
		/* Loop: Until the number of configured DCM(s) is initialized */
		for ( u8 u8_l_index = 0; u8_l_index < DCM_U8_NUMBER_OF_DCM; u8_l_index++ )
     6a4:	1f 5f       	subi	r17, 0xFF	; 255
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DCM_initialization+0x52>
     6a8:	7c 01       	movw	r14, r24
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	12 30       	cpi	r17, 0x02	; 2
     6ae:	f0 f2       	brcs	.-68     	; 0x66c <DCM_initialization+0x12>
			DIO_write( pst_a_DCMConfig[u8_l_index].u8_g_directionCWPort, pst_a_DCMConfig[u8_l_index].u8_g_directionCWPin, LOW );
			DIO_write( pst_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, pst_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, LOW );		
		}
		
		/* Step 3: Initialize PWM */
		PWM_initialization( DCM_U8_PWM_PORT, DCM_U8_PWM_PIN, DCM_U8_FREQUENCY );
     6b0:	2d ec       	ldi	r18, 0xCD	; 205
     6b2:	3c ec       	ldi	r19, 0xCC	; 204
     6b4:	4c e4       	ldi	r20, 0x4C	; 76
     6b6:	5e e3       	ldi	r21, 0x3E	; 62
     6b8:	64 e0       	ldi	r22, 0x04	; 4
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <PWM_initialization>
 Description: Function to Initialize DCM peripheral.
*/
u8 DCM_initialization ( DCM_ST_CONFIG *pst_a_DCMConfig )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, Pointer is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
	}
	
	return u8_l_errorState;
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <DCM_controlDCM>:
 Input: Pointer to st DCMConfig and u8 ControlMode
 Output: u8 Error or No Error
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM     ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode )
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: Pointer is not equal to NULL and ControlMode is in the valid range */
	if ( ( pst_a_DCMConfig != NULL ) && ( u8_a_controlMode <= DCM_U8_ROTATE_CCW ) )
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	69 f1       	breq	.+90     	; 0x730 <DCM_controlDCM+0x62>
     6d6:	63 30       	cpi	r22, 0x03	; 3
     6d8:	68 f5       	brcc	.+90     	; 0x734 <DCM_controlDCM+0x66>
     6da:	ec 01       	movw	r28, r24
	{
		/* Check 1.1: Required ControlMode */
		switch ( u8_a_controlMode )
     6dc:	61 30       	cpi	r22, 0x01	; 1
     6de:	81 f0       	breq	.+32     	; 0x700 <DCM_controlDCM+0x32>
     6e0:	18 f0       	brcs	.+6      	; 0x6e8 <DCM_controlDCM+0x1a>
     6e2:	62 30       	cpi	r22, 0x02	; 2
     6e4:	c9 f0       	breq	.+50     	; 0x718 <DCM_controlDCM+0x4a>
     6e6:	28 c0       	rjmp	.+80     	; 0x738 <DCM_controlDCM+0x6a>
		{
			case DCM_U8_STOP:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin, LOW );
     6e8:	69 81       	ldd	r22, Y+1	; 0x01
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	88 81       	ld	r24, Y
     6ee:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW );
     6f2:	6b 81       	ldd	r22, Y+3	; 0x03
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM     ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
		switch ( u8_a_controlMode )
		{
			case DCM_U8_STOP:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin, LOW );
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW );
			break;
     6fe:	1d c0       	rjmp	.+58     	; 0x73a <DCM_controlDCM+0x6c>
			
			case DCM_U8_ROTATE_CW:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin, HIGH );
     700:	69 81       	ldd	r22, Y+1	; 0x01
     702:	41 e0       	ldi	r20, 0x01	; 1
     704:	88 81       	ld	r24, Y
     706:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW );
     70a:	6b 81       	ldd	r22, Y+3	; 0x03
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM     ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     714:	81 e0       	ldi	r24, 0x01	; 1
			break;
			
			case DCM_U8_ROTATE_CW:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin, HIGH );
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW );
			break;
     716:	11 c0       	rjmp	.+34     	; 0x73a <DCM_controlDCM+0x6c>
			
			case DCM_U8_ROTATE_CCW:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin, LOW );
     718:	69 81       	ldd	r22, Y+1	; 0x01
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	88 81       	ld	r24, Y
     71e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, HIGH );
     722:	6b 81       	ldd	r22, Y+3	; 0x03
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM     ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     72c:	81 e0       	ldi	r24, 0x01	; 1
			break;
			
			case DCM_U8_ROTATE_CCW:
				DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin, LOW );
				DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, HIGH );
			break;
     72e:	05 c0       	rjmp	.+10     	; 0x73a <DCM_controlDCM+0x6c>
	}
	/* Check 2: Pointer is equal to NULL, or ControlMode is not in the valid range */
	else
	{
		/* Update error state = NOK, Pointer is NULL, or wrong ControlMode! */
		u8_l_errorState = STD_TYPES_NOK;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	03 c0       	rjmp	.+6      	; 0x73a <DCM_controlDCM+0x6c>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	01 c0       	rjmp	.+2      	; 0x73a <DCM_controlDCM+0x6c>
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM     ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     738:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, Pointer is NULL, or wrong ControlMode! */
		u8_l_errorState = STD_TYPES_NOK;
	}
	
	return u8_l_errorState;
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <DCM_controlDCMSpeed>:
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: SpeedPercentage are in the valid range */
	if ( u8_a_speedPercentage <= DCM_U8_MAX_SPEED )
     740:	85 36       	cpi	r24, 0x65	; 101
     742:	20 f4       	brcc	.+8      	; 0x74c <DCM_controlDCMSpeed+0xc>
	{
		PWM_generatePWM( u8_a_speedPercentage );
     744:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <PWM_generatePWM>
 Description: Function Control DCM Speed.
*/
u8 DCM_controlDCMSpeed( u8 u8_a_speedPercentage )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	08 95       	ret
	}	
	/* Check 2: SpeedPercentage is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong SpeedPercentage! */
		u8_l_errorState = STD_TYPES_NOK;
     74c:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	return u8_l_errorState;
}
     74e:	08 95       	ret

00000750 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the External Interrupt source.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ST_ICU_ConfigType * Config_Ptr)
{
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	27 97       	sbiw	r28, 0x07	; 7
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	8c 01       	movw	r16, r24
	ST_TME1_ConfigType ST_L_Timer;
	ST_L_Timer.CLK_source=Config_Ptr->clock;
     76a:	fc 01       	movw	r30, r24
     76c:	80 81       	ld	r24, Z
     76e:	8a 83       	std	Y+2, r24	; 0x02
	ST_L_Timer.TMR_mode=Normal;
     770:	19 82       	std	Y+1, r1	; 0x01
	ST_L_Timer.INT_state=Disable;
     772:	1b 82       	std	Y+3, r1	; 0x03
	TMR1_init(&ST_L_Timer);
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <TMR1_init>
	EXI_enablePIE(Config_Ptr->source,Config_Ptr->edge);
     77c:	f8 01       	movw	r30, r16
     77e:	61 81       	ldd	r22, Z+1	; 0x01
     780:	82 81       	ldd	r24, Z+2	; 0x02
     782:	0e 94 0e 08 	call	0x101c	; 0x101c <EXI_enablePIE>
	EN_g_edge=Config_Ptr->edge;
	EN_g_source=Config_Ptr->source;
     786:	f8 01       	movw	r30, r16
     788:	82 81       	ldd	r24, Z+2	; 0x02
     78a:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <EN_g_source>
}
     78e:	27 96       	adiw	r28, 0x07	; 7
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <ICU_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
	EXI_intSetCallBack(EN_g_source,a_ptr);
     7a4:	bc 01       	movw	r22, r24
     7a6:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EN_g_source>
     7aa:	0e 94 8f 08 	call	0x111e	; 0x111e <EXI_intSetCallBack>
     7ae:	08 95       	ret

000007b0 <ICU_setEdgeDetectionType>:
/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const EN_ICU_EdgeType edgeType)
{
	if(edgeType==RISING)
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	31 f4       	brne	.+12     	; 0x7c0 <ICU_setEdgeDetectionType+0x10>
		EXI_enablePIE(EN_g_source,EXI_U8_SENSE_RISING_EDGE);
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EN_g_source>
     7ba:	0e 94 0e 08 	call	0x101c	; 0x101c <EXI_enablePIE>
     7be:	08 95       	ret
	else
		EXI_enablePIE(EN_g_source,EXI_U8_SENSE_FALLING_EDGE);
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EN_g_source>
     7c6:	0e 94 0e 08 	call	0x101c	; 0x101c <EXI_enablePIE>
     7ca:	08 95       	ret

000007cc <ICU_getInputCaptureValue>:
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 ICU_getInputCaptureValue(void)
{
	return TMR1_readTime();
     7cc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <TMR1_readTime>
}
     7d0:	08 95       	ret

000007d2 <ICU_clearTimerValue>:
/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
	TMR1_clear();
     7d2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TMR1_clear>
     7d6:	08 95       	ret

000007d8 <KPD_initialization>:
 Description: Function to disable Keypad.
*/
void KPD_disableKPD    ( void )
{
	/* Set the one Pin configured Output to Input, in order to disable the KPD, therefore all KPD pins are Input */
	DIO_init( KPD_U8_OUTPUT_PORT, KPD_U8_OUTPUT_PIN1, IN );
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	62 e0       	ldi	r22, 0x02	; 2
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	65 e0       	ldi	r22, 0x05	; 5
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	66 e0       	ldi	r22, 0x06	; 6
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	62 e0       	ldi	r22, 0x02	; 2
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	65 e0       	ldi	r22, 0x05	; 5
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	66 e0       	ldi	r22, 0x06	; 6
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
     814:	08 95       	ret

00000816 <KPD_getPressedKey>:
 Input: Pointer to u8 ReturnedKeyValue
 Output: u8 Error or No Error
 Description: Function to check for the pressed key.
*/
u8 KPD_getPressedKey   ( u8 *pu8_a_returnedKeyValue )
{
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	1f 92       	push	r1
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
	
	/* Check 1: Pointer is not equal to NULL */
	if ( pu8_a_returnedKeyValue != NULL )
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	09 f4       	brne	.+2      	; 0x836 <KPD_getPressedKey+0x20>
     834:	56 c0       	rjmp	.+172    	; 0x8e2 <__stack+0x83>
     836:	7c 01       	movw	r14, r24
	{
		u8 u8_l_pinValue;
		u8 u8_l_keyFlag = KPD_U8_KEY_NOT_FOUND;
		
		/* Step 1: Update ReturnedKeyValue with the Not Pressed Key value */
		*pu8_a_returnedKeyValue = KPD_U8_KEY_NOT_PRESSED;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	f7 01       	movw	r30, r14
     83c:	80 83       	st	Z, r24

		/* Loop: On Rows -> Output ( i.e.: Set Pin ) */
		for ( u8 Loc_u8RowsCounter = 0; Loc_u8RowsCounter < 1; Loc_u8RowsCounter++ )
     83e:	00 e0       	ldi	r16, 0x00	; 0
	
	/* Check 1: Pointer is not equal to NULL */
	if ( pu8_a_returnedKeyValue != NULL )
	{
		u8 u8_l_pinValue;
		u8 u8_l_keyFlag = KPD_U8_KEY_NOT_FOUND;
     840:	c1 2c       	mov	r12, r1
		
		/* Step 1: Update ReturnedKeyValue with the Not Pressed Key value */
		*pu8_a_returnedKeyValue = KPD_U8_KEY_NOT_PRESSED;

		/* Loop: On Rows -> Output ( i.e.: Set Pin ) */
		for ( u8 Loc_u8RowsCounter = 0; Loc_u8RowsCounter < 1; Loc_u8RowsCounter++ )
     842:	4a c0       	rjmp	.+148    	; 0x8d8 <__stack+0x79>
		{
			/* Step 2: Activate Row ( i.e. Set Pin Low ) */
            DIO_write( KPD_U8_OUTPUT_PORT, Au8_gs_rowsPins[Loc_u8RowsCounter], LOW );
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	62 e0       	ldi	r22, 0x02	; 2
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>

			/* Loop: On Columns -> Input ( i.e. Get Pin ) */
			for ( u8 Loc_u8ColsCounter = 0; Loc_u8ColsCounter <= 1; Loc_u8ColsCounter++ )
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	38 c0       	rjmp	.+112    	; 0x8c2 <__stack+0x63>
			{
				/* Step 3: Get the value of each Key */
				DIO_read( KPD_U8_INPUT_PORT, Au8_gs_colsPins[Loc_u8ColsCounter], &u8_l_pinValue );
     852:	a1 2e       	mov	r10, r17
     854:	b1 2c       	mov	r11, r1
     856:	f5 01       	movw	r30, r10
     858:	e8 54       	subi	r30, 0x48	; 72
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	d0 80       	ld	r13, Z
     85e:	ae 01       	movw	r20, r28
     860:	4f 5f       	subi	r20, 0xFF	; 255
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	6d 2d       	mov	r22, r13
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_read>

				/* Check 1.1.1: Key is Pressed */
				if ( u8_l_pinValue == LOW )
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	81 11       	cpse	r24, r1
     870:	27 c0       	rjmp	.+78     	; 0x8c0 <__stack+0x61>
				{
					/* Push buttons often generate spurious open/close transitions when pressed, due to mechanical and physical issues: these transitions may be read as multiple presses in a very short time fooling the program. This example demonstrates how to debounce an input, which means checking twice in a short period of time to make sure the pushbutton is definitely pressed. Without debouncing, pressing the button once may cause unpredictable results. */
					/* Delay debouncing time of the Key */
					//_delay_ms( 20 );
					TMR0_delayMS( 20 );
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 ea       	ldi	r24, 0xA0	; 160
     878:	91 e4       	ldi	r25, 0x41	; 65
     87a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
					
					/* Step 4: Recheck if the Key is still Pressed */
					DIO_read( KPD_U8_INPUT_PORT, Au8_gs_colsPins[Loc_u8ColsCounter], &u8_l_pinValue );
     87e:	ae 01       	movw	r20, r28
     880:	4f 5f       	subi	r20, 0xFF	; 255
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	6d 2d       	mov	r22, r13
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_read>

					/* This step assures releasing Key before returning the key value, to avoid returning multiple values for the same Press! */
					/* Loop: Until releasing Key ( i.e. Pin value is High ) */
					while ( u8_l_pinValue == LOW )
     88c:	07 c0       	rjmp	.+14     	; 0x89c <__stack+0x3d>
					{
						DIO_read( KPD_U8_INPUT_PORT, Au8_gs_colsPins[Loc_u8ColsCounter], &u8_l_pinValue );
     88e:	ae 01       	movw	r20, r28
     890:	4f 5f       	subi	r20, 0xFF	; 255
     892:	5f 4f       	sbci	r21, 0xFF	; 255
     894:	6d 2d       	mov	r22, r13
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_read>
					/* Step 4: Recheck if the Key is still Pressed */
					DIO_read( KPD_U8_INPUT_PORT, Au8_gs_colsPins[Loc_u8ColsCounter], &u8_l_pinValue );

					/* This step assures releasing Key before returning the key value, to avoid returning multiple values for the same Press! */
					/* Loop: Until releasing Key ( i.e. Pin value is High ) */
					while ( u8_l_pinValue == LOW )
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	88 23       	and	r24, r24
     8a0:	b1 f3       	breq	.-20     	; 0x88e <__stack+0x2f>
					{
						DIO_read( KPD_U8_INPUT_PORT, Au8_gs_colsPins[Loc_u8ColsCounter], &u8_l_pinValue );
					}
					
					/* Step 5: Update ReturnedKeyValue with the Pressed Key value */
					*pu8_a_returnedKeyValue = Au8_gs_keys[Loc_u8RowsCounter][Loc_u8ColsCounter];
     8a2:	80 2f       	mov	r24, r16
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	86 54       	subi	r24, 0x46	; 70
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	fc 01       	movw	r30, r24
     8b0:	ea 0d       	add	r30, r10
     8b2:	fb 1d       	adc	r31, r11
     8b4:	80 81       	ld	r24, Z
     8b6:	f7 01       	movw	r30, r14
     8b8:	80 83       	st	Z, r24
					
					/* Step 6: Update Flag to Found */
					u8_l_keyFlag = KPD_U8_KEY_FOUND;
     8ba:	cc 24       	eor	r12, r12
     8bc:	c3 94       	inc	r12
					
					/* Step 7: Break Columns loop */
					break;
     8be:	03 c0       	rjmp	.+6      	; 0x8c6 <__stack+0x67>
		{
			/* Step 2: Activate Row ( i.e. Set Pin Low ) */
            DIO_write( KPD_U8_OUTPUT_PORT, Au8_gs_rowsPins[Loc_u8RowsCounter], LOW );

			/* Loop: On Columns -> Input ( i.e. Get Pin ) */
			for ( u8 Loc_u8ColsCounter = 0; Loc_u8ColsCounter <= 1; Loc_u8ColsCounter++ )
     8c0:	1f 5f       	subi	r17, 0xFF	; 255
     8c2:	12 30       	cpi	r17, 0x02	; 2
     8c4:	30 f2       	brcs	.-116    	; 0x852 <KPD_getPressedKey+0x3c>
					break;
				}
			}

			/* Step 8: Deactivate Row ( i.e. Set Pin High ) */
			DIO_write( KPD_U8_OUTPUT_PORT, Au8_gs_rowsPins[Loc_u8RowsCounter], HIGH );
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>

			/* Check 1.1: Flag is Found */
			if ( u8_l_keyFlag == KPD_U8_KEY_FOUND )
     8d0:	f1 e0       	ldi	r31, 0x01	; 1
     8d2:	cf 16       	cp	r12, r31
     8d4:	21 f0       	breq	.+8      	; 0x8de <__stack+0x7f>
		
		/* Step 1: Update ReturnedKeyValue with the Not Pressed Key value */
		*pu8_a_returnedKeyValue = KPD_U8_KEY_NOT_PRESSED;

		/* Loop: On Rows -> Output ( i.e.: Set Pin ) */
		for ( u8 Loc_u8RowsCounter = 0; Loc_u8RowsCounter < 1; Loc_u8RowsCounter++ )
     8d6:	0f 5f       	subi	r16, 0xFF	; 255
     8d8:	00 23       	and	r16, r16
     8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x7f>
     8dc:	b3 cf       	rjmp	.-154    	; 0x844 <KPD_getPressedKey+0x2e>
 Description: Function to check for the pressed key.
*/
u8 KPD_getPressedKey   ( u8 *pu8_a_returnedKeyValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <__stack+0x85>
	}
	/* Check 2: Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, Pointer is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;	
}
     8e4:	0f 90       	pop	r0
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	bf 90       	pop	r11
     8f8:	af 90       	pop	r10
     8fa:	08 95       	ret

000008fc <LCD_sendCommand>:
 Input: u8 Cmnd
 Output: void
 Description: Function to send a Command to LCD through Data pins.
*/
void LCD_sendCommand ( u8 u8_a_cmnd )
{
     8fc:	cf 93       	push	r28
     8fe:	c8 2f       	mov	r28, r24
	TMR0_delayMS(1);
	DIO_write (LCD_cmmnd_Port, EN, LOW);				//EN = 0 low pulse
	//_delay_ms(3);										//delay 3ms
	TMR0_delayMS(3);
	#elif Mode == bit_4									//if LCD mode chosen in 4bit mode
	DIO_setHigherNibble(LCD_Data_cmmnd_Port, u8_a_cmnd);//Sending upper nipple of u8_a_cmnd to LCD Data Port
     900:	68 2f       	mov	r22, r24
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_setHigherNibble>
	DIO_write (LCD_Data_cmmnd_Port, RS ,LOW);			//RS = 0 Command register
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, RW, LOW);			//RW = 0 write operation
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	62 e0       	ldi	r22, 0x02	; 2
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, EN, HIGH);			//EN = 1 high pulse
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	63 e0       	ldi	r22, 0x03	; 3
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_us(1);										//delay 1us is always more than 450ns
	TMR0_delayMS(1);
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	80 e8       	ldi	r24, 0x80	; 128
     92c:	9f e3       	ldi	r25, 0x3F	; 63
     92e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	DIO_write (LCD_Data_cmmnd_Port, EN ,LOW);			//EN = 0 low pulse
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	63 e0       	ldi	r22, 0x03	; 3
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_ms(2);										//delay 2ms
	TMR0_delayMS(2);
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e4       	ldi	r25, 0x40	; 64
     944:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	DIO_setLowerNibble(LCD_Data_cmmnd_Port , u8_a_cmnd);//Sending lower nipple of u8_a_cmnd to LCD Data Port
     948:	6c 2f       	mov	r22, r28
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_setLowerNibble>
	DIO_write (LCD_Data_cmmnd_Port, RS ,LOW);			//RS = 0 Command register
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, RW ,LOW);			//RW = 0 write operation
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	62 e0       	ldi	r22, 0x02	; 2
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, EN ,HIGH);			//EN = 1 high pulse
     964:	41 e0       	ldi	r20, 0x01	; 1
     966:	63 e0       	ldi	r22, 0x03	; 3
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_us(1);										//delay 1us is always more than 450ns
	TMR0_delayMS(1);
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e8       	ldi	r24, 0x80	; 128
     974:	9f e3       	ldi	r25, 0x3F	; 63
     976:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	DIO_write (LCD_Data_cmmnd_Port, EN ,LOW);			//EN = 0 low pulse
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_ms(3);										//delay 3ms
	TMR0_delayMS(3);
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	80 e4       	ldi	r24, 0x40	; 64
     98a:	90 e4       	ldi	r25, 0x40	; 64
     98c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	#endif
}
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <LCD_init>:
	LCD_sendCommand(0x0C);						//display on cursor off
	LCD_sendCommand(0x06);						//auto increment cursor
	LCD_sendCommand(0x01);						//clear display
	LCD_sendCommand(0x80);						//cursor at home position
	#elif Mode == bit_4							//if LCD mode chosen in 4bit mode
	DIO_init (LCD_Data_cmmnd_Port, D7 ,OUT);	//make data7 pin output
     994:	41 e0       	ldi	r20, 0x01	; 1
     996:	67 e0       	ldi	r22, 0x07	; 7
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_init (LCD_Data_cmmnd_Port, D6 ,OUT);	//make data6 pin output
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	66 e0       	ldi	r22, 0x06	; 6
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_init (LCD_Data_cmmnd_Port, D5 ,OUT);	//make data5 pin output
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	65 e0       	ldi	r22, 0x05	; 5
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_init (LCD_Data_cmmnd_Port, D4 ,OUT);	//make data4 pin output
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	64 e0       	ldi	r22, 0x04	; 4
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_init (LCD_Data_cmmnd_Port, EN ,OUT);	//make enable pin output
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	63 e0       	ldi	r22, 0x03	; 3
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_init (LCD_Data_cmmnd_Port, RW ,OUT);	//make rw pin output
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_init (LCD_Data_cmmnd_Port, RS ,OUT);	//make rs pin output
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	//_delay_ms(20);							//LCD power on delay is always more than 15ms
	TMR0_delayMS(20);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	91 e4       	ldi	r25, 0x41	; 65
     9e2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	LCD_sendCommand(0x02);						//initialization LCD in 4bit mode
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
	LCD_sendCommand(0x28);						//2 lines, 8x5 pixels in 4bit mode
     9ec:	88 e2       	ldi	r24, 0x28	; 40
     9ee:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
	LCD_sendCommand(0x0C);						//display on cursor off
     9f2:	8c e0       	ldi	r24, 0x0C	; 12
     9f4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
	LCD_sendCommand(0x06);						//auto increment cursor
     9f8:	86 e0       	ldi	r24, 0x06	; 6
     9fa:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
	LCD_sendCommand(0x01);						//clear display
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
	LCD_sendCommand(0x80);						//cursor at home position
     a04:	80 e8       	ldi	r24, 0x80	; 128
     a06:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
     a0a:	08 95       	ret

00000a0c <LCD_sendCharacter>:
 Input: u8 Char
 Output: void
 Description: Function to send a Character to LCD through Data pins.
*/
void LCD_sendCharacter ( u8 u8_a_char )
{
     a0c:	cf 93       	push	r28
     a0e:	c8 2f       	mov	r28, r24
	TMR0_delayMS(1);
	DIO_write (LCD_cmmnd_Port, EN ,LOW);				//EN = 0 low pulse
	//_delay_ms(1);										//delay 1ms
	TMR0_delayMS(1);
	#elif Mode == bit_4									//if LCD mode chosen in 4bit mode
	DIO_setHigherNibble(LCD_Data_cmmnd_Port, u8_a_char);//Sending upper nipple of char data to LCD Data Port
     a10:	68 2f       	mov	r22, r24
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_setHigherNibble>
	DIO_write (LCD_Data_cmmnd_Port, RS ,HIGH);			//RS = 1 Data register
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, RW ,LOW);			//RW = 0 write operation
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	62 e0       	ldi	r22, 0x02	; 2
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, EN ,HIGH);			//EN = 1 high pulse
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	63 e0       	ldi	r22, 0x03	; 3
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_us(1);										//delay 1us is always more than 450ns
	TMR0_delayMS(1);
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	9f e3       	ldi	r25, 0x3F	; 63
     a3e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	DIO_write (LCD_Data_cmmnd_Port, EN ,LOW);			//EN = 0 low pulse
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	63 e0       	ldi	r22, 0x03	; 3
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_ms(2);										//delay 2ms
	TMR0_delayMS(2);
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e4       	ldi	r25, 0x40	; 64
     a54:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	DIO_setLowerNibble(LCD_Data_cmmnd_Port, u8_a_char);	//Sending lower nipple of char data to LCD Data Port
     a58:	6c 2f       	mov	r22, r28
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_setLowerNibble>
	DIO_write (LCD_Data_cmmnd_Port, RS ,HIGH);			//RS = 1 Data register
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, RW ,LOW);			//RW = 0 write operation
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	DIO_write (LCD_Data_cmmnd_Port, EN ,HIGH);			//EN = 1 high pulse
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	63 e0       	ldi	r22, 0x03	; 3
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_us(1);										//delay 1us is always more than 450ns
	TMR0_delayMS(1);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 e8       	ldi	r24, 0x80	; 128
     a84:	9f e3       	ldi	r25, 0x3F	; 63
     a86:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	DIO_write (LCD_Data_cmmnd_Port, EN ,LOW);			//EN = 0 low pulse
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	63 e0       	ldi	r22, 0x03	; 3
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_ms(2);										//delay 2ms
	TMR0_delayMS(2);
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e4       	ldi	r25, 0x40	; 64
     a9c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	#endif
}
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <LCD_clear>:
 Description: Function to clear LCD display screen in DDRAM.
*/
void LCD_clear ( void )
{
	/* Step 1: Send Display Clear control command */
	LCD_sendCommand(0x01);					//clear display
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
	/* Step 2: Delay more than 1.53 ms */
	//_delay_ms(2);							//delay 2ms
	TMR0_delayMS(2);
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e4       	ldi	r25, 0x40	; 64
     ab2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	LCD_sendCommand(0x80);					//cursor at home position
     ab6:	80 e8       	ldi	r24, 0x80	; 128
     ab8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
     abc:	08 95       	ret

00000abe <LCD_setCursor>:
 Output: void
 Description: Function to set the Address Counter (AC) of LCD to a certain location in DDRAM.
*/
void LCD_setCursor ( u8 u8_a_row, u8 u8_a_column )
{
	if (u8_a_row == 0 && u8_a_column<16)
     abe:	81 11       	cpse	r24, r1
     ac0:	08 c0       	rjmp	.+16     	; 0xad2 <LCD_setCursor+0x14>
     ac2:	60 31       	cpi	r22, 0x10	; 16
     ac4:	30 f4       	brcc	.+12     	; 0xad2 <LCD_setCursor+0x14>
	LCD_sendCommand((u8_a_column & 0x0F)|0x80);	/* Command of first row and required position<16 */
     ac6:	86 2f       	mov	r24, r22
     ac8:	8f 70       	andi	r24, 0x0F	; 15
     aca:	80 68       	ori	r24, 0x80	; 128
     acc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
     ad0:	08 95       	ret
	else if (u8_a_row == 1 && u8_a_column<16)
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	39 f4       	brne	.+14     	; 0xae4 <LCD_setCursor+0x26>
     ad6:	60 31       	cpi	r22, 0x10	; 16
     ad8:	28 f4       	brcc	.+10     	; 0xae4 <LCD_setCursor+0x26>
	LCD_sendCommand((u8_a_column & 0x0F)|0xC0);	/* Command of first row and required position<16 */	
     ada:	86 2f       	mov	r24, r22
     adc:	8f 70       	andi	r24, 0x0F	; 15
     ade:	80 6c       	ori	r24, 0xC0	; 192
     ae0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_sendCommand>
     ae4:	08 95       	ret

00000ae6 <LCD_sendString>:
 Input: Pointer to u8 String
 Output: void
 Description: Function to send an array of characters to LCD through Data pins (From CGROM to DDRAM).
*/
void LCD_sendString ( u8 *pu8_a_string )
{
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	8c 01       	movw	r16, r24
	u16 i;
	
	for(i = 0; pu8_a_string[i]!= '\0'; i++)
     af0:	c0 e0       	ldi	r28, 0x00	; 0
     af2:	d0 e0       	ldi	r29, 0x00	; 0
     af4:	03 c0       	rjmp	.+6      	; 0xafc <LCD_sendString+0x16>
	{
		LCD_sendCharacter(pu8_a_string[i]);
     af6:	0e 94 06 05 	call	0xa0c	; 0xa0c <LCD_sendCharacter>
*/
void LCD_sendString ( u8 *pu8_a_string )
{
	u16 i;
	
	for(i = 0; pu8_a_string[i]!= '\0'; i++)
     afa:	21 96       	adiw	r28, 0x01	; 1
     afc:	f8 01       	movw	r30, r16
     afe:	ec 0f       	add	r30, r28
     b00:	fd 1f       	adc	r31, r29
     b02:	80 81       	ld	r24, Z
     b04:	81 11       	cpse	r24, r1
     b06:	f7 cf       	rjmp	.-18     	; 0xaf6 <LCD_sendString+0x10>
	{
		LCD_sendCharacter(pu8_a_string[i]);
	}
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <LCD_floatToString>:
 Input: f32 FloatValue
 Output: void
 Description: Function to send a float (one decimal) number (positive or negative) to LCD through Data pins (From CGROM to DDRAM).
*/
void LCD_floatToString (f32 f32_a_floatValue)
{
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	2a 97       	sbiw	r28, 0x0a	; 10
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
	u8 u8_l_pattern[10] , u8_l_tempRearrange, u8_l_digitCount=0,i,j;
	u32 u32_l_number;
	f32 temp_float = f32_a_floatValue * 10;
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e2       	ldi	r20, 0x20	; 32
     b30:	51 e4       	ldi	r21, 0x41	; 65
     b32:	0e 94 4e 11 	call	0x229c	; 0x229c <__mulsf3>
	u32_l_number = temp_float;
     b36:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
	
	for (i=0;u32_l_number>0;i++)
     b3a:	10 e0       	ldi	r17, 0x00	; 0
 Output: void
 Description: Function to send a float (one decimal) number (positive or negative) to LCD through Data pins (From CGROM to DDRAM).
*/
void LCD_floatToString (f32 f32_a_floatValue)
{
	u8 u8_l_pattern[10] , u8_l_tempRearrange, u8_l_digitCount=0,i,j;
     b3c:	00 e0       	ldi	r16, 0x00	; 0
	u32 u32_l_number;
	f32 temp_float = f32_a_floatValue * 10;
	u32_l_number = temp_float;
	
	for (i=0;u32_l_number>0;i++)
     b3e:	14 c0       	rjmp	.+40     	; 0xb68 <LCD_floatToString+0x56>
	{
		u8_l_pattern[i] = ((u32_l_number%10) +'0');
     b40:	2a e0       	ldi	r18, 0x0A	; 10
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	0e 94 bb 11 	call	0x2376	; 0x2376 <__udivmodsi4>
     b4c:	e1 e0       	ldi	r30, 0x01	; 1
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	ec 0f       	add	r30, r28
     b52:	fd 1f       	adc	r31, r29
     b54:	e1 0f       	add	r30, r17
     b56:	f1 1d       	adc	r31, r1
     b58:	60 5d       	subi	r22, 0xD0	; 208
     b5a:	60 83       	st	Z, r22
		u32_l_number/=10;
     b5c:	62 2f       	mov	r22, r18
     b5e:	73 2f       	mov	r23, r19
     b60:	84 2f       	mov	r24, r20
     b62:	95 2f       	mov	r25, r21
		u8_l_digitCount++;
     b64:	0f 5f       	subi	r16, 0xFF	; 255
	u8 u8_l_pattern[10] , u8_l_tempRearrange, u8_l_digitCount=0,i,j;
	u32 u32_l_number;
	f32 temp_float = f32_a_floatValue * 10;
	u32_l_number = temp_float;
	
	for (i=0;u32_l_number>0;i++)
     b66:	1f 5f       	subi	r17, 0xFF	; 255
     b68:	61 15       	cp	r22, r1
     b6a:	71 05       	cpc	r23, r1
     b6c:	81 05       	cpc	r24, r1
     b6e:	91 05       	cpc	r25, r1
     b70:	39 f7       	brne	.-50     	; 0xb40 <LCD_floatToString+0x2e>
		u8_l_pattern[i] = ((u32_l_number%10) +'0');
		u32_l_number/=10;
		u8_l_digitCount++;
	}
	
	for (j=0,i--;i>j;j++)
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	81 0f       	add	r24, r17
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <LCD_floatToString+0x8c>
	{
		u8_l_tempRearrange = u8_l_pattern[i];
     b7a:	a1 e0       	ldi	r26, 0x01	; 1
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ac 0f       	add	r26, r28
     b80:	bd 1f       	adc	r27, r29
     b82:	a8 0f       	add	r26, r24
     b84:	b1 1d       	adc	r27, r1
     b86:	2c 91       	ld	r18, X
		u8_l_pattern[i] = u8_l_pattern[j];
     b88:	e1 e0       	ldi	r30, 0x01	; 1
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ec 0f       	add	r30, r28
     b8e:	fd 1f       	adc	r31, r29
     b90:	e9 0f       	add	r30, r25
     b92:	f1 1d       	adc	r31, r1
     b94:	30 81       	ld	r19, Z
     b96:	3c 93       	st	X, r19
		u8_l_pattern[j] = u8_l_tempRearrange;
     b98:	20 83       	st	Z, r18
		i--;
     b9a:	81 50       	subi	r24, 0x01	; 1
		u8_l_pattern[i] = ((u32_l_number%10) +'0');
		u32_l_number/=10;
		u8_l_digitCount++;
	}
	
	for (j=0,i--;i>j;j++)
     b9c:	9f 5f       	subi	r25, 0xFF	; 255
     b9e:	98 17       	cp	r25, r24
     ba0:	60 f3       	brcs	.-40     	; 0xb7a <LCD_floatToString+0x68>
		u8_l_pattern[i] = u8_l_pattern[j];
		u8_l_pattern[j] = u8_l_tempRearrange;
		i--;
	}
	
	u8_l_pattern[u8_l_digitCount] =u8_l_pattern[u8_l_digitCount - 1];
     ba2:	80 2f       	mov	r24, r16
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	21 e0       	ldi	r18, 0x01	; 1
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	2c 0f       	add	r18, r28
     bb0:	3d 1f       	adc	r19, r29
     bb2:	e2 0f       	add	r30, r18
     bb4:	f3 1f       	adc	r31, r19
     bb6:	20 81       	ld	r18, Z
     bb8:	a1 e0       	ldi	r26, 0x01	; 1
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ac 0f       	add	r26, r28
     bbe:	bd 1f       	adc	r27, r29
     bc0:	a8 0f       	add	r26, r24
     bc2:	b9 1f       	adc	r27, r25
     bc4:	2c 93       	st	X, r18
	u8_l_pattern[u8_l_digitCount - 1] = '.';
     bc6:	2e e2       	ldi	r18, 0x2E	; 46
     bc8:	20 83       	st	Z, r18
	u8_l_pattern[u8_l_digitCount + 1] = '\0';
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	e1 e0       	ldi	r30, 0x01	; 1
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	ec 0f       	add	r30, r28
     bd2:	fd 1f       	adc	r31, r29
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	10 82       	st	Z, r1
	LCD_sendString( u8_l_pattern );
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_sendString>
}
     be2:	2a 96       	adiw	r28, 0x0a	; 10
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <US_edgeProcessing>:

/*============= FUNCTION DEFINITION =============*/

void US_edgeProcessing(void)
{
	u8_g_edgeCount++;
     bf8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <u8_g_edgeCount>
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <u8_g_edgeCount>
	if(u8_g_edgeCount==1)
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	31 f4       	brne	.+12     	; 0xc12 <US_edgeProcessing+0x1a>
	{
		ICU_clearTimerValue();
     c06:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING);
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ICU_setEdgeDetectionType>
     c10:	08 95       	ret
	}
	else if(u8_g_edgeCount==2)
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	59 f4       	brne	.+22     	; 0xc2c <US_edgeProcessing+0x34>
	{
		u16_g_timeHigh=ICU_getInputCaptureValue();
     c16:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ICU_getInputCaptureValue>
     c1a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <u16_g_timeHigh+0x1>
     c1e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <u16_g_timeHigh>
		ICU_clearTimerValue();
     c22:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(RISING);
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ICU_setEdgeDetectionType>
     c2c:	08 95       	ret

00000c2e <US_init>:
  u8 a_triggerPort:trigger port 
  a_triggerPin:trigger pin
  en_a_echoPin: interrupt source pin [EN_INT0,EN_INT1,EN_INT2]
 */
void US_init(u8 a_triggerPort,u8 a_triggerPin,EN_ICU_Source en_a_echoPin)
{
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	00 d0       	rcall	.+0      	; 0xc38 <US_init+0xa>
     c38:	1f 92       	push	r1
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	18 2f       	mov	r17, r24
     c40:	06 2f       	mov	r16, r22
	ST_ICU_ConfigType ST_L_IcuConfig={F_CPU_8,RISING,en_a_echoPin};
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	8a 83       	std	Y+2, r24	; 0x02
     c4a:	4b 83       	std	Y+3, r20	; 0x03
	u8_g_triggerPort=a_triggerPort;
     c4c:	10 93 bf 00 	sts	0x00BF, r17	; 0x8000bf <u8_g_triggerPort>
	u8_g_triggerPin=a_triggerPin;
     c50:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <u8_g_triggerPin>
	ICU_init(&ST_L_IcuConfig);
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 a8 03 	call	0x750	; 0x750 <ICU_init>
	ICU_setCallBack(US_edgeProcessing);
     c5c:	8c ef       	ldi	r24, 0xFC	; 252
     c5e:	95 e0       	ldi	r25, 0x05	; 5
     c60:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <ICU_setCallBack>
	DIO_init(a_triggerPort, a_triggerPin, OUT);		 //setup trigger pin direction as output
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	60 2f       	mov	r22, r16
     c68:	81 2f       	mov	r24, r17
     c6a:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_init>
	DIO_write(a_triggerPort, a_triggerPin, LOW);
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	60 2f       	mov	r22, r16
     c72:	81 2f       	mov	r24, r17
     c74:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	08 95       	ret

00000c88 <US_Trigger>:


void US_Trigger(void)
{
	DIO_write(u8_g_triggerPort, u8_g_triggerPin,HIGH);
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <u8_g_triggerPin>
     c8e:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <u8_g_triggerPort>
     c92:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
	//_delay_us(10);
	TMR0_delayMS(1);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e8       	ldi	r24, 0x80	; 128
     c9c:	9f e3       	ldi	r25, 0x3F	; 63
     c9e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TMR0_delayMS>
	DIO_write(u8_g_triggerPort, u8_g_triggerPin,LOW);
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <u8_g_triggerPin>
     ca8:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <u8_g_triggerPort>
     cac:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_write>
     cb0:	08 95       	ret

00000cb2 <US_readDistance>:
}

u16 US_readDistance(void)
{
	u16 u16_L_value=0;
	US_Trigger();
     cb2:	0e 94 44 06 	call	0xc88	; 0xc88 <US_Trigger>
	while(u8_g_edgeCount != 2);   //wait until ultrasonic sound to travel towards the object and return.
     cb6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <u8_g_edgeCount>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <US_readDistance+0x4>
	u16_L_value=((u16)u16_g_timeHigh/58);
     cbe:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <u16_g_timeHigh>
     cc2:	30 91 c1 00 	lds	r19, 0x00C1	; 0x8000c1 <u16_g_timeHigh+0x1>
     cc6:	af e9       	ldi	r26, 0x9F	; 159
     cc8:	b6 e4       	ldi	r27, 0x46	; 70
     cca:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__umulhisi3>
	u8_g_edgeCount=0;            //clear edge count to be ready for new read
     cce:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <u8_g_edgeCount>
	return u16_L_value;
}
     cd2:	92 95       	swap	r25
     cd4:	82 95       	swap	r24
     cd6:	8f 70       	andi	r24, 0x0F	; 15
     cd8:	89 27       	eor	r24, r25
     cda:	9f 70       	andi	r25, 0x0F	; 15
     cdc:	89 27       	eor	r24, r25
     cde:	08 95       	ret

00000ce0 <main>:
/* Main */
#include "main.h"

int main(void)
{
	APP_initialization();
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <APP_initialization>
	APP_startProgram();
     ce4:	0e 94 8c 00 	call	0x118	; 0x118 <APP_startProgram>
	
	return 0;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	08 95       	ret

00000cee <DIO_init>:
		break;
		case C:
			*pu8_a_returnedPortValue = DIO_U8_PINC_REG;
		break;
		case D:
			*pu8_a_returnedPortValue = DIO_U8_PIND_REG;
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	11 f1       	breq	.+68     	; 0xd36 <DIO_init+0x48>
     cf2:	30 f0       	brcs	.+12     	; 0xd00 <DIO_init+0x12>
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	d1 f1       	breq	.+116    	; 0xd6c <DIO_init+0x7e>
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	09 f4       	brne	.+2      	; 0xcfe <DIO_init+0x10>
     cfc:	52 c0       	rjmp	.+164    	; 0xda2 <DIO_init+0xb4>
     cfe:	08 95       	ret
     d00:	41 30       	cpi	r20, 0x01	; 1
     d02:	59 f4       	brne	.+22     	; 0xd1a <DIO_init+0x2c>
     d04:	2a b3       	in	r18, 0x1a	; 26
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_init+0x22>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	6a 95       	dec	r22
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_init+0x1e>
     d14:	82 2b       	or	r24, r18
     d16:	8a bb       	out	0x1a, r24	; 26
     d18:	08 95       	ret
     d1a:	41 11       	cpse	r20, r1
     d1c:	5c c0       	rjmp	.+184    	; 0xdd6 <DIO_init+0xe8>
     d1e:	2a b3       	in	r18, 0x1a	; 26
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_init+0x3c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	6a 95       	dec	r22
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_init+0x38>
     d2e:	80 95       	com	r24
     d30:	82 23       	and	r24, r18
     d32:	8a bb       	out	0x1a, r24	; 26
     d34:	08 95       	ret
     d36:	41 30       	cpi	r20, 0x01	; 1
     d38:	59 f4       	brne	.+22     	; 0xd50 <DIO_init+0x62>
     d3a:	27 b3       	in	r18, 0x17	; 23
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_init+0x58>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	6a 95       	dec	r22
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_init+0x54>
     d4a:	82 2b       	or	r24, r18
     d4c:	87 bb       	out	0x17, r24	; 23
     d4e:	08 95       	ret
     d50:	41 11       	cpse	r20, r1
     d52:	41 c0       	rjmp	.+130    	; 0xdd6 <DIO_init+0xe8>
     d54:	27 b3       	in	r18, 0x17	; 23
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_init+0x72>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	6a 95       	dec	r22
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_init+0x6e>
     d64:	80 95       	com	r24
     d66:	82 23       	and	r24, r18
     d68:	87 bb       	out	0x17, r24	; 23
     d6a:	08 95       	ret
     d6c:	41 30       	cpi	r20, 0x01	; 1
     d6e:	59 f4       	brne	.+22     	; 0xd86 <DIO_init+0x98>
     d70:	24 b3       	in	r18, 0x14	; 20
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_init+0x8e>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	6a 95       	dec	r22
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_init+0x8a>
     d80:	82 2b       	or	r24, r18
     d82:	84 bb       	out	0x14, r24	; 20
     d84:	08 95       	ret
     d86:	41 11       	cpse	r20, r1
     d88:	26 c0       	rjmp	.+76     	; 0xdd6 <DIO_init+0xe8>
     d8a:	24 b3       	in	r18, 0x14	; 20
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_init+0xa8>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	6a 95       	dec	r22
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_init+0xa4>
     d9a:	80 95       	com	r24
     d9c:	82 23       	and	r24, r18
     d9e:	84 bb       	out	0x14, r24	; 20
     da0:	08 95       	ret
     da2:	41 30       	cpi	r20, 0x01	; 1
     da4:	59 f4       	brne	.+22     	; 0xdbc <DIO_init+0xce>
     da6:	21 b3       	in	r18, 0x11	; 17
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_init+0xc4>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	6a 95       	dec	r22
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_init+0xc0>
     db6:	82 2b       	or	r24, r18
     db8:	81 bb       	out	0x11, r24	; 17
     dba:	08 95       	ret
     dbc:	41 11       	cpse	r20, r1
     dbe:	0b c0       	rjmp	.+22     	; 0xdd6 <DIO_init+0xe8>
     dc0:	21 b3       	in	r18, 0x11	; 17
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_init+0xde>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	6a 95       	dec	r22
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_init+0xda>
     dd0:	80 95       	com	r24
     dd2:	82 23       	and	r24, r18
     dd4:	81 bb       	out	0x11, r24	; 17
     dd6:	08 95       	ret

00000dd8 <DIO_write>:
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	11 f1       	breq	.+68     	; 0xe20 <DIO_write+0x48>
     ddc:	30 f0       	brcs	.+12     	; 0xdea <DIO_write+0x12>
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	d1 f1       	breq	.+116    	; 0xe56 <DIO_write+0x7e>
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	09 f4       	brne	.+2      	; 0xde8 <DIO_write+0x10>
     de6:	52 c0       	rjmp	.+164    	; 0xe8c <DIO_write+0xb4>
     de8:	08 95       	ret
     dea:	41 30       	cpi	r20, 0x01	; 1
     dec:	59 f4       	brne	.+22     	; 0xe04 <DIO_write+0x2c>
     dee:	2b b3       	in	r18, 0x1b	; 27
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_write+0x22>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	6a 95       	dec	r22
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_write+0x1e>
     dfe:	82 2b       	or	r24, r18
     e00:	8b bb       	out	0x1b, r24	; 27
     e02:	08 95       	ret
     e04:	41 11       	cpse	r20, r1
     e06:	5c c0       	rjmp	.+184    	; 0xec0 <DIO_write+0xe8>
     e08:	2b b3       	in	r18, 0x1b	; 27
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_write+0x3c>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	6a 95       	dec	r22
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_write+0x38>
     e18:	80 95       	com	r24
     e1a:	82 23       	and	r24, r18
     e1c:	8b bb       	out	0x1b, r24	; 27
     e1e:	08 95       	ret
     e20:	41 30       	cpi	r20, 0x01	; 1
     e22:	59 f4       	brne	.+22     	; 0xe3a <DIO_write+0x62>
     e24:	28 b3       	in	r18, 0x18	; 24
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_write+0x58>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	6a 95       	dec	r22
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_write+0x54>
     e34:	82 2b       	or	r24, r18
     e36:	88 bb       	out	0x18, r24	; 24
     e38:	08 95       	ret
     e3a:	41 11       	cpse	r20, r1
     e3c:	41 c0       	rjmp	.+130    	; 0xec0 <DIO_write+0xe8>
     e3e:	28 b3       	in	r18, 0x18	; 24
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_write+0x72>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	6a 95       	dec	r22
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_write+0x6e>
     e4e:	80 95       	com	r24
     e50:	82 23       	and	r24, r18
     e52:	88 bb       	out	0x18, r24	; 24
     e54:	08 95       	ret
     e56:	41 30       	cpi	r20, 0x01	; 1
     e58:	59 f4       	brne	.+22     	; 0xe70 <DIO_write+0x98>
     e5a:	25 b3       	in	r18, 0x15	; 21
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_write+0x8e>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	6a 95       	dec	r22
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_write+0x8a>
     e6a:	82 2b       	or	r24, r18
     e6c:	85 bb       	out	0x15, r24	; 21
     e6e:	08 95       	ret
     e70:	41 11       	cpse	r20, r1
     e72:	26 c0       	rjmp	.+76     	; 0xec0 <DIO_write+0xe8>
     e74:	25 b3       	in	r18, 0x15	; 21
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_write+0xa8>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	6a 95       	dec	r22
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_write+0xa4>
     e84:	80 95       	com	r24
     e86:	82 23       	and	r24, r18
     e88:	85 bb       	out	0x15, r24	; 21
     e8a:	08 95       	ret
     e8c:	41 30       	cpi	r20, 0x01	; 1
     e8e:	59 f4       	brne	.+22     	; 0xea6 <DIO_write+0xce>
     e90:	22 b3       	in	r18, 0x12	; 18
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_write+0xc4>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	6a 95       	dec	r22
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_write+0xc0>
     ea0:	82 2b       	or	r24, r18
     ea2:	82 bb       	out	0x12, r24	; 18
     ea4:	08 95       	ret
     ea6:	41 11       	cpse	r20, r1
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <DIO_write+0xe8>
     eaa:	22 b3       	in	r18, 0x12	; 18
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_write+0xde>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	6a 95       	dec	r22
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_write+0xda>
     eba:	80 95       	com	r24
     ebc:	82 23       	and	r24, r18
     ebe:	82 bb       	out	0x12, r24	; 18
     ec0:	08 95       	ret

00000ec2 <DIO_read>:
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	e9 f0       	breq	.+58     	; 0xf00 <DIO_read+0x3e>
     ec6:	30 f0       	brcs	.+12     	; 0xed4 <DIO_read+0x12>
     ec8:	82 30       	cpi	r24, 0x02	; 2
     eca:	81 f1       	breq	.+96     	; 0xf2c <DIO_read+0x6a>
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	09 f4       	brne	.+2      	; 0xed2 <DIO_read+0x10>
     ed0:	43 c0       	rjmp	.+134    	; 0xf58 <DIO_read+0x96>
     ed2:	08 95       	ret
     ed4:	79 b3       	in	r23, 0x19	; 25
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9c 01       	movw	r18, r24
     edc:	06 2e       	mov	r0, r22
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_read+0x22>
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_read+0x1e>
     ee8:	87 2f       	mov	r24, r23
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	82 23       	and	r24, r18
     eee:	93 23       	and	r25, r19
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_read+0x34>
     ef2:	95 95       	asr	r25
     ef4:	87 95       	ror	r24
     ef6:	6a 95       	dec	r22
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_read+0x30>
     efa:	fa 01       	movw	r30, r20
     efc:	80 83       	st	Z, r24
     efe:	08 95       	ret
     f00:	76 b3       	in	r23, 0x16	; 22
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9c 01       	movw	r18, r24
     f08:	06 2e       	mov	r0, r22
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_read+0x4e>
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_read+0x4a>
     f14:	87 2f       	mov	r24, r23
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	82 23       	and	r24, r18
     f1a:	93 23       	and	r25, r19
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_read+0x60>
     f1e:	95 95       	asr	r25
     f20:	87 95       	ror	r24
     f22:	6a 95       	dec	r22
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_read+0x5c>
     f26:	fa 01       	movw	r30, r20
     f28:	80 83       	st	Z, r24
     f2a:	08 95       	ret
     f2c:	73 b3       	in	r23, 0x13	; 19
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9c 01       	movw	r18, r24
     f34:	06 2e       	mov	r0, r22
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_read+0x7a>
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_read+0x76>
     f40:	87 2f       	mov	r24, r23
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	82 23       	and	r24, r18
     f46:	93 23       	and	r25, r19
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_read+0x8c>
     f4a:	95 95       	asr	r25
     f4c:	87 95       	ror	r24
     f4e:	6a 95       	dec	r22
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_read+0x88>
     f52:	fa 01       	movw	r30, r20
     f54:	80 83       	st	Z, r24
     f56:	08 95       	ret
     f58:	70 b3       	in	r23, 0x10	; 16
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9c 01       	movw	r18, r24
     f60:	06 2e       	mov	r0, r22
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_read+0xa6>
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_read+0xa2>
     f6c:	87 2f       	mov	r24, r23
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	82 23       	and	r24, r18
     f72:	93 23       	and	r25, r19
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_read+0xb8>
     f76:	95 95       	asr	r25
     f78:	87 95       	ror	r24
     f7a:	6a 95       	dec	r22
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_read+0xb4>
     f7e:	fa 01       	movw	r30, r20
     f80:	80 83       	st	Z, r24
     f82:	08 95       	ret

00000f84 <DIO_setHigherNibble>:
 Output: void
 Description: Function to set Higher Nibble of Port.
*/
void DIO_setHigherNibble ( EN_DIO_PortNumber en_a_portNumber, u8 u8_a_data )
{
	switch(en_a_portNumber)
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	61 f0       	breq	.+24     	; 0xfa0 <DIO_setHigherNibble+0x1c>
     f88:	28 f0       	brcs	.+10     	; 0xf94 <DIO_setHigherNibble+0x10>
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	79 f0       	breq	.+30     	; 0xfac <DIO_setHigherNibble+0x28>
     f8e:	83 30       	cpi	r24, 0x03	; 3
     f90:	99 f0       	breq	.+38     	; 0xfb8 <DIO_setHigherNibble+0x34>
     f92:	08 95       	ret
	{
		case A:
			UPPER_NIBBLE( DIO_U8_PORTA_REG, u8_a_data );
     f94:	8b b3       	in	r24, 0x1b	; 27
     f96:	8f 70       	andi	r24, 0x0F	; 15
     f98:	60 7f       	andi	r22, 0xF0	; 240
     f9a:	68 2b       	or	r22, r24
     f9c:	6b bb       	out	0x1b, r22	; 27
		break;	
     f9e:	08 95       	ret
		case B:
			UPPER_NIBBLE( DIO_U8_PORTB_REG, u8_a_data );
     fa0:	88 b3       	in	r24, 0x18	; 24
     fa2:	8f 70       	andi	r24, 0x0F	; 15
     fa4:	60 7f       	andi	r22, 0xF0	; 240
     fa6:	68 2b       	or	r22, r24
     fa8:	68 bb       	out	0x18, r22	; 24
		break;
     faa:	08 95       	ret
		case C:	
			UPPER_NIBBLE( DIO_U8_PORTC_REG, u8_a_data );
     fac:	85 b3       	in	r24, 0x15	; 21
     fae:	8f 70       	andi	r24, 0x0F	; 15
     fb0:	60 7f       	andi	r22, 0xF0	; 240
     fb2:	68 2b       	or	r22, r24
     fb4:	65 bb       	out	0x15, r22	; 21
		break;
     fb6:	08 95       	ret
		case D:
			UPPER_NIBBLE( DIO_U8_PORTD_REG, u8_a_data );
     fb8:	82 b3       	in	r24, 0x12	; 18
     fba:	8f 70       	andi	r24, 0x0F	; 15
     fbc:	60 7f       	andi	r22, 0xF0	; 240
     fbe:	68 2b       	or	r22, r24
     fc0:	62 bb       	out	0x12, r22	; 18
     fc2:	08 95       	ret

00000fc4 <DIO_setLowerNibble>:
 Output: void
 Description: Function to set LOWER Nibble of Port.
*/
void DIO_setLowerNibble ( EN_DIO_PortNumber en_a_portNumber, u8 u8_a_data )
{
	switch(en_a_portNumber)
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <DIO_setLowerNibble+0x22>
     fc8:	28 f0       	brcs	.+10     	; 0xfd4 <DIO_setLowerNibble+0x10>
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	a9 f0       	breq	.+42     	; 0xff8 <DIO_setLowerNibble+0x34>
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	e1 f0       	breq	.+56     	; 0x100a <DIO_setLowerNibble+0x46>
     fd2:	08 95       	ret
	{
		case A:
			LOWER_NIBBLE( DIO_U8_PORTA_REG, u8_a_data );
     fd4:	8b b3       	in	r24, 0x1b	; 27
     fd6:	90 e1       	ldi	r25, 0x10	; 16
     fd8:	69 9f       	mul	r22, r25
     fda:	b0 01       	movw	r22, r0
     fdc:	11 24       	eor	r1, r1
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	68 2b       	or	r22, r24
     fe2:	6b bb       	out	0x1b, r22	; 27
		break;
     fe4:	08 95       	ret
		case B:
			LOWER_NIBBLE( DIO_U8_PORTB_REG, u8_a_data );
     fe6:	88 b3       	in	r24, 0x18	; 24
     fe8:	90 e1       	ldi	r25, 0x10	; 16
     fea:	69 9f       	mul	r22, r25
     fec:	b0 01       	movw	r22, r0
     fee:	11 24       	eor	r1, r1
     ff0:	8f 70       	andi	r24, 0x0F	; 15
     ff2:	68 2b       	or	r22, r24
     ff4:	68 bb       	out	0x18, r22	; 24
		break;
     ff6:	08 95       	ret
		case C:
			LOWER_NIBBLE( DIO_U8_PORTC_REG, u8_a_data );
     ff8:	85 b3       	in	r24, 0x15	; 21
     ffa:	90 e1       	ldi	r25, 0x10	; 16
     ffc:	69 9f       	mul	r22, r25
     ffe:	b0 01       	movw	r22, r0
    1000:	11 24       	eor	r1, r1
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	68 2b       	or	r22, r24
    1006:	65 bb       	out	0x15, r22	; 21
		break;
    1008:	08 95       	ret
		case D:
			LOWER_NIBBLE( DIO_U8_PORTD_REG, u8_a_data );
    100a:	82 b3       	in	r24, 0x12	; 18
    100c:	90 e1       	ldi	r25, 0x10	; 16
    100e:	69 9f       	mul	r22, r25
    1010:	b0 01       	movw	r22, r0
    1012:	11 24       	eor	r1, r1
    1014:	8f 70       	andi	r24, 0x0F	; 15
    1016:	68 2b       	or	r22, r24
    1018:	62 bb       	out	0x12, r22	; 18
    101a:	08 95       	ret

0000101c <EXI_enablePIE>:
		/* Update error state = NOK, wrong InterruptId! */
		u8_l_errorState = STD_TYPES_OK;
	}
	
	return u8_l_errorState;
}
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	08 f0       	brcs	.+2      	; 0x1022 <EXI_enablePIE+0x6>
    1020:	72 c0       	rjmp	.+228    	; 0x1106 <EXI_enablePIE+0xea>
    1022:	64 30       	cpi	r22, 0x04	; 4
    1024:	08 f0       	brcs	.+2      	; 0x1028 <EXI_enablePIE+0xc>
    1026:	71 c0       	rjmp	.+226    	; 0x110a <EXI_enablePIE+0xee>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	81 f1       	breq	.+96     	; 0x108c <EXI_enablePIE+0x70>
    102c:	20 f0       	brcs	.+8      	; 0x1036 <EXI_enablePIE+0x1a>
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	09 f4       	brne	.+2      	; 0x1034 <EXI_enablePIE+0x18>
    1032:	57 c0       	rjmp	.+174    	; 0x10e2 <EXI_enablePIE+0xc6>
    1034:	6c c0       	rjmp	.+216    	; 0x110e <EXI_enablePIE+0xf2>
    1036:	8b b7       	in	r24, 0x3b	; 59
    1038:	80 64       	ori	r24, 0x40	; 64
    103a:	8b bf       	out	0x3b, r24	; 59
    103c:	61 30       	cpi	r22, 0x01	; 1
    103e:	71 f0       	breq	.+28     	; 0x105c <EXI_enablePIE+0x40>
    1040:	28 f0       	brcs	.+10     	; 0x104c <EXI_enablePIE+0x30>
    1042:	62 30       	cpi	r22, 0x02	; 2
    1044:	99 f0       	breq	.+38     	; 0x106c <EXI_enablePIE+0x50>
    1046:	63 30       	cpi	r22, 0x03	; 3
    1048:	c9 f0       	breq	.+50     	; 0x107c <EXI_enablePIE+0x60>
    104a:	63 c0       	rjmp	.+198    	; 0x1112 <EXI_enablePIE+0xf6>
    104c:	85 b7       	in	r24, 0x35	; 53
    104e:	8e 7f       	andi	r24, 0xFE	; 254
    1050:	85 bf       	out	0x35, r24	; 53
    1052:	85 b7       	in	r24, 0x35	; 53
    1054:	8d 7f       	andi	r24, 0xFD	; 253
    1056:	85 bf       	out	0x35, r24	; 53
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	08 95       	ret
    105c:	85 b7       	in	r24, 0x35	; 53
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	85 bf       	out	0x35, r24	; 53
    1062:	85 b7       	in	r24, 0x35	; 53
    1064:	8d 7f       	andi	r24, 0xFD	; 253
    1066:	85 bf       	out	0x35, r24	; 53
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	08 95       	ret
    106c:	85 b7       	in	r24, 0x35	; 53
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	85 bf       	out	0x35, r24	; 53
    1072:	85 b7       	in	r24, 0x35	; 53
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	85 bf       	out	0x35, r24	; 53
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	08 95       	ret
    107c:	85 b7       	in	r24, 0x35	; 53
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	85 bf       	out	0x35, r24	; 53
    1082:	85 b7       	in	r24, 0x35	; 53
    1084:	82 60       	ori	r24, 0x02	; 2
    1086:	85 bf       	out	0x35, r24	; 53
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	08 95       	ret
    108c:	8b b7       	in	r24, 0x3b	; 59
    108e:	80 68       	ori	r24, 0x80	; 128
    1090:	8b bf       	out	0x3b, r24	; 59
    1092:	61 30       	cpi	r22, 0x01	; 1
    1094:	71 f0       	breq	.+28     	; 0x10b2 <EXI_enablePIE+0x96>
    1096:	28 f0       	brcs	.+10     	; 0x10a2 <EXI_enablePIE+0x86>
    1098:	62 30       	cpi	r22, 0x02	; 2
    109a:	99 f0       	breq	.+38     	; 0x10c2 <EXI_enablePIE+0xa6>
    109c:	63 30       	cpi	r22, 0x03	; 3
    109e:	c9 f0       	breq	.+50     	; 0x10d2 <EXI_enablePIE+0xb6>
    10a0:	3a c0       	rjmp	.+116    	; 0x1116 <EXI_enablePIE+0xfa>
    10a2:	85 b7       	in	r24, 0x35	; 53
    10a4:	8b 7f       	andi	r24, 0xFB	; 251
    10a6:	85 bf       	out	0x35, r24	; 53
    10a8:	85 b7       	in	r24, 0x35	; 53
    10aa:	87 7f       	andi	r24, 0xF7	; 247
    10ac:	85 bf       	out	0x35, r24	; 53
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	08 95       	ret
    10b2:	85 b7       	in	r24, 0x35	; 53
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	85 bf       	out	0x35, r24	; 53
    10b8:	85 b7       	in	r24, 0x35	; 53
    10ba:	87 7f       	andi	r24, 0xF7	; 247
    10bc:	85 bf       	out	0x35, r24	; 53
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret
    10c2:	85 b7       	in	r24, 0x35	; 53
    10c4:	8b 7f       	andi	r24, 0xFB	; 251
    10c6:	85 bf       	out	0x35, r24	; 53
    10c8:	85 b7       	in	r24, 0x35	; 53
    10ca:	88 60       	ori	r24, 0x08	; 8
    10cc:	85 bf       	out	0x35, r24	; 53
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	85 b7       	in	r24, 0x35	; 53
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	85 bf       	out	0x35, r24	; 53
    10d8:	85 b7       	in	r24, 0x35	; 53
    10da:	88 60       	ori	r24, 0x08	; 8
    10dc:	85 bf       	out	0x35, r24	; 53
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	08 95       	ret
    10e2:	8b b7       	in	r24, 0x3b	; 59
    10e4:	80 62       	ori	r24, 0x20	; 32
    10e6:	8b bf       	out	0x3b, r24	; 59
    10e8:	62 30       	cpi	r22, 0x02	; 2
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <EXI_enablePIE+0xd6>
    10ec:	63 30       	cpi	r22, 0x03	; 3
    10ee:	31 f0       	breq	.+12     	; 0x10fc <EXI_enablePIE+0xe0>
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <EXI_enablePIE+0xfe>
    10f2:	84 b7       	in	r24, 0x34	; 52
    10f4:	8f 7b       	andi	r24, 0xBF	; 191
    10f6:	84 bf       	out	0x34, r24	; 52
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	08 95       	ret
    10fc:	84 b7       	in	r24, 0x34	; 52
    10fe:	80 64       	ori	r24, 0x40	; 64
    1100:	84 bf       	out	0x34, r24	; 52
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	08 95       	ret
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	08 95       	ret
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	08 95       	ret
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	08 95       	ret
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	08 95       	ret
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	08 95       	ret
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	08 95       	ret

0000111e <EXI_intSetCallBack>:
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	68 f4       	brcc	.+26     	; 0x113c <EXI_intSetCallBack+0x1e>
    1122:	61 15       	cp	r22, r1
    1124:	71 05       	cpc	r23, r1
    1126:	61 f0       	breq	.+24     	; 0x1140 <EXI_intSetCallBack+0x22>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
    1128:	e8 2f       	mov	r30, r24
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	ed 53       	subi	r30, 0x3D	; 61
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	71 83       	std	Z+1, r23	; 0x01
    1136:	60 83       	st	Z, r22
 	 	 	  the address is passed through a pointer to function ( INTInterruptAction ), and then pass this address to ISR function.
*/
u8 EXI_intSetCallBack( u8 u8_a_interruptId, void ( *pf_a_interruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1138:	81 e0       	ldi	r24, 0x01	; 1

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
    113a:	08 95       	ret
	}
	/* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret
    1140:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;
}
    1142:	08 95       	ret

00001144 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
    1166:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <void_gs_apfInterrupstAction>
    116a:	f0 91 c4 00 	lds	r31, 0x00C4	; 0x8000c4 <void_gs_apfInterrupstAction+0x1>
    116e:	30 97       	sbiw	r30, 0x00	; 0
    1170:	09 f0       	breq	.+2      	; 0x1174 <__vector_1+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT0]();
    1172:	09 95       	icall
	}	
}
    1174:	ff 91       	pop	r31
    1176:	ef 91       	pop	r30
    1178:	bf 91       	pop	r27
    117a:	af 91       	pop	r26
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	7f 91       	pop	r23
    1182:	6f 91       	pop	r22
    1184:	5f 91       	pop	r21
    1186:	4f 91       	pop	r20
    1188:	3f 91       	pop	r19
    118a:	2f 91       	pop	r18
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	4f 93       	push	r20
    11a6:	5f 93       	push	r21
    11a8:	6f 93       	push	r22
    11aa:	7f 93       	push	r23
    11ac:	8f 93       	push	r24
    11ae:	9f 93       	push	r25
    11b0:	af 93       	push	r26
    11b2:	bf 93       	push	r27
    11b4:	ef 93       	push	r30
    11b6:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
    11b8:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <void_gs_apfInterrupstAction+0x2>
    11bc:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <void_gs_apfInterrupstAction+0x3>
    11c0:	30 97       	sbiw	r30, 0x00	; 0
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <__vector_2+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT1]();
    11c4:	09 95       	icall
	}	
}
    11c6:	ff 91       	pop	r31
    11c8:	ef 91       	pop	r30
    11ca:	bf 91       	pop	r27
    11cc:	af 91       	pop	r26
    11ce:	9f 91       	pop	r25
    11d0:	8f 91       	pop	r24
    11d2:	7f 91       	pop	r23
    11d4:	6f 91       	pop	r22
    11d6:	5f 91       	pop	r21
    11d8:	4f 91       	pop	r20
    11da:	3f 91       	pop	r19
    11dc:	2f 91       	pop	r18
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
    120a:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <void_gs_apfInterrupstAction+0x4>
    120e:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <void_gs_apfInterrupstAction+0x5>
    1212:	30 97       	sbiw	r30, 0x00	; 0
    1214:	09 f0       	breq	.+2      	; 0x1218 <__vector_3+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT2]();
    1216:	09 95       	icall
	}	
}
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <GLI_enableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
void GLI_enableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
    123a:	8f b7       	in	r24, 0x3f	; 63
    123c:	80 68       	ori	r24, 0x80	; 128
    123e:	8f bf       	out	0x3f, r24	; 63
    1240:	08 95       	ret

00001242 <PWM_calculatePrescaler>:
 Input: f32 Delay and Pointer to u16 ReturnedPrescaler
 Output: u8 Error or No Error
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	6b 01       	movw	r12, r22
    1250:	7c 01       	movw	r14, r24
    1252:	ea 01       	movw	r28, r20
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
	
	/* Check 1: Delay is in the valid range, and Pointer is not equal to NULL */
	if( ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_1024_PRESCALER ) ) && ( pu16_a_returnedPrescaler != NULL ) )
    1254:	2f e6       	ldi	r18, 0x6F	; 111
    1256:	32 e1       	ldi	r19, 0x12	; 18
    1258:	43 e0       	ldi	r20, 0x03	; 3
    125a:	52 e4       	ldi	r21, 0x42	; 66
    125c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1260:	18 16       	cp	r1, r24
    1262:	0c f4       	brge	.+2      	; 0x1266 <PWM_calculatePrescaler+0x24>
    1264:	76 c0       	rjmp	.+236    	; 0x1352 <PWM_calculatePrescaler+0x110>
    1266:	20 97       	sbiw	r28, 0x00	; 0
    1268:	09 f4       	brne	.+2      	; 0x126c <PWM_calculatePrescaler+0x2a>
    126a:	75 c0       	rjmp	.+234    	; 0x1356 <PWM_calculatePrescaler+0x114>
	{
		/* Case 1: Delay <= MaxDelay of No Prescaler */
		if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_NO_PRESCALER ) )
    126c:	2f e6       	ldi	r18, 0x6F	; 111
    126e:	32 e1       	ldi	r19, 0x12	; 18
    1270:	43 e0       	ldi	r20, 0x03	; 3
    1272:	5d e3       	ldi	r21, 0x3D	; 61
    1274:	c7 01       	movw	r24, r14
    1276:	b6 01       	movw	r22, r12
    1278:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    127c:	18 16       	cp	r1, r24
    127e:	2c f0       	brlt	.+10     	; 0x128a <PWM_calculatePrescaler+0x48>
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_NO_PRESCALER;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	99 83       	std	Y+1, r25	; 0x01
    1286:	88 83       	st	Y, r24
    1288:	67 c0       	rjmp	.+206    	; 0x1358 <PWM_calculatePrescaler+0x116>
		}
		/* Case 2: Delay <= MaxDelay of 8 Prescaler */
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ) )
    128a:	2f e6       	ldi	r18, 0x6F	; 111
    128c:	32 e1       	ldi	r19, 0x12	; 18
    128e:	43 e8       	ldi	r20, 0x83	; 131
    1290:	5e e3       	ldi	r21, 0x3E	; 62
    1292:	c7 01       	movw	r24, r14
    1294:	b6 01       	movw	r22, r12
    1296:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    129a:	18 16       	cp	r1, r24
    129c:	34 f0       	brlt	.+12     	; 0x12aa <PWM_calculatePrescaler+0x68>
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_8_PRESCALER;
    129e:	88 e0       	ldi	r24, 0x08	; 8
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	99 83       	std	Y+1, r25	; 0x01
    12a4:	88 83       	st	Y, r24
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	57 c0       	rjmp	.+174    	; 0x1358 <PWM_calculatePrescaler+0x116>
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ) )
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_8_PRESCALER;
		}
		/* Case 3: Delay <= MaxDelay of 32 Prescaler */
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ) )
    12aa:	2f e6       	ldi	r18, 0x6F	; 111
    12ac:	32 e1       	ldi	r19, 0x12	; 18
    12ae:	43 e8       	ldi	r20, 0x83	; 131
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	c7 01       	movw	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    12ba:	18 16       	cp	r1, r24
    12bc:	34 f0       	brlt	.+12     	; 0x12ca <PWM_calculatePrescaler+0x88>
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_32_PRESCALER;
    12be:	80 e2       	ldi	r24, 0x20	; 32
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	99 83       	std	Y+1, r25	; 0x01
    12c4:	88 83       	st	Y, r24
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	47 c0       	rjmp	.+142    	; 0x1358 <PWM_calculatePrescaler+0x116>
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ) )
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_32_PRESCALER;
		}
		/* Case 4: Delay <= MaxDelay of 64 Prescaler */
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ) )
    12ca:	2f e6       	ldi	r18, 0x6F	; 111
    12cc:	32 e1       	ldi	r19, 0x12	; 18
    12ce:	43 e0       	ldi	r20, 0x03	; 3
    12d0:	50 e4       	ldi	r21, 0x40	; 64
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	34 f0       	brlt	.+12     	; 0x12ea <PWM_calculatePrescaler+0xa8>
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_64_PRESCALER;
    12de:	80 e4       	ldi	r24, 0x40	; 64
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	99 83       	std	Y+1, r25	; 0x01
    12e4:	88 83       	st	Y, r24
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	37 c0       	rjmp	.+110    	; 0x1358 <PWM_calculatePrescaler+0x116>
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ) )
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_64_PRESCALER;
		}
		/* Case 5: Delay <= MaxDelay of 128 Prescaler */
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ) )
    12ea:	2f e6       	ldi	r18, 0x6F	; 111
    12ec:	32 e1       	ldi	r19, 0x12	; 18
    12ee:	43 e8       	ldi	r20, 0x83	; 131
    12f0:	50 e4       	ldi	r21, 0x40	; 64
    12f2:	c7 01       	movw	r24, r14
    12f4:	b6 01       	movw	r22, r12
    12f6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	34 f0       	brlt	.+12     	; 0x130a <PWM_calculatePrescaler+0xc8>
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_128_PRESCALER;
    12fe:	80 e8       	ldi	r24, 0x80	; 128
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	99 83       	std	Y+1, r25	; 0x01
    1304:	88 83       	st	Y, r24
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	27 c0       	rjmp	.+78     	; 0x1358 <PWM_calculatePrescaler+0x116>
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ) )
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_128_PRESCALER;
		}
		/* Case 6: Delay <= MaxDelay of 256 Prescaler */
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ) )
    130a:	2f e6       	ldi	r18, 0x6F	; 111
    130c:	32 e1       	ldi	r19, 0x12	; 18
    130e:	43 e0       	ldi	r20, 0x03	; 3
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	c7 01       	movw	r24, r14
    1314:	b6 01       	movw	r22, r12
    1316:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    131a:	18 16       	cp	r1, r24
    131c:	34 f0       	brlt	.+12     	; 0x132a <PWM_calculatePrescaler+0xe8>
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_256_PRESCALER;
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	99 83       	std	Y+1, r25	; 0x01
    1324:	88 83       	st	Y, r24
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	17 c0       	rjmp	.+46     	; 0x1358 <PWM_calculatePrescaler+0x116>
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ) )
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_256_PRESCALER;
		}
		/* Case 7: Delay <= MaxDelay of 1024 Prescaler */
		else if ( f32_a_delay <= MAX_DELAY_MS( TMR_U16_TMR_2_1024_PRESCALER ) )
    132a:	2f e6       	ldi	r18, 0x6F	; 111
    132c:	32 e1       	ldi	r19, 0x12	; 18
    132e:	43 e0       	ldi	r20, 0x03	; 3
    1330:	52 e4       	ldi	r21, 0x42	; 66
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    133a:	18 16       	cp	r1, r24
    133c:	34 f0       	brlt	.+12     	; 0x134a <PWM_calculatePrescaler+0x108>
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_1024_PRESCALER;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	99 83       	std	Y+1, r25	; 0x01
    1344:	88 83       	st	Y, r24
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <PWM_calculatePrescaler+0x116>
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_1024_PRESCALER;
		}
		/* Case 8: No Clock Source */
		else
		{
			*pu16_a_returnedPrescaler = TMR_U16_TMR_2_NO_CLOCK_SOURCE;
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	18 82       	st	Y, r1
 Description: Function to calculate Prescaler value.
*/
static u8 PWM_calculatePrescaler   ( f32 f32_a_delay, u16 *pu16_a_returnedPrescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <PWM_calculatePrescaler+0x116>
	}
	/* Check 2: Delay is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong Delay or Pointer is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <PWM_calculatePrescaler+0x116>
    1356:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	08 95       	ret

00001366 <PWM_calculateInitialValue>:
 Input: u16 Prescaler, f32 Delay, and Pointer to u16 ReturnedPrescaler
 Output: u8 Error or No Error
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
		
	/* Check 1: Prescaler is in the valid range, and Pointer is not equal to NULL */
	if( ( u16_a_prescaler <= TMR_U16_TMR_2_1024_PRESCALER ) && ( pu16_a_returnedInitialValue != NULL ) )
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	e4 e0       	ldi	r30, 0x04	; 4
    136e:	9e 07       	cpc	r25, r30
    1370:	08 f0       	brcs	.+2      	; 0x1374 <PWM_calculateInitialValue+0xe>
    1372:	9c c0       	rjmp	.+312    	; 0x14ac <PWM_calculateInitialValue+0x146>
    1374:	21 15       	cp	r18, r1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <PWM_calculateInitialValue+0x16>
    137a:	9a c0       	rjmp	.+308    	; 0x14b0 <PWM_calculateInitialValue+0x14a>
    137c:	e9 01       	movw	r28, r18
    137e:	9a 01       	movw	r18, r20
    1380:	ab 01       	movw	r20, r22
	{
		/* Check 1.1: Required Prescaler */
		switch( u16_a_prescaler )
    1382:	80 34       	cpi	r24, 0x40	; 64
    1384:	91 05       	cpc	r25, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <PWM_calculateInitialValue+0x24>
    1388:	4d c0       	rjmp	.+154    	; 0x1424 <PWM_calculateInitialValue+0xbe>
    138a:	50 f4       	brcc	.+20     	; 0x13a0 <PWM_calculateInitialValue+0x3a>
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	91 05       	cpc	r25, r1
    1390:	39 f1       	breq	.+78     	; 0x13e0 <PWM_calculateInitialValue+0x7a>
    1392:	80 32       	cpi	r24, 0x20	; 32
    1394:	91 05       	cpc	r25, r1
    1396:	a9 f1       	breq	.+106    	; 0x1402 <PWM_calculateInitialValue+0x9c>
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	09 f0       	breq	.+2      	; 0x139e <PWM_calculateInitialValue+0x38>
    139c:	8b c0       	rjmp	.+278    	; 0x14b4 <PWM_calculateInitialValue+0x14e>
    139e:	0f c0       	rjmp	.+30     	; 0x13be <PWM_calculateInitialValue+0x58>
    13a0:	81 15       	cp	r24, r1
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	96 07       	cpc	r25, r22
    13a6:	09 f4       	brne	.+2      	; 0x13aa <PWM_calculateInitialValue+0x44>
    13a8:	5f c0       	rjmp	.+190    	; 0x1468 <PWM_calculateInitialValue+0x102>
    13aa:	81 15       	cp	r24, r1
    13ac:	e4 e0       	ldi	r30, 0x04	; 4
    13ae:	9e 07       	cpc	r25, r30
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <PWM_calculateInitialValue+0x4e>
    13b2:	6b c0       	rjmp	.+214    	; 0x148a <PWM_calculateInitialValue+0x124>
    13b4:	80 38       	cpi	r24, 0x80	; 128
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f0       	breq	.+2      	; 0x13bc <PWM_calculateInitialValue+0x56>
    13ba:	7c c0       	rjmp	.+248    	; 0x14b4 <PWM_calculateInitialValue+0x14e>
    13bc:	44 c0       	rjmp	.+136    	; 0x1446 <PWM_calculateInitialValue+0xe0>
		{
			/* Case 1: No Prescaler */
			case TMR_U16_TMR_2_NO_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_NO_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_NO_PRESCALER ) );
    13be:	6f e6       	ldi	r22, 0x6F	; 111
    13c0:	72 e1       	ldi	r23, 0x12	; 18
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	9d e3       	ldi	r25, 0x3D	; 61
    13c6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    13ca:	2f e6       	ldi	r18, 0x6F	; 111
    13cc:	32 e1       	ldi	r19, 0x12	; 18
    13ce:	43 e0       	ldi	r20, 0x03	; 3
    13d0:	59 e3       	ldi	r21, 0x39	; 57
    13d2:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    13d6:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    13da:	68 83       	st	Y, r22
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
		switch( u16_a_prescaler )
		{
			/* Case 1: No Prescaler */
			case TMR_U16_TMR_2_NO_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_NO_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_NO_PRESCALER ) );
			break;
    13de:	6b c0       	rjmp	.+214    	; 0x14b6 <PWM_calculateInitialValue+0x150>
			/* Case 2: Prescaler is 8 */
			case TMR_U16_TMR_2_8_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ) );
    13e0:	6f e6       	ldi	r22, 0x6F	; 111
    13e2:	72 e1       	ldi	r23, 0x12	; 18
    13e4:	83 e8       	ldi	r24, 0x83	; 131
    13e6:	9e e3       	ldi	r25, 0x3E	; 62
    13e8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    13ec:	2f e6       	ldi	r18, 0x6F	; 111
    13ee:	32 e1       	ldi	r19, 0x12	; 18
    13f0:	43 e8       	ldi	r20, 0x83	; 131
    13f2:	5a e3       	ldi	r21, 0x3A	; 58
    13f4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    13f8:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    13fc:	68 83       	st	Y, r22
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_NO_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_NO_PRESCALER ) );
			break;
			/* Case 2: Prescaler is 8 */
			case TMR_U16_TMR_2_8_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ) );
			break;
    1400:	5a c0       	rjmp	.+180    	; 0x14b6 <PWM_calculateInitialValue+0x150>
			/* Case 3: Prescaler is 32 */
			case TMR_U16_TMR_2_32_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ) );
    1402:	6f e6       	ldi	r22, 0x6F	; 111
    1404:	72 e1       	ldi	r23, 0x12	; 18
    1406:	83 e8       	ldi	r24, 0x83	; 131
    1408:	9f e3       	ldi	r25, 0x3F	; 63
    140a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    140e:	2f e6       	ldi	r18, 0x6F	; 111
    1410:	32 e1       	ldi	r19, 0x12	; 18
    1412:	43 e8       	ldi	r20, 0x83	; 131
    1414:	5b e3       	ldi	r21, 0x3B	; 59
    1416:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    141a:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    141e:	68 83       	st	Y, r22
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1420:	81 e0       	ldi	r24, 0x01	; 1
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_8_PRESCALER ) );
			break;
			/* Case 3: Prescaler is 32 */
			case TMR_U16_TMR_2_32_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ) );
			break;
    1422:	49 c0       	rjmp	.+146    	; 0x14b6 <PWM_calculateInitialValue+0x150>
			/* Case 4: Prescaler is 64 */
			case TMR_U16_TMR_2_64_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ) );
    1424:	6f e6       	ldi	r22, 0x6F	; 111
    1426:	72 e1       	ldi	r23, 0x12	; 18
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	90 e4       	ldi	r25, 0x40	; 64
    142c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1430:	2f e6       	ldi	r18, 0x6F	; 111
    1432:	32 e1       	ldi	r19, 0x12	; 18
    1434:	43 e0       	ldi	r20, 0x03	; 3
    1436:	5c e3       	ldi	r21, 0x3C	; 60
    1438:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    143c:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1440:	68 83       	st	Y, r22
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1442:	81 e0       	ldi	r24, 0x01	; 1
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_32_PRESCALER ) );
			break;
			/* Case 4: Prescaler is 64 */
			case TMR_U16_TMR_2_64_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ) );
			break;
    1444:	38 c0       	rjmp	.+112    	; 0x14b6 <PWM_calculateInitialValue+0x150>
			/* Case 5: Prescaler is 128 */
			case TMR_U16_TMR_2_128_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ) );
    1446:	6f e6       	ldi	r22, 0x6F	; 111
    1448:	72 e1       	ldi	r23, 0x12	; 18
    144a:	83 e8       	ldi	r24, 0x83	; 131
    144c:	90 e4       	ldi	r25, 0x40	; 64
    144e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1452:	2f e6       	ldi	r18, 0x6F	; 111
    1454:	32 e1       	ldi	r19, 0x12	; 18
    1456:	43 e8       	ldi	r20, 0x83	; 131
    1458:	5c e3       	ldi	r21, 0x3C	; 60
    145a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    145e:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1462:	68 83       	st	Y, r22
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_64_PRESCALER ) );
			break;
			/* Case 5: Prescaler is 128 */
			case TMR_U16_TMR_2_128_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ) );
			break;
    1466:	27 c0       	rjmp	.+78     	; 0x14b6 <PWM_calculateInitialValue+0x150>
			/* Case 6: Prescaler is 256 */
			case TMR_U16_TMR_2_256_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ) );
    1468:	6f e6       	ldi	r22, 0x6F	; 111
    146a:	72 e1       	ldi	r23, 0x12	; 18
    146c:	83 e0       	ldi	r24, 0x03	; 3
    146e:	91 e4       	ldi	r25, 0x41	; 65
    1470:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1474:	2f e6       	ldi	r18, 0x6F	; 111
    1476:	32 e1       	ldi	r19, 0x12	; 18
    1478:	43 e0       	ldi	r20, 0x03	; 3
    147a:	5d e3       	ldi	r21, 0x3D	; 61
    147c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1480:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1484:	68 83       	st	Y, r22
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1486:	81 e0       	ldi	r24, 0x01	; 1
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_128_PRESCALER ) );
			break;
			/* Case 6: Prescaler is 256 */
			case TMR_U16_TMR_2_256_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ) );
			break;
    1488:	16 c0       	rjmp	.+44     	; 0x14b6 <PWM_calculateInitialValue+0x150>
			/* Case 7: Prescaler is 1024 */
			case TMR_U16_TMR_2_1024_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE ( MAX_DELAY_MS( TMR_U16_TMR_2_1024_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_1024_PRESCALER ) );
    148a:	6f e6       	ldi	r22, 0x6F	; 111
    148c:	72 e1       	ldi	r23, 0x12	; 18
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	92 e4       	ldi	r25, 0x42	; 66
    1492:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1496:	2f e6       	ldi	r18, 0x6F	; 111
    1498:	32 e1       	ldi	r19, 0x12	; 18
    149a:	43 e0       	ldi	r20, 0x03	; 3
    149c:	5e e3       	ldi	r21, 0x3E	; 62
    149e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    14a2:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    14a6:	68 83       	st	Y, r22
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
				*pu16_a_returnedInitialValue = INITITAL_VALUE( MAX_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_256_PRESCALER ) );
			break;
			/* Case 7: Prescaler is 1024 */
			case TMR_U16_TMR_2_1024_PRESCALER:
				*pu16_a_returnedInitialValue = INITITAL_VALUE ( MAX_DELAY_MS( TMR_U16_TMR_2_1024_PRESCALER ), f32_a_delay, MIN_DELAY_MS( TMR_U16_TMR_2_1024_PRESCALER ) );
			break;
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <PWM_calculateInitialValue+0x150>
	}
	/* Check 2: Prescaler is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong Prescaler or Pointer is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <PWM_calculateInitialValue+0x150>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <PWM_calculateInitialValue+0x150>
 Description: Function to calculate Initial value.
*/
static u8 PWM_calculateInitialValue( u16 u16_a_prescaler, f32 f32_a_delay, u8 *pu16_a_returnedInitialValue )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong Prescaler or Pointer is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
	}
		
	return u8_l_errorState;
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <PWM_setPrescaler>:
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
		
	/* Check 1: Prescaler is in the valid range */
	if ( u16_a_prescaler <= TMR_U16_TMR_2_1024_PRESCALER )
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	24 e0       	ldi	r18, 0x04	; 4
    14c0:	92 07       	cpc	r25, r18
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <PWM_setPrescaler+0xa>
    14c4:	6a c0       	rjmp	.+212    	; 0x159a <PWM_setPrescaler+0xde>
	{
		/* Check 1.1: Required Prescaler */
		switch ( u16_a_prescaler )
    14c6:	80 34       	cpi	r24, 0x40	; 64
    14c8:	91 05       	cpc	r25, r1
    14ca:	d9 f1       	breq	.+118    	; 0x1542 <PWM_setPrescaler+0x86>
    14cc:	50 f4       	brcc	.+20     	; 0x14e2 <PWM_setPrescaler+0x26>
    14ce:	88 30       	cpi	r24, 0x08	; 8
    14d0:	91 05       	cpc	r25, r1
    14d2:	09 f1       	breq	.+66     	; 0x1516 <PWM_setPrescaler+0x5a>
    14d4:	80 32       	cpi	r24, 0x20	; 32
    14d6:	91 05       	cpc	r25, r1
    14d8:	49 f1       	breq	.+82     	; 0x152c <PWM_setPrescaler+0x70>
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <PWM_setPrescaler+0x24>
    14de:	5f c0       	rjmp	.+190    	; 0x159e <PWM_setPrescaler+0xe2>
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <PWM_setPrescaler+0x44>
    14e2:	81 15       	cp	r24, r1
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	92 07       	cpc	r25, r18
    14e8:	09 f4       	brne	.+2      	; 0x14ec <PWM_setPrescaler+0x30>
    14ea:	41 c0       	rjmp	.+130    	; 0x156e <PWM_setPrescaler+0xb2>
    14ec:	81 15       	cp	r24, r1
    14ee:	24 e0       	ldi	r18, 0x04	; 4
    14f0:	92 07       	cpc	r25, r18
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <PWM_setPrescaler+0x3a>
    14f4:	47 c0       	rjmp	.+142    	; 0x1584 <PWM_setPrescaler+0xc8>
    14f6:	80 38       	cpi	r24, 0x80	; 128
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f0       	breq	.+2      	; 0x14fe <PWM_setPrescaler+0x42>
    14fc:	50 c0       	rjmp	.+160    	; 0x159e <PWM_setPrescaler+0xe2>
    14fe:	2c c0       	rjmp	.+88     	; 0x1558 <PWM_setPrescaler+0x9c>
		{
			/* Case 1: Clock Source =  No Prescaler */
			case TMR_U16_TMR_2_NO_PRESCALER	  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
    1500:	85 b5       	in	r24, 0x25	; 37
    1502:	81 60       	ori	r24, 0x01	; 1
    1504:	85 bd       	out	0x25, r24	; 37
    1506:	85 b5       	in	r24, 0x25	; 37
    1508:	8d 7f       	andi	r24, 0xFD	; 253
    150a:	85 bd       	out	0x25, r24	; 37
											    CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    150c:	85 b5       	in	r24, 0x25	; 37
    150e:	8b 7f       	andi	r24, 0xFB	; 251
    1510:	85 bd       	out	0x25, r24	; 37
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1512:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required Prescaler */
		switch ( u16_a_prescaler )
		{
			/* Case 1: Clock Source =  No Prescaler */
			case TMR_U16_TMR_2_NO_PRESCALER	  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
											    CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1514:	08 95       	ret
			/* Case 2: Clock Source = 8 Prescaler */
			case TMR_U16_TMR_2_8_PRESCALER	  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
    1516:	85 b5       	in	r24, 0x25	; 37
    1518:	8e 7f       	andi	r24, 0xFE	; 254
    151a:	85 bd       	out	0x25, r24	; 37
    151c:	85 b5       	in	r24, 0x25	; 37
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	85 bd       	out	0x25, r24	; 37
											    CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1522:	85 b5       	in	r24, 0x25	; 37
    1524:	8b 7f       	andi	r24, 0xFB	; 251
    1526:	85 bd       	out	0x25, r24	; 37
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1528:	81 e0       	ldi	r24, 0x01	; 1
			/* Case 1: Clock Source =  No Prescaler */
			case TMR_U16_TMR_2_NO_PRESCALER	  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
											    CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
			/* Case 2: Clock Source = 8 Prescaler */
			case TMR_U16_TMR_2_8_PRESCALER	  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
											    CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    152a:	08 95       	ret
			/* Case 3: Clock = 32 Prescaler */
			case TMR_U16_TMR_2_32_PRESCALER	  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
    152c:	85 b5       	in	r24, 0x25	; 37
    152e:	81 60       	ori	r24, 0x01	; 1
    1530:	85 bd       	out	0x25, r24	; 37
    1532:	85 b5       	in	r24, 0x25	; 37
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	85 bd       	out	0x25, r24	; 37
												CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1538:	85 b5       	in	r24, 0x25	; 37
    153a:	8b 7f       	andi	r24, 0xFB	; 251
    153c:	85 bd       	out	0x25, r24	; 37
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
			/* Case 2: Clock Source = 8 Prescaler */
			case TMR_U16_TMR_2_8_PRESCALER	  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
											    CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
			/* Case 3: Clock = 32 Prescaler */
			case TMR_U16_TMR_2_32_PRESCALER	  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1540:	08 95       	ret
			/* Case 4: Clock Source = 64 Prescaler */
			case TMR_U16_TMR_2_64_PRESCALER	  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
    1542:	85 b5       	in	r24, 0x25	; 37
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	85 bd       	out	0x25, r24	; 37
    1548:	85 b5       	in	r24, 0x25	; 37
    154a:	8d 7f       	andi	r24, 0xFD	; 253
    154c:	85 bd       	out	0x25, r24	; 37
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    154e:	85 b5       	in	r24, 0x25	; 37
    1550:	84 60       	ori	r24, 0x04	; 4
    1552:	85 bd       	out	0x25, r24	; 37
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1554:	81 e0       	ldi	r24, 0x01	; 1
			/* Case 3: Clock = 32 Prescaler */
			case TMR_U16_TMR_2_32_PRESCALER	  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
			/* Case 4: Clock Source = 64 Prescaler */
			case TMR_U16_TMR_2_64_PRESCALER	  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1556:	08 95       	ret
			/* Case 5: Clock Source = 128 Prescaler */
			case TMR_U16_TMR_2_128_PRESCALER  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
    1558:	85 b5       	in	r24, 0x25	; 37
    155a:	81 60       	ori	r24, 0x01	; 1
    155c:	85 bd       	out	0x25, r24	; 37
    155e:	85 b5       	in	r24, 0x25	; 37
    1560:	8d 7f       	andi	r24, 0xFD	; 253
    1562:	85 bd       	out	0x25, r24	; 37
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1564:	85 b5       	in	r24, 0x25	; 37
    1566:	84 60       	ori	r24, 0x04	; 4
    1568:	85 bd       	out	0x25, r24	; 37
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    156a:	81 e0       	ldi	r24, 0x01	; 1
			/* Case 4: Clock Source = 64 Prescaler */
			case TMR_U16_TMR_2_64_PRESCALER	  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
			/* Case 5: Clock Source = 128 Prescaler */
			case TMR_U16_TMR_2_128_PRESCALER  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    156c:	08 95       	ret
			/* Case 6: Clock Source = 256 Prescaler */
			case TMR_U16_TMR_2_256_PRESCALER  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
    156e:	85 b5       	in	r24, 0x25	; 37
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	85 bd       	out	0x25, r24	; 37
    1574:	85 b5       	in	r24, 0x25	; 37
    1576:	82 60       	ori	r24, 0x02	; 2
    1578:	85 bd       	out	0x25, r24	; 37
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    157a:	85 b5       	in	r24, 0x25	; 37
    157c:	84 60       	ori	r24, 0x04	; 4
    157e:	85 bd       	out	0x25, r24	; 37
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1580:	81 e0       	ldi	r24, 0x01	; 1
			/* Case 5: Clock Source = 128 Prescaler */
			case TMR_U16_TMR_2_128_PRESCALER  : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
			/* Case 6: Clock Source = 256 Prescaler */
			case TMR_U16_TMR_2_256_PRESCALER  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1582:	08 95       	ret
			/* Case 7: Clock Source = 1024 Prescaler */
			case TMR_U16_TMR_2_1024_PRESCALER : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
    1584:	85 b5       	in	r24, 0x25	; 37
    1586:	81 60       	ori	r24, 0x01	; 1
    1588:	85 bd       	out	0x25, r24	; 37
    158a:	85 b5       	in	r24, 0x25	; 37
    158c:	82 60       	ori	r24, 0x02	; 2
    158e:	85 bd       	out	0x25, r24	; 37
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1590:	85 b5       	in	r24, 0x25	; 37
    1592:	84 60       	ori	r24, 0x04	; 4
    1594:	85 bd       	out	0x25, r24	; 37
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1596:	81 e0       	ldi	r24, 0x01	; 1
			/* Case 6: Clock Source = 256 Prescaler */
			case TMR_U16_TMR_2_256_PRESCALER  : CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
			/* Case 7: Clock Source = 1024 Prescaler */
			case TMR_U16_TMR_2_1024_PRESCALER : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
												SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
    1598:	08 95       	ret
	}
	/* Check 2: Prescaler is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong Prescaler! */
		u8_l_errorState = STD_TYPES_NOK;
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	08 95       	ret
 Description: Function to Set Prescaler value.
*/
static u8 PWM_setPrescaler         ( u16 u16_a_prescaler )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong Prescaler! */
		u8_l_errorState = STD_TYPES_NOK;
	}
		
	return u8_l_errorState;
}
    15a0:	08 95       	ret

000015a2 <PWM_initialization>:
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: PortId and PinlId are in the valid range */
	if ( ( u8_a_portId <= DIO_U8_PORTD ) && ( u8_a_pinId <= DIO_U8_PIN7 ) )
    15a2:	84 30       	cpi	r24, 0x04	; 4
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <PWM_initialization+0x6>
    15a6:	88 c0       	rjmp	.+272    	; 0x16b8 <PWM_initialization+0x116>
    15a8:	68 30       	cpi	r22, 0x08	; 8
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <PWM_initialization+0xc>
    15ac:	87 c0       	rjmp	.+270    	; 0x16bc <PWM_initialization+0x11a>
	{
		/* Step 1: Store Port and Pin ( through which PWM will be generated ) in Global Variables */
		u8_gs_portId = u8_a_portId;
    15ae:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <u8_gs_portId>
		u8_gs_pinId = u8_a_pinId;
    15b2:	60 93 d4 00 	sts	0x00D4, r22	; 0x8000d4 <u8_gs_pinId>
		
		/* Step 2: Set the PWM Pin Direction to Out */
		switch ( u8_a_portId )
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	91 f0       	breq	.+36     	; 0x15de <PWM_initialization+0x3c>
    15ba:	28 f0       	brcs	.+10     	; 0x15c6 <PWM_initialization+0x24>
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	d9 f0       	breq	.+54     	; 0x15f6 <PWM_initialization+0x54>
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	29 f1       	breq	.+74     	; 0x160e <PWM_initialization+0x6c>
    15c4:	2f c0       	rjmp	.+94     	; 0x1624 <PWM_initialization+0x82>
		{
			case DIO_U8_PORTA: SET_BIT( DIO_U8_DDRA_REG, u8_a_pinId ); break;
    15c6:	9a b3       	in	r25, 0x1a	; 26
    15c8:	e1 e0       	ldi	r30, 0x01	; 1
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	06 2e       	mov	r0, r22
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <PWM_initialization+0x32>
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <PWM_initialization+0x2e>
    15d8:	e9 2b       	or	r30, r25
    15da:	ea bb       	out	0x1a, r30	; 26
    15dc:	23 c0       	rjmp	.+70     	; 0x1624 <PWM_initialization+0x82>
			case DIO_U8_PORTB: SET_BIT( DIO_U8_DDRB_REG, u8_a_pinId ); break;
    15de:	97 b3       	in	r25, 0x17	; 23
    15e0:	e1 e0       	ldi	r30, 0x01	; 1
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	06 2e       	mov	r0, r22
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <PWM_initialization+0x4a>
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <PWM_initialization+0x46>
    15f0:	e9 2b       	or	r30, r25
    15f2:	e7 bb       	out	0x17, r30	; 23
    15f4:	17 c0       	rjmp	.+46     	; 0x1624 <PWM_initialization+0x82>
			case DIO_U8_PORTC: SET_BIT( DIO_U8_DDRC_REG, u8_a_pinId ); break;
    15f6:	94 b3       	in	r25, 0x14	; 20
    15f8:	e1 e0       	ldi	r30, 0x01	; 1
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	06 2e       	mov	r0, r22
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <PWM_initialization+0x62>
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <PWM_initialization+0x5e>
    1608:	e9 2b       	or	r30, r25
    160a:	e4 bb       	out	0x14, r30	; 20
    160c:	0b c0       	rjmp	.+22     	; 0x1624 <PWM_initialization+0x82>
			case DIO_U8_PORTD: SET_BIT( DIO_U8_DDRD_REG, u8_a_pinId ); break;
    160e:	91 b3       	in	r25, 0x11	; 17
    1610:	e1 e0       	ldi	r30, 0x01	; 1
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	06 2e       	mov	r0, r22
    1616:	02 c0       	rjmp	.+4      	; 0x161c <PWM_initialization+0x7a>
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <PWM_initialization+0x76>
    1620:	e9 2b       	or	r30, r25
    1622:	e1 bb       	out	0x11, r30	; 17
		}
				
		/* Step 3: Set the PWM Pin Value to Low */
		switch ( u8_a_portId )
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 f0       	breq	.+36     	; 0x164c <PWM_initialization+0xaa>
    1628:	28 f0       	brcs	.+10     	; 0x1634 <PWM_initialization+0x92>
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	d9 f0       	breq	.+54     	; 0x1664 <PWM_initialization+0xc2>
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	29 f1       	breq	.+74     	; 0x167c <PWM_initialization+0xda>
    1632:	2f c0       	rjmp	.+94     	; 0x1692 <PWM_initialization+0xf0>
		{
			case DIO_U8_PORTA: CLR_BIT( DIO_U8_PORTA_REG, u8_a_pinId ); break;
    1634:	7b b3       	in	r23, 0x1b	; 27
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <PWM_initialization+0x9e>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	6a 95       	dec	r22
    1642:	e2 f7       	brpl	.-8      	; 0x163c <PWM_initialization+0x9a>
    1644:	80 95       	com	r24
    1646:	87 23       	and	r24, r23
    1648:	8b bb       	out	0x1b, r24	; 27
    164a:	23 c0       	rjmp	.+70     	; 0x1692 <PWM_initialization+0xf0>
			case DIO_U8_PORTB: CLR_BIT( DIO_U8_PORTB_REG, u8_a_pinId ); break;
    164c:	78 b3       	in	r23, 0x18	; 24
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <PWM_initialization+0xb6>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	6a 95       	dec	r22
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <PWM_initialization+0xb2>
    165c:	80 95       	com	r24
    165e:	87 23       	and	r24, r23
    1660:	88 bb       	out	0x18, r24	; 24
    1662:	17 c0       	rjmp	.+46     	; 0x1692 <PWM_initialization+0xf0>
			case DIO_U8_PORTC: CLR_BIT( DIO_U8_PORTC_REG, u8_a_pinId ); break;
    1664:	75 b3       	in	r23, 0x15	; 21
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <PWM_initialization+0xce>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	6a 95       	dec	r22
    1672:	e2 f7       	brpl	.-8      	; 0x166c <PWM_initialization+0xca>
    1674:	80 95       	com	r24
    1676:	87 23       	and	r24, r23
    1678:	85 bb       	out	0x15, r24	; 21
    167a:	0b c0       	rjmp	.+22     	; 0x1692 <PWM_initialization+0xf0>
			case DIO_U8_PORTD: CLR_BIT( DIO_U8_PORTD_REG, u8_a_pinId ); break;
    167c:	72 b3       	in	r23, 0x12	; 18
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <PWM_initialization+0xe6>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	6a 95       	dec	r22
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <PWM_initialization+0xe2>
    168c:	80 95       	com	r24
    168e:	87 23       	and	r24, r23
    1690:	82 bb       	out	0x12, r24	; 18
		}		
		
		/* Step 4: Calculate Period ( Note: PWM Periodic Time is in milli seconds ) */
		f32_gs_periodTime = 1.0F / f32_a_pwmFrequency;
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	80 e8       	ldi	r24, 0x80	; 128
    1698:	9f e3       	ldi	r25, 0x3F	; 63
    169a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    169e:	60 93 ca 00 	sts	0x00CA, r22	; 0x8000ca <f32_gs_periodTime>
    16a2:	70 93 cb 00 	sts	0x00CB, r23	; 0x8000cb <f32_gs_periodTime+0x1>
    16a6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <f32_gs_periodTime+0x2>
    16aa:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <f32_gs_periodTime+0x3>
		
		/* Step 5: Enable TMR2 Overflow Interrupt */
		SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE2_BIT );	
    16ae:	89 b7       	in	r24, 0x39	; 57
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	89 bf       	out	0x39, r24	; 57
 Description: Function to Initialize PWM peripheral.
*/
u8 PWM_initialization( u8 u8_a_portId, u8 u8_a_pinId, f32 f32_a_pwmFrequency )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
		
		/* Step 4: Calculate Period ( Note: PWM Periodic Time is in milli seconds ) */
		f32_gs_periodTime = 1.0F / f32_a_pwmFrequency;
		
		/* Step 5: Enable TMR2 Overflow Interrupt */
		SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE2_BIT );	
    16b6:	08 95       	ret
	}
	/* Check 2:PortId and PinlId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId and PinlId! */
		u8_l_errorState = STD_TYPES_NOK;
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	08 95       	ret
    16bc:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	return u8_l_errorState;
}
    16be:	08 95       	ret

000016c0 <PWM_generatePWM>:
 Input: u8 DutyCycle
 Output: u8 Error or No Error
 Description: Function to Generate PWM.
*/
u8 PWM_generatePWM   ( u8 u8_a_dutyCycle )
{	 
    16c0:	8f 92       	push	r8
    16c2:	9f 92       	push	r9
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
	
	/* Check 1: DutyCycle is in the valid range */
	if ( u8_a_dutyCycle <= PWM_U8_MAX_DUTY_CYCLE )
    16d0:	85 36       	cpi	r24, 0x65	; 101
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <PWM_generatePWM+0x16>
    16d4:	4b c0       	rjmp	.+150    	; 0x176c <PWM_generatePWM+0xac>
	{
		f32 f32_l_timeOn, f32_l_timeOff;
		
		/* Step 1: Calculate Time Delay for both On & Off Time */
		f32_l_timeOff = ( ( f32 ) f32_gs_periodTime * u8_a_dutyCycle ) / 100.0F;
    16d6:	80 90 ca 00 	lds	r8, 0x00CA	; 0x8000ca <f32_gs_periodTime>
    16da:	90 90 cb 00 	lds	r9, 0x00CB	; 0x8000cb <f32_gs_periodTime+0x1>
    16de:	a0 90 cc 00 	lds	r10, 0x00CC	; 0x8000cc <f32_gs_periodTime+0x2>
    16e2:	b0 90 cd 00 	lds	r11, 0x00CD	; 0x8000cd <f32_gs_periodTime+0x3>
    16e6:	68 2f       	mov	r22, r24
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    16f2:	a5 01       	movw	r20, r10
    16f4:	94 01       	movw	r18, r8
    16f6:	0e 94 4e 11 	call	0x229c	; 0x229c <__mulsf3>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	48 ec       	ldi	r20, 0xC8	; 200
    1700:	52 e4       	ldi	r21, 0x42	; 66
    1702:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1706:	6b 01       	movw	r12, r22
    1708:	7c 01       	movw	r14, r24
		f32_l_timeOn = f32_gs_periodTime - f32_l_timeOff;
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	c5 01       	movw	r24, r10
    1710:	b4 01       	movw	r22, r8
    1712:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1716:	4b 01       	movw	r8, r22
    1718:	5c 01       	movw	r10, r24
		
		/* Step 2: Calculate Prescaler Value for both On & Off Time */
		PWM_calculatePrescaler( f32_l_timeOn, &u16_gs_TonPrescale );
    171a:	40 ed       	ldi	r20, 0xD0	; 208
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	0e 94 21 09 	call	0x1242	; 0x1242 <PWM_calculatePrescaler>
		PWM_calculatePrescaler( f32_l_timeOff, &u16_gs_ToffPrescale );
    1722:	4e ec       	ldi	r20, 0xCE	; 206
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	c7 01       	movw	r24, r14
    1728:	b6 01       	movw	r22, r12
    172a:	0e 94 21 09 	call	0x1242	; 0x1242 <PWM_calculatePrescaler>
		
		/* Step 3: Calculate Initial Value for both On & Off Time */
		PWM_calculateInitialValue( u16_gs_TonPrescale, f32_l_timeOn, &u8_gs_TonInitialValue );
    172e:	23 ed       	ldi	r18, 0xD3	; 211
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	b5 01       	movw	r22, r10
    1734:	a4 01       	movw	r20, r8
    1736:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16_gs_TonPrescale>
    173a:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16_gs_TonPrescale+0x1>
    173e:	0e 94 b3 09 	call	0x1366	; 0x1366 <PWM_calculateInitialValue>
		PWM_calculateInitialValue( u16_gs_ToffPrescale, f32_l_timeOff, &u8_gs_ToffInitialValue );
    1742:	22 ed       	ldi	r18, 0xD2	; 210
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	b7 01       	movw	r22, r14
    1748:	a6 01       	movw	r20, r12
    174a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16_gs_ToffPrescale>
    174e:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16_gs_ToffPrescale+0x1>
    1752:	0e 94 b3 09 	call	0x1366	; 0x1366 <PWM_calculateInitialValue>
		
		/* Step 4: Set TMR2 Initial Value */
		TMR_U8_TCNT2_REG = u8_gs_TonInitialValue;
    1756:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <u8_gs_TonInitialValue>
    175a:	84 bd       	out	0x24, r24	; 36
		
		/* Step 4: Set TMR2 Prescaler Value */
		PWM_setPrescaler( u16_gs_TonPrescale );
    175c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16_gs_TonPrescale>
    1760:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16_gs_TonPrescale+0x1>
    1764:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <PWM_setPrescaler>
 Description: Function to Generate PWM.
*/
u8 PWM_generatePWM   ( u8 u8_a_dutyCycle )
{	 
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	01 c0       	rjmp	.+2      	; 0x176e <PWM_generatePWM+0xae>
	}
	/* Check 2: DutyCycle is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong DutyCycle! */
		u8_l_errorState = STD_TYPES_NOK;
    176c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;
}
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	08 95       	ret

00001780 <__vector_5>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR2 OVF */
void __vector_5( void )
{
    1780:	1f 92       	push	r1
    1782:	0f 92       	push	r0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	0f 92       	push	r0
    1788:	11 24       	eor	r1, r1
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
	/* Check 1: PWMFlag is not set */
	if( u8_gs_PWMFlag == PWM_U8_FLAG_DOWN )
    17a2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <u8_gs_PWMFlag>
    17a6:	81 11       	cpse	r24, r1
    17a8:	0d c0       	rjmp	.+26     	; 0x17c4 <__vector_5+0x44>
	{
		PWM_setPrescaler( u16_gs_ToffPrescale );		
    17aa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <u16_gs_ToffPrescale>
    17ae:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <u16_gs_ToffPrescale+0x1>
    17b2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <PWM_setPrescaler>
		TMR_U8_TCNT2_REG = u8_gs_ToffInitialValue;
    17b6:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <u8_gs_ToffInitialValue>
    17ba:	84 bd       	out	0x24, r24	; 36
		
		u8_gs_PWMFlag = PWM_U8_FLAG_UP;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <u8_gs_PWMFlag>
    17c2:	0b c0       	rjmp	.+22     	; 0x17da <__vector_5+0x5a>
	}
	/* Check 2: PWMFlag is set */
	else
	{
		PWM_setPrescaler( u16_gs_TonPrescale );		
    17c4:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <u16_gs_TonPrescale>
    17c8:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <u16_gs_TonPrescale+0x1>
    17cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <PWM_setPrescaler>
		TMR_U8_TCNT2_REG = u8_gs_TonInitialValue;
    17d0:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <u8_gs_TonInitialValue>
    17d4:	84 bd       	out	0x24, r24	; 36
		
		u8_gs_PWMFlag = PWM_U8_FLAG_DOWN;
    17d6:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <u8_gs_PWMFlag>
	}

	/* Step 2: Toggle the PWM Pin */
	switch ( u8_gs_portId )
    17da:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <u8_gs_portId>
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	99 f0       	breq	.+38     	; 0x1808 <__vector_5+0x88>
    17e2:	28 f0       	brcs	.+10     	; 0x17ee <__vector_5+0x6e>
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	e9 f0       	breq	.+58     	; 0x1822 <__vector_5+0xa2>
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	41 f1       	breq	.+80     	; 0x183c <__vector_5+0xbc>
    17ec:	33 c0       	rjmp	.+102    	; 0x1854 <__vector_5+0xd4>
	{
		case DIO_U8_PORTA: TOG_BIT( DIO_U8_PORTA_REG, u8_gs_pinId ); break;
    17ee:	2b b3       	in	r18, 0x1b	; 27
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	00 90 d4 00 	lds	r0, 0x00D4	; 0x8000d4 <u8_gs_pinId>
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <__vector_5+0x7e>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <__vector_5+0x7a>
    1802:	82 27       	eor	r24, r18
    1804:	8b bb       	out	0x1b, r24	; 27
    1806:	26 c0       	rjmp	.+76     	; 0x1854 <__vector_5+0xd4>
		case DIO_U8_PORTB: TOG_BIT( DIO_U8_PORTB_REG, u8_gs_pinId ); break;
    1808:	28 b3       	in	r18, 0x18	; 24
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	00 90 d4 00 	lds	r0, 0x00D4	; 0x8000d4 <u8_gs_pinId>
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <__vector_5+0x98>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <__vector_5+0x94>
    181c:	82 27       	eor	r24, r18
    181e:	88 bb       	out	0x18, r24	; 24
    1820:	19 c0       	rjmp	.+50     	; 0x1854 <__vector_5+0xd4>
		case DIO_U8_PORTC: TOG_BIT( DIO_U8_PORTC_REG, u8_gs_pinId ); break;
    1822:	25 b3       	in	r18, 0x15	; 21
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	00 90 d4 00 	lds	r0, 0x00D4	; 0x8000d4 <u8_gs_pinId>
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <__vector_5+0xb2>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <__vector_5+0xae>
    1836:	82 27       	eor	r24, r18
    1838:	85 bb       	out	0x15, r24	; 21
    183a:	0c c0       	rjmp	.+24     	; 0x1854 <__vector_5+0xd4>
		case DIO_U8_PORTD: TOG_BIT( DIO_U8_PORTD_REG, u8_gs_pinId ); break;
    183c:	22 b3       	in	r18, 0x12	; 18
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	00 90 d4 00 	lds	r0, 0x00D4	; 0x8000d4 <u8_gs_pinId>
    1846:	02 c0       	rjmp	.+4      	; 0x184c <__vector_5+0xcc>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <__vector_5+0xc8>
    1850:	82 27       	eor	r24, r18
    1852:	82 bb       	out	0x12, r24	; 18
	}
}
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <TMR0_delayMS>:
	}
	TCNT0=g_initial_value;
	
	g_callBackPtr_0=g_ptr;
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
}
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	27 97       	sbiw	r28, 0x07	; 7
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	6b 01       	movw	r12, r22
    189e:	7c 01       	movw	r14, r24
    18a0:	2f e6       	ldi	r18, 0x6F	; 111
    18a2:	32 e1       	ldi	r19, 0x12	; 18
    18a4:	43 e0       	ldi	r20, 0x03	; 3
    18a6:	52 e4       	ldi	r21, 0x42	; 66
    18a8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    18ac:	18 16       	cp	r1, r24
    18ae:	0c f4       	brge	.+2      	; 0x18b2 <TMR0_delayMS+0x3c>
    18b0:	53 c0       	rjmp	.+166    	; 0x1958 <TMR0_delayMS+0xe2>
    18b2:	2f e6       	ldi	r18, 0x6F	; 111
    18b4:	32 e1       	ldi	r19, 0x12	; 18
    18b6:	43 e0       	ldi	r20, 0x03	; 3
    18b8:	5d e3       	ldi	r21, 0x3D	; 61
    18ba:	c7 01       	movw	r24, r14
    18bc:	b6 01       	movw	r22, r12
    18be:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    18c2:	18 16       	cp	r1, r24
    18c4:	2c f0       	brlt	.+10     	; 0x18d0 <TMR0_delayMS+0x5a>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	45 c0       	rjmp	.+138    	; 0x195a <TMR0_delayMS+0xe4>
    18d0:	2f e6       	ldi	r18, 0x6F	; 111
    18d2:	32 e1       	ldi	r19, 0x12	; 18
    18d4:	43 e8       	ldi	r20, 0x83	; 131
    18d6:	5e e3       	ldi	r21, 0x3E	; 62
    18d8:	c7 01       	movw	r24, r14
    18da:	b6 01       	movw	r22, r12
    18dc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	34 f0       	brlt	.+12     	; 0x18f0 <TMR0_delayMS+0x7a>
    18e4:	88 e0       	ldi	r24, 0x08	; 8
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	35 c0       	rjmp	.+106    	; 0x195a <TMR0_delayMS+0xe4>
    18f0:	2f e6       	ldi	r18, 0x6F	; 111
    18f2:	32 e1       	ldi	r19, 0x12	; 18
    18f4:	43 e0       	ldi	r20, 0x03	; 3
    18f6:	50 e4       	ldi	r21, 0x40	; 64
    18f8:	c7 01       	movw	r24, r14
    18fa:	b6 01       	movw	r22, r12
    18fc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1900:	18 16       	cp	r1, r24
    1902:	34 f0       	brlt	.+12     	; 0x1910 <TMR0_delayMS+0x9a>
    1904:	80 e4       	ldi	r24, 0x40	; 64
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	25 c0       	rjmp	.+74     	; 0x195a <TMR0_delayMS+0xe4>
    1910:	2f e6       	ldi	r18, 0x6F	; 111
    1912:	32 e1       	ldi	r19, 0x12	; 18
    1914:	43 e0       	ldi	r20, 0x03	; 3
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	c7 01       	movw	r24, r14
    191a:	b6 01       	movw	r22, r12
    191c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1920:	18 16       	cp	r1, r24
    1922:	34 f0       	brlt	.+12     	; 0x1930 <TMR0_delayMS+0xba>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	15 c0       	rjmp	.+42     	; 0x195a <TMR0_delayMS+0xe4>
    1930:	2f e6       	ldi	r18, 0x6F	; 111
    1932:	32 e1       	ldi	r19, 0x12	; 18
    1934:	43 e0       	ldi	r20, 0x03	; 3
    1936:	52 e4       	ldi	r21, 0x42	; 66
    1938:	c7 01       	movw	r24, r14
    193a:	b6 01       	movw	r22, r12
    193c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1940:	18 16       	cp	r1, r24
    1942:	34 f0       	brlt	.+12     	; 0x1950 <TMR0_delayMS+0xda>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	94 e0       	ldi	r25, 0x04	; 4
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	05 c0       	rjmp	.+10     	; 0x195a <TMR0_delayMS+0xe4>
    1950:	1a 82       	std	Y+2, r1	; 0x02
    1952:	19 82       	std	Y+1, r1	; 0x01
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	01 c0       	rjmp	.+2      	; 0x195a <TMR0_delayMS+0xe4>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	88 23       	and	r24, r24
    195c:	09 f4       	brne	.+2      	; 0x1960 <TMR0_delayMS+0xea>
    195e:	75 c0       	rjmp	.+234    	; 0x1a4a <TMR0_delayMS+0x1d4>
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	80 34       	cpi	r24, 0x40	; 64
    1966:	91 05       	cpc	r25, r1
    1968:	a1 f1       	breq	.+104    	; 0x19d2 <TMR0_delayMS+0x15c>
    196a:	30 f4       	brcc	.+12     	; 0x1978 <TMR0_delayMS+0x102>
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	61 f0       	breq	.+24     	; 0x198a <TMR0_delayMS+0x114>
    1972:	08 97       	sbiw	r24, 0x08	; 8
    1974:	e1 f0       	breq	.+56     	; 0x19ae <TMR0_delayMS+0x138>
    1976:	63 c0       	rjmp	.+198    	; 0x1a3e <TMR0_delayMS+0x1c8>
    1978:	81 15       	cp	r24, r1
    197a:	21 e0       	ldi	r18, 0x01	; 1
    197c:	92 07       	cpc	r25, r18
    197e:	d9 f1       	breq	.+118    	; 0x19f6 <TMR0_delayMS+0x180>
    1980:	81 15       	cp	r24, r1
    1982:	94 40       	sbci	r25, 0x04	; 4
    1984:	09 f4       	brne	.+2      	; 0x1988 <TMR0_delayMS+0x112>
    1986:	49 c0       	rjmp	.+146    	; 0x1a1a <TMR0_delayMS+0x1a4>
    1988:	5a c0       	rjmp	.+180    	; 0x1a3e <TMR0_delayMS+0x1c8>
    198a:	a7 01       	movw	r20, r14
    198c:	96 01       	movw	r18, r12
    198e:	6f e6       	ldi	r22, 0x6F	; 111
    1990:	72 e1       	ldi	r23, 0x12	; 18
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	9d e3       	ldi	r25, 0x3D	; 61
    1996:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    199a:	2f e6       	ldi	r18, 0x6F	; 111
    199c:	32 e1       	ldi	r19, 0x12	; 18
    199e:	43 e0       	ldi	r20, 0x03	; 3
    19a0:	59 e3       	ldi	r21, 0x39	; 57
    19a2:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    19a6:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    19aa:	6b 83       	std	Y+3, r22	; 0x03
    19ac:	49 c0       	rjmp	.+146    	; 0x1a40 <TMR0_delayMS+0x1ca>
    19ae:	a7 01       	movw	r20, r14
    19b0:	96 01       	movw	r18, r12
    19b2:	6f e6       	ldi	r22, 0x6F	; 111
    19b4:	72 e1       	ldi	r23, 0x12	; 18
    19b6:	83 e8       	ldi	r24, 0x83	; 131
    19b8:	9e e3       	ldi	r25, 0x3E	; 62
    19ba:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    19be:	2f e6       	ldi	r18, 0x6F	; 111
    19c0:	32 e1       	ldi	r19, 0x12	; 18
    19c2:	43 e8       	ldi	r20, 0x83	; 131
    19c4:	5a e3       	ldi	r21, 0x3A	; 58
    19c6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    19ca:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    19ce:	6b 83       	std	Y+3, r22	; 0x03
    19d0:	37 c0       	rjmp	.+110    	; 0x1a40 <TMR0_delayMS+0x1ca>
    19d2:	a7 01       	movw	r20, r14
    19d4:	96 01       	movw	r18, r12
    19d6:	6f e6       	ldi	r22, 0x6F	; 111
    19d8:	72 e1       	ldi	r23, 0x12	; 18
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	90 e4       	ldi	r25, 0x40	; 64
    19de:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    19e2:	2f e6       	ldi	r18, 0x6F	; 111
    19e4:	32 e1       	ldi	r19, 0x12	; 18
    19e6:	43 e0       	ldi	r20, 0x03	; 3
    19e8:	5c e3       	ldi	r21, 0x3C	; 60
    19ea:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    19ee:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    19f2:	6b 83       	std	Y+3, r22	; 0x03
    19f4:	25 c0       	rjmp	.+74     	; 0x1a40 <TMR0_delayMS+0x1ca>
    19f6:	a7 01       	movw	r20, r14
    19f8:	96 01       	movw	r18, r12
    19fa:	6f e6       	ldi	r22, 0x6F	; 111
    19fc:	72 e1       	ldi	r23, 0x12	; 18
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	91 e4       	ldi	r25, 0x41	; 65
    1a02:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1a06:	2f e6       	ldi	r18, 0x6F	; 111
    1a08:	32 e1       	ldi	r19, 0x12	; 18
    1a0a:	43 e0       	ldi	r20, 0x03	; 3
    1a0c:	5d e3       	ldi	r21, 0x3D	; 61
    1a0e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1a12:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1a16:	6b 83       	std	Y+3, r22	; 0x03
    1a18:	13 c0       	rjmp	.+38     	; 0x1a40 <TMR0_delayMS+0x1ca>
    1a1a:	a7 01       	movw	r20, r14
    1a1c:	96 01       	movw	r18, r12
    1a1e:	6f e6       	ldi	r22, 0x6F	; 111
    1a20:	72 e1       	ldi	r23, 0x12	; 18
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	92 e4       	ldi	r25, 0x42	; 66
    1a26:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1a2a:	2f e6       	ldi	r18, 0x6F	; 111
    1a2c:	32 e1       	ldi	r19, 0x12	; 18
    1a2e:	43 e0       	ldi	r20, 0x03	; 3
    1a30:	5e e3       	ldi	r21, 0x3E	; 62
    1a32:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1a36:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1a3a:	6b 83       	std	Y+3, r22	; 0x03
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <TMR0_delayMS+0x1ca>
    1a3e:	1b 82       	std	Y+3, r1	; 0x03
    1a40:	1c 82       	std	Y+4, r1	; 0x04
    1a42:	1d 82       	std	Y+5, r1	; 0x05
    1a44:	1e 82       	std	Y+6, r1	; 0x06
    1a46:	1f 82       	std	Y+7, r1	; 0x07
    1a48:	11 c0       	rjmp	.+34     	; 0x1a6c <TMR0_delayMS+0x1f6>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	94 e0       	ldi	r25, 0x04	; 4
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	2f e6       	ldi	r18, 0x6F	; 111
    1a54:	32 e1       	ldi	r19, 0x12	; 18
    1a56:	43 e0       	ldi	r20, 0x03	; 3
    1a58:	52 e4       	ldi	r21, 0x42	; 66
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1a62:	6c 83       	std	Y+4, r22	; 0x04
    1a64:	7d 83       	std	Y+5, r23	; 0x05
    1a66:	8e 83       	std	Y+6, r24	; 0x06
    1a68:	9f 83       	std	Y+7, r25	; 0x07
    1a6a:	1b 82       	std	Y+3, r1	; 0x03
    1a6c:	cc 80       	ldd	r12, Y+4	; 0x04
    1a6e:	dd 80       	ldd	r13, Y+5	; 0x05
    1a70:	ee 80       	ldd	r14, Y+6	; 0x06
    1a72:	ff 80       	ldd	r15, Y+7	; 0x07
    1a74:	c7 01       	movw	r24, r14
    1a76:	b6 01       	movw	r22, r12
    1a78:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1a7c:	16 2f       	mov	r17, r22
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	b6 01       	movw	r22, r12
    1a90:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1a94:	2f e6       	ldi	r18, 0x6F	; 111
    1a96:	32 e1       	ldi	r19, 0x12	; 18
    1a98:	43 e0       	ldi	r20, 0x03	; 3
    1a9a:	52 e4       	ldi	r21, 0x42	; 66
    1a9c:	0e 94 4e 11 	call	0x229c	; 0x229c <__mulsf3>
    1aa0:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1aa4:	f6 2e       	mov	r15, r22
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	82 bf       	out	0x32, r24	; 50
    1aaa:	11 11       	cpse	r17, r1
    1aac:	28 c0       	rjmp	.+80     	; 0x1afe <TMR0_delayMS+0x288>
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	80 34       	cpi	r24, 0x40	; 64
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	a9 f0       	breq	.+42     	; 0x1ae2 <TMR0_delayMS+0x26c>
    1ab8:	30 f4       	brcc	.+12     	; 0x1ac6 <TMR0_delayMS+0x250>
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	59 f0       	breq	.+22     	; 0x1ad6 <TMR0_delayMS+0x260>
    1ac0:	08 97       	sbiw	r24, 0x08	; 8
    1ac2:	61 f0       	breq	.+24     	; 0x1adc <TMR0_delayMS+0x266>
    1ac4:	17 c0       	rjmp	.+46     	; 0x1af4 <TMR0_delayMS+0x27e>
    1ac6:	81 15       	cp	r24, r1
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	92 07       	cpc	r25, r18
    1acc:	69 f0       	breq	.+26     	; 0x1ae8 <TMR0_delayMS+0x272>
    1ace:	81 15       	cp	r24, r1
    1ad0:	94 40       	sbci	r25, 0x04	; 4
    1ad2:	69 f0       	breq	.+26     	; 0x1aee <TMR0_delayMS+0x278>
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <TMR0_delayMS+0x27e>
    1ad6:	81 e8       	ldi	r24, 0x81	; 129
    1ad8:	83 bf       	out	0x33, r24	; 51
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <TMR0_delayMS+0x280>
    1adc:	82 e8       	ldi	r24, 0x82	; 130
    1ade:	83 bf       	out	0x33, r24	; 51
    1ae0:	0a c0       	rjmp	.+20     	; 0x1af6 <TMR0_delayMS+0x280>
    1ae2:	83 e8       	ldi	r24, 0x83	; 131
    1ae4:	83 bf       	out	0x33, r24	; 51
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <TMR0_delayMS+0x280>
    1ae8:	84 e8       	ldi	r24, 0x84	; 132
    1aea:	83 bf       	out	0x33, r24	; 51
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <TMR0_delayMS+0x280>
    1aee:	85 e8       	ldi	r24, 0x85	; 133
    1af0:	83 bf       	out	0x33, r24	; 51
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <TMR0_delayMS+0x280>
    1af4:	13 be       	out	0x33, r1	; 51
    1af6:	08 b6       	in	r0, 0x38	; 56
    1af8:	00 fe       	sbrs	r0, 0
    1afa:	fd cf       	rjmp	.-6      	; 0x1af6 <TMR0_delayMS+0x280>
    1afc:	00 c1       	rjmp	.+512    	; 0x1cfe <TMR0_delayMS+0x488>
    1afe:	85 e8       	ldi	r24, 0x85	; 133
    1b00:	83 bf       	out	0x33, r24	; 51
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <TMR0_delayMS+0x29c>
    1b04:	08 b6       	in	r0, 0x38	; 56
    1b06:	00 fe       	sbrs	r0, 0
    1b08:	fd cf       	rjmp	.-6      	; 0x1b04 <TMR0_delayMS+0x28e>
    1b0a:	11 50       	subi	r17, 0x01	; 1
    1b0c:	88 b7       	in	r24, 0x38	; 56
    1b0e:	81 60       	ori	r24, 0x01	; 1
    1b10:	88 bf       	out	0x38, r24	; 56
    1b12:	11 11       	cpse	r17, r1
    1b14:	f7 cf       	rjmp	.-18     	; 0x1b04 <TMR0_delayMS+0x28e>
    1b16:	ff 20       	and	r15, r15
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <TMR0_delayMS+0x2a6>
    1b1a:	53 c0       	rjmp	.+166    	; 0x1bc2 <TMR0_delayMS+0x34c>
    1b1c:	6f 2d       	mov	r22, r15
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    1b28:	4b 01       	movw	r8, r22
    1b2a:	5c 01       	movw	r10, r24
    1b2c:	2f e6       	ldi	r18, 0x6F	; 111
    1b2e:	32 e1       	ldi	r19, 0x12	; 18
    1b30:	43 e0       	ldi	r20, 0x03	; 3
    1b32:	5d e3       	ldi	r21, 0x3D	; 61
    1b34:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	2c f0       	brlt	.+10     	; 0x1b46 <TMR0_delayMS+0x2d0>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	3e c0       	rjmp	.+124    	; 0x1bc2 <TMR0_delayMS+0x34c>
    1b46:	2f e6       	ldi	r18, 0x6F	; 111
    1b48:	32 e1       	ldi	r19, 0x12	; 18
    1b4a:	43 e8       	ldi	r20, 0x83	; 131
    1b4c:	5e e3       	ldi	r21, 0x3E	; 62
    1b4e:	c5 01       	movw	r24, r10
    1b50:	b4 01       	movw	r22, r8
    1b52:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	2c f0       	brlt	.+10     	; 0x1b64 <TMR0_delayMS+0x2ee>
    1b5a:	88 e0       	ldi	r24, 0x08	; 8
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	2f c0       	rjmp	.+94     	; 0x1bc2 <TMR0_delayMS+0x34c>
    1b64:	2f e6       	ldi	r18, 0x6F	; 111
    1b66:	32 e1       	ldi	r19, 0x12	; 18
    1b68:	43 e0       	ldi	r20, 0x03	; 3
    1b6a:	50 e4       	ldi	r21, 0x40	; 64
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	b4 01       	movw	r22, r8
    1b70:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	2c f0       	brlt	.+10     	; 0x1b82 <TMR0_delayMS+0x30c>
    1b78:	80 e4       	ldi	r24, 0x40	; 64
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	20 c0       	rjmp	.+64     	; 0x1bc2 <TMR0_delayMS+0x34c>
    1b82:	2f e6       	ldi	r18, 0x6F	; 111
    1b84:	32 e1       	ldi	r19, 0x12	; 18
    1b86:	43 e0       	ldi	r20, 0x03	; 3
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	c5 01       	movw	r24, r10
    1b8c:	b4 01       	movw	r22, r8
    1b8e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	2c f0       	brlt	.+10     	; 0x1ba0 <TMR0_delayMS+0x32a>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	11 c0       	rjmp	.+34     	; 0x1bc2 <TMR0_delayMS+0x34c>
    1ba0:	2f e6       	ldi	r18, 0x6F	; 111
    1ba2:	32 e1       	ldi	r19, 0x12	; 18
    1ba4:	43 e0       	ldi	r20, 0x03	; 3
    1ba6:	52 e4       	ldi	r21, 0x42	; 66
    1ba8:	c5 01       	movw	r24, r10
    1baa:	b4 01       	movw	r22, r8
    1bac:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	2c f0       	brlt	.+10     	; 0x1bbe <TMR0_delayMS+0x348>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	94 e0       	ldi	r25, 0x04	; 4
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <TMR0_delayMS+0x34c>
    1bbe:	1a 82       	std	Y+2, r1	; 0x02
    1bc0:	19 82       	std	Y+1, r1	; 0x01
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	80 34       	cpi	r24, 0x40	; 64
    1bc8:	91 05       	cpc	r25, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <TMR0_delayMS+0x358>
    1bcc:	45 c0       	rjmp	.+138    	; 0x1c58 <TMR0_delayMS+0x3e2>
    1bce:	30 f4       	brcc	.+12     	; 0x1bdc <TMR0_delayMS+0x366>
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	69 f0       	breq	.+26     	; 0x1bf0 <TMR0_delayMS+0x37a>
    1bd6:	08 97       	sbiw	r24, 0x08	; 8
    1bd8:	29 f1       	breq	.+74     	; 0x1c24 <TMR0_delayMS+0x3ae>
    1bda:	8c c0       	rjmp	.+280    	; 0x1cf4 <TMR0_delayMS+0x47e>
    1bdc:	81 15       	cp	r24, r1
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	92 07       	cpc	r25, r18
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <TMR0_delayMS+0x370>
    1be4:	53 c0       	rjmp	.+166    	; 0x1c8c <TMR0_delayMS+0x416>
    1be6:	81 15       	cp	r24, r1
    1be8:	94 40       	sbci	r25, 0x04	; 4
    1bea:	09 f4       	brne	.+2      	; 0x1bee <TMR0_delayMS+0x378>
    1bec:	69 c0       	rjmp	.+210    	; 0x1cc0 <TMR0_delayMS+0x44a>
    1bee:	82 c0       	rjmp	.+260    	; 0x1cf4 <TMR0_delayMS+0x47e>
    1bf0:	6f 2d       	mov	r22, r15
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    1bfc:	9b 01       	movw	r18, r22
    1bfe:	ac 01       	movw	r20, r24
    1c00:	6f e6       	ldi	r22, 0x6F	; 111
    1c02:	72 e1       	ldi	r23, 0x12	; 18
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	9d e3       	ldi	r25, 0x3D	; 61
    1c08:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1c0c:	2f e6       	ldi	r18, 0x6F	; 111
    1c0e:	32 e1       	ldi	r19, 0x12	; 18
    1c10:	43 e0       	ldi	r20, 0x03	; 3
    1c12:	59 e3       	ldi	r21, 0x39	; 57
    1c14:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1c18:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1c1c:	62 bf       	out	0x32, r22	; 50
    1c1e:	81 e8       	ldi	r24, 0x81	; 129
    1c20:	83 bf       	out	0x33, r24	; 51
    1c22:	6a c0       	rjmp	.+212    	; 0x1cf8 <TMR0_delayMS+0x482>
    1c24:	6f 2d       	mov	r22, r15
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    1c30:	9b 01       	movw	r18, r22
    1c32:	ac 01       	movw	r20, r24
    1c34:	6f e6       	ldi	r22, 0x6F	; 111
    1c36:	72 e1       	ldi	r23, 0x12	; 18
    1c38:	83 e8       	ldi	r24, 0x83	; 131
    1c3a:	9e e3       	ldi	r25, 0x3E	; 62
    1c3c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1c40:	2f e6       	ldi	r18, 0x6F	; 111
    1c42:	32 e1       	ldi	r19, 0x12	; 18
    1c44:	43 e8       	ldi	r20, 0x83	; 131
    1c46:	5a e3       	ldi	r21, 0x3A	; 58
    1c48:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1c4c:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1c50:	62 bf       	out	0x32, r22	; 50
    1c52:	82 e8       	ldi	r24, 0x82	; 130
    1c54:	83 bf       	out	0x33, r24	; 51
    1c56:	50 c0       	rjmp	.+160    	; 0x1cf8 <TMR0_delayMS+0x482>
    1c58:	6f 2d       	mov	r22, r15
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    1c64:	9b 01       	movw	r18, r22
    1c66:	ac 01       	movw	r20, r24
    1c68:	6f e6       	ldi	r22, 0x6F	; 111
    1c6a:	72 e1       	ldi	r23, 0x12	; 18
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	90 e4       	ldi	r25, 0x40	; 64
    1c70:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1c74:	2f e6       	ldi	r18, 0x6F	; 111
    1c76:	32 e1       	ldi	r19, 0x12	; 18
    1c78:	43 e0       	ldi	r20, 0x03	; 3
    1c7a:	5c e3       	ldi	r21, 0x3C	; 60
    1c7c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1c80:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1c84:	62 bf       	out	0x32, r22	; 50
    1c86:	83 e8       	ldi	r24, 0x83	; 131
    1c88:	83 bf       	out	0x33, r24	; 51
    1c8a:	36 c0       	rjmp	.+108    	; 0x1cf8 <TMR0_delayMS+0x482>
    1c8c:	6f 2d       	mov	r22, r15
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    1c98:	9b 01       	movw	r18, r22
    1c9a:	ac 01       	movw	r20, r24
    1c9c:	6f e6       	ldi	r22, 0x6F	; 111
    1c9e:	72 e1       	ldi	r23, 0x12	; 18
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	91 e4       	ldi	r25, 0x41	; 65
    1ca4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1ca8:	2f e6       	ldi	r18, 0x6F	; 111
    1caa:	32 e1       	ldi	r19, 0x12	; 18
    1cac:	43 e0       	ldi	r20, 0x03	; 3
    1cae:	5d e3       	ldi	r21, 0x3D	; 61
    1cb0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1cb4:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1cb8:	62 bf       	out	0x32, r22	; 50
    1cba:	84 e8       	ldi	r24, 0x84	; 132
    1cbc:	83 bf       	out	0x33, r24	; 51
    1cbe:	1c c0       	rjmp	.+56     	; 0x1cf8 <TMR0_delayMS+0x482>
    1cc0:	6f 2d       	mov	r22, r15
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 9e 10 	call	0x213c	; 0x213c <__floatsisf>
    1ccc:	9b 01       	movw	r18, r22
    1cce:	ac 01       	movw	r20, r24
    1cd0:	6f e6       	ldi	r22, 0x6F	; 111
    1cd2:	72 e1       	ldi	r23, 0x12	; 18
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	92 e4       	ldi	r25, 0x42	; 66
    1cd8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__subsf3>
    1cdc:	2f e6       	ldi	r18, 0x6F	; 111
    1cde:	32 e1       	ldi	r19, 0x12	; 18
    1ce0:	43 e0       	ldi	r20, 0x03	; 3
    1ce2:	5e e3       	ldi	r21, 0x3E	; 62
    1ce4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1ce8:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1cec:	62 bf       	out	0x32, r22	; 50
    1cee:	85 e8       	ldi	r24, 0x85	; 133
    1cf0:	83 bf       	out	0x33, r24	; 51
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <TMR0_delayMS+0x482>
    1cf4:	12 be       	out	0x32, r1	; 50
    1cf6:	13 be       	out	0x33, r1	; 51
    1cf8:	08 b6       	in	r0, 0x38	; 56
    1cfa:	00 fe       	sbrs	r0, 0
    1cfc:	fd cf       	rjmp	.-6      	; 0x1cf8 <TMR0_delayMS+0x482>
    1cfe:	88 b7       	in	r24, 0x38	; 56
    1d00:	81 60       	ori	r24, 0x01	; 1
    1d02:	88 bf       	out	0x38, r24	; 56
    1d04:	13 be       	out	0x33, r1	; 51
    1d06:	27 96       	adiw	r28, 0x07	; 7
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	cf 90       	pop	r12
    1d20:	bf 90       	pop	r11
    1d22:	af 90       	pop	r10
    1d24:	9f 90       	pop	r9
    1d26:	8f 90       	pop	r8
    1d28:	08 95       	ret

00001d2a <TMR0_timeoutMS>:

void TMR0_timeoutMS(f32 delay)
{
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	6b 01       	movw	r12, r22
    1d34:	7c 01       	movw	r14, r24
	/*code to count time in milliseconds*/
	if(delay < MAX_DELAY_MS(P_1024))
    1d36:	2f e6       	ldi	r18, 0x6F	; 111
    1d38:	32 e1       	ldi	r19, 0x12	; 18
    1d3a:	43 e0       	ldi	r20, 0x03	; 3
    1d3c:	52 e4       	ldi	r21, 0x42	; 66
    1d3e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	4c f4       	brge	.+18     	; 0x1d58 <TMR0_timeoutMS+0x2e>
	{
		g_initial_value=delay;
    1d46:	c7 01       	movw	r24, r14
    1d48:	b6 01       	movw	r22, r12
    1d4a:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1d4e:	60 93 d7 00 	sts	0x00D7, r22	; 0x8000d7 <g_initial_value>
		NO_OF_OVERFLOWS=0;
    1d52:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <NO_OF_OVERFLOWS>
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <TMR0_timeoutMS+0x4c>
	}
	else
	{
		NO_OF_OVERFLOWS = ((f32)delay/MAX_DELAY_MS(P_1024));
    1d58:	2f e6       	ldi	r18, 0x6F	; 111
    1d5a:	32 e1       	ldi	r19, 0x12	; 18
    1d5c:	43 e0       	ldi	r20, 0x03	; 3
    1d5e:	52 e4       	ldi	r21, 0x42	; 66
    1d60:	c7 01       	movw	r24, r14
    1d62:	b6 01       	movw	r22, r12
    1d64:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    1d68:	0e 94 6d 10 	call	0x20da	; 0x20da <__fixunssfsi>
    1d6c:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <NO_OF_OVERFLOWS>
		g_initial_value = MAX_COUNT - 1;
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <g_initial_value>
	}
	TCNT0=0;
    1d76:	12 be       	out	0x32, r1	; 50
	OCR0=g_initial_value;
    1d78:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_initial_value>
    1d7c:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0);			//enable timer compare match interrupt
    1d7e:	89 b7       	in	r24, 0x39	; 57
    1d80:	82 60       	ori	r24, 0x02	; 2
    1d82:	89 bf       	out	0x39, r24	; 57
	g_timeout_flag=0;				//set flag to default
    1d84:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <g_timeout_flag>
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
    1d88:	8d e8       	ldi	r24, 0x8D	; 141
    1d8a:	83 bf       	out	0x33, r24	; 51
}
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	08 95       	ret

00001d96 <__vector_10>:

ISR_HANDLER(TMR0_CMP)
{
    1d96:	1f 92       	push	r1
    1d98:	0f 92       	push	r0
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	0f 92       	push	r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
	if(NO_OF_OVERFLOWS > 0)
    1da4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <NO_OF_OVERFLOWS>
    1da8:	88 23       	and	r24, r24
    1daa:	99 f0       	breq	.+38     	; 0x1dd2 <__vector_10+0x3c>
	{
		g_tick++;
    1dac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <g_tick>
    1db0:	8f 5f       	subi	r24, 0xFF	; 255
    1db2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <g_tick>
		if(g_tick==NO_OF_OVERFLOWS)
    1db6:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <g_tick>
    1dba:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <NO_OF_OVERFLOWS>
    1dbe:	98 13       	cpse	r25, r24
    1dc0:	11 c0       	rjmp	.+34     	; 0x1de4 <__vector_10+0x4e>
		{
			g_timeout_flag++;
    1dc2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <g_timeout_flag>
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <g_timeout_flag>
			g_tick = 0;			//clear the tick counter again to start new count				
    1dcc:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <g_tick>
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <__vector_10+0x4e>
		}
	}
	else
	{
		g_timeout_flag++;
    1dd2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <g_timeout_flag>
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <g_timeout_flag>
		TCNT0=0;
    1ddc:	12 be       	out	0x32, r1	; 50
		OCR0=g_initial_value;
    1dde:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_initial_value>
    1de2:	8c bf       	out	0x3c, r24	; 60
	}
}
    1de4:	9f 91       	pop	r25
    1de6:	8f 91       	pop	r24
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	0f 90       	pop	r0
    1dee:	1f 90       	pop	r1
    1df0:	18 95       	reti

00001df2 <__vector_11>:

ISR_HANDLER(TMR0_OVF)
{
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	2f 93       	push	r18
    1dfe:	3f 93       	push	r19
    1e00:	4f 93       	push	r20
    1e02:	5f 93       	push	r21
    1e04:	6f 93       	push	r22
    1e06:	7f 93       	push	r23
    1e08:	8f 93       	push	r24
    1e0a:	9f 93       	push	r25
    1e0c:	af 93       	push	r26
    1e0e:	bf 93       	push	r27
    1e10:	ef 93       	push	r30
    1e12:	ff 93       	push	r31
	if(g_callBackPtr_0 != NULL)
    1e14:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <g_callBackPtr_0>
    1e18:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <g_callBackPtr_0+0x1>
    1e1c:	30 97       	sbiw	r30, 0x00	; 0
    1e1e:	b9 f0       	breq	.+46     	; 0x1e4e <__vector_11+0x5c>
	{
		if(NO_OF_OVERFLOWS > 0)
    1e20:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <NO_OF_OVERFLOWS>
    1e24:	88 23       	and	r24, r24
    1e26:	79 f0       	breq	.+30     	; 0x1e46 <__vector_11+0x54>
		{
			g_tick++;
    1e28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <g_tick>
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <g_tick>
			if(g_tick == NO_OF_OVERFLOWS)
    1e32:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <g_tick>
    1e36:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <NO_OF_OVERFLOWS>
    1e3a:	98 13       	cpse	r25, r24
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <__vector_11+0x5c>
			{
				g_callBackPtr_0();
    1e3e:	09 95       	icall
				g_tick = 0; //clear the tick counter again to start new count
    1e40:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <g_tick>
    1e44:	04 c0       	rjmp	.+8      	; 0x1e4e <__vector_11+0x5c>
			}
		}
		else
		{
			g_callBackPtr_0();
    1e46:	09 95       	icall
			TCNT0=g_initial_value;
    1e48:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <g_initial_value>
    1e4c:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    1e4e:	ff 91       	pop	r31
    1e50:	ef 91       	pop	r30
    1e52:	bf 91       	pop	r27
    1e54:	af 91       	pop	r26
    1e56:	9f 91       	pop	r25
    1e58:	8f 91       	pop	r24
    1e5a:	7f 91       	pop	r23
    1e5c:	6f 91       	pop	r22
    1e5e:	5f 91       	pop	r21
    1e60:	4f 91       	pop	r20
    1e62:	3f 91       	pop	r19
    1e64:	2f 91       	pop	r18
    1e66:	0f 90       	pop	r0
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	0f 90       	pop	r0
    1e6c:	1f 90       	pop	r1
    1e6e:	18 95       	reti

00001e70 <TMR1_init>:
#define INT_MASKING_BITS	0xC3
#define ZERO_VALUE			0
/*============= FUNCTION DEFINITION =============*/

void TMR1_init (ST_TME1_ConfigType* TMR_config)
{
    1e70:	fc 01       	movw	r30, r24
	//set timer initial value
	TCNT1 = ZERO_VALUE;
    1e72:	1d bc       	out	0x2d, r1	; 45
    1e74:	1c bc       	out	0x2c, r1	; 44
	//set compare initial value
	OCR1A = ZERO_VALUE;
    1e76:	1b bc       	out	0x2b, r1	; 43
    1e78:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO_VALUE;
    1e7a:	19 bc       	out	0x29, r1	; 41
    1e7c:	18 bc       	out	0x28, r1	; 40
	//set input capture initial value
	ICR1 = ZERO_VALUE;
    1e7e:	17 bc       	out	0x27, r1	; 39
    1e80:	16 bc       	out	0x26, r1	; 38
	//set clock option
	TCCR1B = (TCCR1B & CLK_MASKING_BITS) | (TMR_config->CLK_source);
    1e82:	8e b5       	in	r24, 0x2e	; 46
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	88 7f       	andi	r24, 0xF8	; 248
    1e88:	89 2b       	or	r24, r25
    1e8a:	8e bd       	out	0x2e, r24	; 46
	//set  Input Capture Edge Select
	TCCR1B = (TCCR1B & CAPT_MASKING_BITS) | ((TMR_config->Edge_type) << ICES1);
    1e8c:	2e b5       	in	r18, 0x2e	; 46
    1e8e:	94 81       	ldd	r25, Z+4	; 0x04
    1e90:	30 e4       	ldi	r19, 0x40	; 64
    1e92:	93 9f       	mul	r25, r19
    1e94:	c0 01       	movw	r24, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	92 2f       	mov	r25, r18
    1e9a:	9f 7b       	andi	r25, 0xBF	; 191
    1e9c:	89 2b       	or	r24, r25
    1e9e:	8e bd       	out	0x2e, r24	; 46
	//set Input Capture Noise Canceler 
	TCCR1B = (TCCR1B & NOISE_MASKING_BITS) | ((TMR_config->NO_Noise) << ICNC1);
    1ea0:	2e b5       	in	r18, 0x2e	; 46
    1ea2:	96 81       	ldd	r25, Z+6	; 0x06
    1ea4:	30 e8       	ldi	r19, 0x80	; 128
    1ea6:	93 9f       	mul	r25, r19
    1ea8:	c0 01       	movw	r24, r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	92 2f       	mov	r25, r18
    1eae:	9f 77       	andi	r25, 0x7F	; 127
    1eb0:	89 2b       	or	r24, r25
    1eb2:	8e bd       	out	0x2e, r24	; 46
	//set wave generation mode
	TCCR1A = (TCCR1A & WGMA_MASKING_BITS) | (TMR_config->TMR_mode & WGM_LOW_MASKING);
    1eb4:	9f b5       	in	r25, 0x2f	; 47
    1eb6:	80 81       	ld	r24, Z
    1eb8:	9c 7f       	andi	r25, 0xFC	; 252
    1eba:	83 70       	andi	r24, 0x03	; 3
    1ebc:	89 2b       	or	r24, r25
    1ebe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (TCCR1B & WGMB_MASKING_BITS) | ((TMR_config->TMR_mode & WGM_HIGH_MASKING) << WGM12);
    1ec0:	8e b5       	in	r24, 0x2e	; 46
    1ec2:	90 81       	ld	r25, Z
    1ec4:	9c 70       	andi	r25, 0x0C	; 12
    1ec6:	29 2f       	mov	r18, r25
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	22 0f       	add	r18, r18
    1ecc:	33 1f       	adc	r19, r19
    1ece:	22 0f       	add	r18, r18
    1ed0:	33 1f       	adc	r19, r19
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	87 7e       	andi	r24, 0xE7	; 231
    1ed8:	28 2b       	or	r18, r24
    1eda:	2e bd       	out	0x2e, r18	; 46
	//interrupt source
	TIMSK = ((TIMSK & INT_MASKING_BITS) | (TMR_config->INT_source)) && (TMR_config->INT_state);
    1edc:	89 b7       	in	r24, 0x39	; 57
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	83 7c       	andi	r24, 0xC3	; 195
    1ee2:	89 2b       	or	r24, r25
    1ee4:	21 f0       	breq	.+8      	; 0x1eee <TMR1_init+0x7e>
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	81 11       	cpse	r24, r1
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <TMR1_init+0x82>
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <TMR1_init+0x84>
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	01 c0       	rjmp	.+2      	; 0x1ef4 <TMR1_init+0x84>
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	89 bf       	out	0x39, r24	; 57
	//he FOC1A/FOC1B bits are only active when the WGM13:0 bits specifies a non-PWM mode
	if(TMR_config->TMR_mode == Normal || TMR_config->TMR_mode == CTC)
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 23       	and	r24, r24
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <TMR1_init+0x90>
    1efc:	84 30       	cpi	r24, 0x04	; 4
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <TMR1_init+0x94>
	{
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1f00:	8c e0       	ldi	r24, 0x0C	; 12
    1f02:	8f bd       	out	0x2f, r24	; 47
    1f04:	08 95       	ret

00001f06 <TMR1_readTime>:
	}
}
u16 TMR1_readTime(void)
{
	//return timer/counter register
	return TCNT1 ;
    1f06:	8c b5       	in	r24, 0x2c	; 44
    1f08:	9d b5       	in	r25, 0x2d	; 45
}
    1f0a:	08 95       	ret

00001f0c <TMR1_clear>:
void TMR1_clear(void)
{
	//reset timer/counter register
	TCNT1 = ZERO_VALUE;
    1f0c:	1d bc       	out	0x2d, r1	; 45
    1f0e:	1c bc       	out	0x2c, r1	; 44
    1f10:	08 95       	ret

00001f12 <__subsf3>:
    1f12:	50 58       	subi	r21, 0x80	; 128

00001f14 <__addsf3>:
    1f14:	bb 27       	eor	r27, r27
    1f16:	aa 27       	eor	r26, r26
    1f18:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__addsf3x>
    1f1c:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__fp_round>
    1f20:	0e 94 06 11 	call	0x220c	; 0x220c <__fp_pscA>
    1f24:	38 f0       	brcs	.+14     	; 0x1f34 <__addsf3+0x20>
    1f26:	0e 94 0d 11 	call	0x221a	; 0x221a <__fp_pscB>
    1f2a:	20 f0       	brcs	.+8      	; 0x1f34 <__addsf3+0x20>
    1f2c:	39 f4       	brne	.+14     	; 0x1f3c <__addsf3+0x28>
    1f2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f30:	19 f4       	brne	.+6      	; 0x1f38 <__addsf3+0x24>
    1f32:	26 f4       	brtc	.+8      	; 0x1f3c <__addsf3+0x28>
    1f34:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_nan>
    1f38:	0e f4       	brtc	.+2      	; 0x1f3c <__addsf3+0x28>
    1f3a:	e0 95       	com	r30
    1f3c:	e7 fb       	bst	r30, 7
    1f3e:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__fp_inf>

00001f42 <__addsf3x>:
    1f42:	e9 2f       	mov	r30, r25
    1f44:	0e 94 25 11 	call	0x224a	; 0x224a <__fp_split3>
    1f48:	58 f3       	brcs	.-42     	; 0x1f20 <__addsf3+0xc>
    1f4a:	ba 17       	cp	r27, r26
    1f4c:	62 07       	cpc	r22, r18
    1f4e:	73 07       	cpc	r23, r19
    1f50:	84 07       	cpc	r24, r20
    1f52:	95 07       	cpc	r25, r21
    1f54:	20 f0       	brcs	.+8      	; 0x1f5e <__addsf3x+0x1c>
    1f56:	79 f4       	brne	.+30     	; 0x1f76 <__addsf3x+0x34>
    1f58:	a6 f5       	brtc	.+104    	; 0x1fc2 <__addsf3x+0x80>
    1f5a:	0c 94 47 11 	jmp	0x228e	; 0x228e <__fp_zero>
    1f5e:	0e f4       	brtc	.+2      	; 0x1f62 <__addsf3x+0x20>
    1f60:	e0 95       	com	r30
    1f62:	0b 2e       	mov	r0, r27
    1f64:	ba 2f       	mov	r27, r26
    1f66:	a0 2d       	mov	r26, r0
    1f68:	0b 01       	movw	r0, r22
    1f6a:	b9 01       	movw	r22, r18
    1f6c:	90 01       	movw	r18, r0
    1f6e:	0c 01       	movw	r0, r24
    1f70:	ca 01       	movw	r24, r20
    1f72:	a0 01       	movw	r20, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	ff 27       	eor	r31, r31
    1f78:	59 1b       	sub	r21, r25
    1f7a:	99 f0       	breq	.+38     	; 0x1fa2 <__addsf3x+0x60>
    1f7c:	59 3f       	cpi	r21, 0xF9	; 249
    1f7e:	50 f4       	brcc	.+20     	; 0x1f94 <__addsf3x+0x52>
    1f80:	50 3e       	cpi	r21, 0xE0	; 224
    1f82:	68 f1       	brcs	.+90     	; 0x1fde <__addsf3x+0x9c>
    1f84:	1a 16       	cp	r1, r26
    1f86:	f0 40       	sbci	r31, 0x00	; 0
    1f88:	a2 2f       	mov	r26, r18
    1f8a:	23 2f       	mov	r18, r19
    1f8c:	34 2f       	mov	r19, r20
    1f8e:	44 27       	eor	r20, r20
    1f90:	58 5f       	subi	r21, 0xF8	; 248
    1f92:	f3 cf       	rjmp	.-26     	; 0x1f7a <__addsf3x+0x38>
    1f94:	46 95       	lsr	r20
    1f96:	37 95       	ror	r19
    1f98:	27 95       	ror	r18
    1f9a:	a7 95       	ror	r26
    1f9c:	f0 40       	sbci	r31, 0x00	; 0
    1f9e:	53 95       	inc	r21
    1fa0:	c9 f7       	brne	.-14     	; 0x1f94 <__addsf3x+0x52>
    1fa2:	7e f4       	brtc	.+30     	; 0x1fc2 <__addsf3x+0x80>
    1fa4:	1f 16       	cp	r1, r31
    1fa6:	ba 0b       	sbc	r27, r26
    1fa8:	62 0b       	sbc	r22, r18
    1faa:	73 0b       	sbc	r23, r19
    1fac:	84 0b       	sbc	r24, r20
    1fae:	ba f0       	brmi	.+46     	; 0x1fde <__addsf3x+0x9c>
    1fb0:	91 50       	subi	r25, 0x01	; 1
    1fb2:	a1 f0       	breq	.+40     	; 0x1fdc <__addsf3x+0x9a>
    1fb4:	ff 0f       	add	r31, r31
    1fb6:	bb 1f       	adc	r27, r27
    1fb8:	66 1f       	adc	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	c2 f7       	brpl	.-16     	; 0x1fb0 <__addsf3x+0x6e>
    1fc0:	0e c0       	rjmp	.+28     	; 0x1fde <__addsf3x+0x9c>
    1fc2:	ba 0f       	add	r27, r26
    1fc4:	62 1f       	adc	r22, r18
    1fc6:	73 1f       	adc	r23, r19
    1fc8:	84 1f       	adc	r24, r20
    1fca:	48 f4       	brcc	.+18     	; 0x1fde <__addsf3x+0x9c>
    1fcc:	87 95       	ror	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	b7 95       	ror	r27
    1fd4:	f7 95       	ror	r31
    1fd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <__addsf3x+0x9a>
    1fda:	b0 cf       	rjmp	.-160    	; 0x1f3c <__addsf3+0x28>
    1fdc:	93 95       	inc	r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <__addsf3x+0xa2>
    1fe2:	99 27       	eor	r25, r25
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	97 95       	ror	r25
    1fe8:	87 95       	ror	r24
    1fea:	08 95       	ret

00001fec <__cmpsf2>:
    1fec:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__fp_cmp>
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <__cmpsf2+0x8>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	08 95       	ret

00001ff6 <__divsf3>:
    1ff6:	0e 94 0f 10 	call	0x201e	; 0x201e <__divsf3x>
    1ffa:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__fp_round>
    1ffe:	0e 94 0d 11 	call	0x221a	; 0x221a <__fp_pscB>
    2002:	58 f0       	brcs	.+22     	; 0x201a <__divsf3+0x24>
    2004:	0e 94 06 11 	call	0x220c	; 0x220c <__fp_pscA>
    2008:	40 f0       	brcs	.+16     	; 0x201a <__divsf3+0x24>
    200a:	29 f4       	brne	.+10     	; 0x2016 <__divsf3+0x20>
    200c:	5f 3f       	cpi	r21, 0xFF	; 255
    200e:	29 f0       	breq	.+10     	; 0x201a <__divsf3+0x24>
    2010:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__fp_inf>
    2014:	51 11       	cpse	r21, r1
    2016:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__fp_szero>
    201a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_nan>

0000201e <__divsf3x>:
    201e:	0e 94 25 11 	call	0x224a	; 0x224a <__fp_split3>
    2022:	68 f3       	brcs	.-38     	; 0x1ffe <__divsf3+0x8>

00002024 <__divsf3_pse>:
    2024:	99 23       	and	r25, r25
    2026:	b1 f3       	breq	.-20     	; 0x2014 <__divsf3+0x1e>
    2028:	55 23       	and	r21, r21
    202a:	91 f3       	breq	.-28     	; 0x2010 <__divsf3+0x1a>
    202c:	95 1b       	sub	r25, r21
    202e:	55 0b       	sbc	r21, r21
    2030:	bb 27       	eor	r27, r27
    2032:	aa 27       	eor	r26, r26
    2034:	62 17       	cp	r22, r18
    2036:	73 07       	cpc	r23, r19
    2038:	84 07       	cpc	r24, r20
    203a:	38 f0       	brcs	.+14     	; 0x204a <__divsf3_pse+0x26>
    203c:	9f 5f       	subi	r25, 0xFF	; 255
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	44 1f       	adc	r20, r20
    2046:	aa 1f       	adc	r26, r26
    2048:	a9 f3       	breq	.-22     	; 0x2034 <__divsf3_pse+0x10>
    204a:	35 d0       	rcall	.+106    	; 0x20b6 <__divsf3_pse+0x92>
    204c:	0e 2e       	mov	r0, r30
    204e:	3a f0       	brmi	.+14     	; 0x205e <__divsf3_pse+0x3a>
    2050:	e0 e8       	ldi	r30, 0x80	; 128
    2052:	32 d0       	rcall	.+100    	; 0x20b8 <__divsf3_pse+0x94>
    2054:	91 50       	subi	r25, 0x01	; 1
    2056:	50 40       	sbci	r21, 0x00	; 0
    2058:	e6 95       	lsr	r30
    205a:	00 1c       	adc	r0, r0
    205c:	ca f7       	brpl	.-14     	; 0x2050 <__divsf3_pse+0x2c>
    205e:	2b d0       	rcall	.+86     	; 0x20b6 <__divsf3_pse+0x92>
    2060:	fe 2f       	mov	r31, r30
    2062:	29 d0       	rcall	.+82     	; 0x20b6 <__divsf3_pse+0x92>
    2064:	66 0f       	add	r22, r22
    2066:	77 1f       	adc	r23, r23
    2068:	88 1f       	adc	r24, r24
    206a:	bb 1f       	adc	r27, r27
    206c:	26 17       	cp	r18, r22
    206e:	37 07       	cpc	r19, r23
    2070:	48 07       	cpc	r20, r24
    2072:	ab 07       	cpc	r26, r27
    2074:	b0 e8       	ldi	r27, 0x80	; 128
    2076:	09 f0       	breq	.+2      	; 0x207a <__divsf3_pse+0x56>
    2078:	bb 0b       	sbc	r27, r27
    207a:	80 2d       	mov	r24, r0
    207c:	bf 01       	movw	r22, r30
    207e:	ff 27       	eor	r31, r31
    2080:	93 58       	subi	r25, 0x83	; 131
    2082:	5f 4f       	sbci	r21, 0xFF	; 255
    2084:	3a f0       	brmi	.+14     	; 0x2094 <__divsf3_pse+0x70>
    2086:	9e 3f       	cpi	r25, 0xFE	; 254
    2088:	51 05       	cpc	r21, r1
    208a:	78 f0       	brcs	.+30     	; 0x20aa <__divsf3_pse+0x86>
    208c:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__fp_inf>
    2090:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__fp_szero>
    2094:	5f 3f       	cpi	r21, 0xFF	; 255
    2096:	e4 f3       	brlt	.-8      	; 0x2090 <__divsf3_pse+0x6c>
    2098:	98 3e       	cpi	r25, 0xE8	; 232
    209a:	d4 f3       	brlt	.-12     	; 0x2090 <__divsf3_pse+0x6c>
    209c:	86 95       	lsr	r24
    209e:	77 95       	ror	r23
    20a0:	67 95       	ror	r22
    20a2:	b7 95       	ror	r27
    20a4:	f7 95       	ror	r31
    20a6:	9f 5f       	subi	r25, 0xFF	; 255
    20a8:	c9 f7       	brne	.-14     	; 0x209c <__divsf3_pse+0x78>
    20aa:	88 0f       	add	r24, r24
    20ac:	91 1d       	adc	r25, r1
    20ae:	96 95       	lsr	r25
    20b0:	87 95       	ror	r24
    20b2:	97 f9       	bld	r25, 7
    20b4:	08 95       	ret
    20b6:	e1 e0       	ldi	r30, 0x01	; 1
    20b8:	66 0f       	add	r22, r22
    20ba:	77 1f       	adc	r23, r23
    20bc:	88 1f       	adc	r24, r24
    20be:	bb 1f       	adc	r27, r27
    20c0:	62 17       	cp	r22, r18
    20c2:	73 07       	cpc	r23, r19
    20c4:	84 07       	cpc	r24, r20
    20c6:	ba 07       	cpc	r27, r26
    20c8:	20 f0       	brcs	.+8      	; 0x20d2 <__divsf3_pse+0xae>
    20ca:	62 1b       	sub	r22, r18
    20cc:	73 0b       	sbc	r23, r19
    20ce:	84 0b       	sbc	r24, r20
    20d0:	ba 0b       	sbc	r27, r26
    20d2:	ee 1f       	adc	r30, r30
    20d4:	88 f7       	brcc	.-30     	; 0x20b8 <__divsf3_pse+0x94>
    20d6:	e0 95       	com	r30
    20d8:	08 95       	ret

000020da <__fixunssfsi>:
    20da:	0e 94 2d 11 	call	0x225a	; 0x225a <__fp_splitA>
    20de:	88 f0       	brcs	.+34     	; 0x2102 <__fixunssfsi+0x28>
    20e0:	9f 57       	subi	r25, 0x7F	; 127
    20e2:	98 f0       	brcs	.+38     	; 0x210a <__fixunssfsi+0x30>
    20e4:	b9 2f       	mov	r27, r25
    20e6:	99 27       	eor	r25, r25
    20e8:	b7 51       	subi	r27, 0x17	; 23
    20ea:	b0 f0       	brcs	.+44     	; 0x2118 <__fixunssfsi+0x3e>
    20ec:	e1 f0       	breq	.+56     	; 0x2126 <__fixunssfsi+0x4c>
    20ee:	66 0f       	add	r22, r22
    20f0:	77 1f       	adc	r23, r23
    20f2:	88 1f       	adc	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	1a f0       	brmi	.+6      	; 0x20fe <__fixunssfsi+0x24>
    20f8:	ba 95       	dec	r27
    20fa:	c9 f7       	brne	.-14     	; 0x20ee <__fixunssfsi+0x14>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <__fixunssfsi+0x4c>
    20fe:	b1 30       	cpi	r27, 0x01	; 1
    2100:	91 f0       	breq	.+36     	; 0x2126 <__fixunssfsi+0x4c>
    2102:	0e 94 47 11 	call	0x228e	; 0x228e <__fp_zero>
    2106:	b1 e0       	ldi	r27, 0x01	; 1
    2108:	08 95       	ret
    210a:	0c 94 47 11 	jmp	0x228e	; 0x228e <__fp_zero>
    210e:	67 2f       	mov	r22, r23
    2110:	78 2f       	mov	r23, r24
    2112:	88 27       	eor	r24, r24
    2114:	b8 5f       	subi	r27, 0xF8	; 248
    2116:	39 f0       	breq	.+14     	; 0x2126 <__fixunssfsi+0x4c>
    2118:	b9 3f       	cpi	r27, 0xF9	; 249
    211a:	cc f3       	brlt	.-14     	; 0x210e <__fixunssfsi+0x34>
    211c:	86 95       	lsr	r24
    211e:	77 95       	ror	r23
    2120:	67 95       	ror	r22
    2122:	b3 95       	inc	r27
    2124:	d9 f7       	brne	.-10     	; 0x211c <__fixunssfsi+0x42>
    2126:	3e f4       	brtc	.+14     	; 0x2136 <__fixunssfsi+0x5c>
    2128:	90 95       	com	r25
    212a:	80 95       	com	r24
    212c:	70 95       	com	r23
    212e:	61 95       	neg	r22
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8f 4f       	sbci	r24, 0xFF	; 255
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	08 95       	ret

00002138 <__floatunsisf>:
    2138:	e8 94       	clt
    213a:	09 c0       	rjmp	.+18     	; 0x214e <__floatsisf+0x12>

0000213c <__floatsisf>:
    213c:	97 fb       	bst	r25, 7
    213e:	3e f4       	brtc	.+14     	; 0x214e <__floatsisf+0x12>
    2140:	90 95       	com	r25
    2142:	80 95       	com	r24
    2144:	70 95       	com	r23
    2146:	61 95       	neg	r22
    2148:	7f 4f       	sbci	r23, 0xFF	; 255
    214a:	8f 4f       	sbci	r24, 0xFF	; 255
    214c:	9f 4f       	sbci	r25, 0xFF	; 255
    214e:	99 23       	and	r25, r25
    2150:	a9 f0       	breq	.+42     	; 0x217c <__floatsisf+0x40>
    2152:	f9 2f       	mov	r31, r25
    2154:	96 e9       	ldi	r25, 0x96	; 150
    2156:	bb 27       	eor	r27, r27
    2158:	93 95       	inc	r25
    215a:	f6 95       	lsr	r31
    215c:	87 95       	ror	r24
    215e:	77 95       	ror	r23
    2160:	67 95       	ror	r22
    2162:	b7 95       	ror	r27
    2164:	f1 11       	cpse	r31, r1
    2166:	f8 cf       	rjmp	.-16     	; 0x2158 <__floatsisf+0x1c>
    2168:	fa f4       	brpl	.+62     	; 0x21a8 <__floatsisf+0x6c>
    216a:	bb 0f       	add	r27, r27
    216c:	11 f4       	brne	.+4      	; 0x2172 <__floatsisf+0x36>
    216e:	60 ff       	sbrs	r22, 0
    2170:	1b c0       	rjmp	.+54     	; 0x21a8 <__floatsisf+0x6c>
    2172:	6f 5f       	subi	r22, 0xFF	; 255
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	16 c0       	rjmp	.+44     	; 0x21a8 <__floatsisf+0x6c>
    217c:	88 23       	and	r24, r24
    217e:	11 f0       	breq	.+4      	; 0x2184 <__floatsisf+0x48>
    2180:	96 e9       	ldi	r25, 0x96	; 150
    2182:	11 c0       	rjmp	.+34     	; 0x21a6 <__floatsisf+0x6a>
    2184:	77 23       	and	r23, r23
    2186:	21 f0       	breq	.+8      	; 0x2190 <__floatsisf+0x54>
    2188:	9e e8       	ldi	r25, 0x8E	; 142
    218a:	87 2f       	mov	r24, r23
    218c:	76 2f       	mov	r23, r22
    218e:	05 c0       	rjmp	.+10     	; 0x219a <__floatsisf+0x5e>
    2190:	66 23       	and	r22, r22
    2192:	71 f0       	breq	.+28     	; 0x21b0 <__floatsisf+0x74>
    2194:	96 e8       	ldi	r25, 0x86	; 134
    2196:	86 2f       	mov	r24, r22
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	2a f0       	brmi	.+10     	; 0x21a8 <__floatsisf+0x6c>
    219e:	9a 95       	dec	r25
    21a0:	66 0f       	add	r22, r22
    21a2:	77 1f       	adc	r23, r23
    21a4:	88 1f       	adc	r24, r24
    21a6:	da f7       	brpl	.-10     	; 0x219e <__floatsisf+0x62>
    21a8:	88 0f       	add	r24, r24
    21aa:	96 95       	lsr	r25
    21ac:	87 95       	ror	r24
    21ae:	97 f9       	bld	r25, 7
    21b0:	08 95       	ret

000021b2 <__fp_cmp>:
    21b2:	99 0f       	add	r25, r25
    21b4:	00 08       	sbc	r0, r0
    21b6:	55 0f       	add	r21, r21
    21b8:	aa 0b       	sbc	r26, r26
    21ba:	e0 e8       	ldi	r30, 0x80	; 128
    21bc:	fe ef       	ldi	r31, 0xFE	; 254
    21be:	16 16       	cp	r1, r22
    21c0:	17 06       	cpc	r1, r23
    21c2:	e8 07       	cpc	r30, r24
    21c4:	f9 07       	cpc	r31, r25
    21c6:	c0 f0       	brcs	.+48     	; 0x21f8 <__fp_cmp+0x46>
    21c8:	12 16       	cp	r1, r18
    21ca:	13 06       	cpc	r1, r19
    21cc:	e4 07       	cpc	r30, r20
    21ce:	f5 07       	cpc	r31, r21
    21d0:	98 f0       	brcs	.+38     	; 0x21f8 <__fp_cmp+0x46>
    21d2:	62 1b       	sub	r22, r18
    21d4:	73 0b       	sbc	r23, r19
    21d6:	84 0b       	sbc	r24, r20
    21d8:	95 0b       	sbc	r25, r21
    21da:	39 f4       	brne	.+14     	; 0x21ea <__fp_cmp+0x38>
    21dc:	0a 26       	eor	r0, r26
    21de:	61 f0       	breq	.+24     	; 0x21f8 <__fp_cmp+0x46>
    21e0:	23 2b       	or	r18, r19
    21e2:	24 2b       	or	r18, r20
    21e4:	25 2b       	or	r18, r21
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <__fp_cmp+0x3e>
    21e8:	08 95       	ret
    21ea:	0a 26       	eor	r0, r26
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__fp_cmp+0x3e>
    21ee:	a1 40       	sbci	r26, 0x01	; 1
    21f0:	a6 95       	lsr	r26
    21f2:	8f ef       	ldi	r24, 0xFF	; 255
    21f4:	81 1d       	adc	r24, r1
    21f6:	81 1d       	adc	r24, r1
    21f8:	08 95       	ret

000021fa <__fp_inf>:
    21fa:	97 f9       	bld	r25, 7
    21fc:	9f 67       	ori	r25, 0x7F	; 127
    21fe:	80 e8       	ldi	r24, 0x80	; 128
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	08 95       	ret

00002206 <__fp_nan>:
    2206:	9f ef       	ldi	r25, 0xFF	; 255
    2208:	80 ec       	ldi	r24, 0xC0	; 192
    220a:	08 95       	ret

0000220c <__fp_pscA>:
    220c:	00 24       	eor	r0, r0
    220e:	0a 94       	dec	r0
    2210:	16 16       	cp	r1, r22
    2212:	17 06       	cpc	r1, r23
    2214:	18 06       	cpc	r1, r24
    2216:	09 06       	cpc	r0, r25
    2218:	08 95       	ret

0000221a <__fp_pscB>:
    221a:	00 24       	eor	r0, r0
    221c:	0a 94       	dec	r0
    221e:	12 16       	cp	r1, r18
    2220:	13 06       	cpc	r1, r19
    2222:	14 06       	cpc	r1, r20
    2224:	05 06       	cpc	r0, r21
    2226:	08 95       	ret

00002228 <__fp_round>:
    2228:	09 2e       	mov	r0, r25
    222a:	03 94       	inc	r0
    222c:	00 0c       	add	r0, r0
    222e:	11 f4       	brne	.+4      	; 0x2234 <__fp_round+0xc>
    2230:	88 23       	and	r24, r24
    2232:	52 f0       	brmi	.+20     	; 0x2248 <__fp_round+0x20>
    2234:	bb 0f       	add	r27, r27
    2236:	40 f4       	brcc	.+16     	; 0x2248 <__fp_round+0x20>
    2238:	bf 2b       	or	r27, r31
    223a:	11 f4       	brne	.+4      	; 0x2240 <__fp_round+0x18>
    223c:	60 ff       	sbrs	r22, 0
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <__fp_round+0x20>
    2240:	6f 5f       	subi	r22, 0xFF	; 255
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8f 4f       	sbci	r24, 0xFF	; 255
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	08 95       	ret

0000224a <__fp_split3>:
    224a:	57 fd       	sbrc	r21, 7
    224c:	90 58       	subi	r25, 0x80	; 128
    224e:	44 0f       	add	r20, r20
    2250:	55 1f       	adc	r21, r21
    2252:	59 f0       	breq	.+22     	; 0x226a <__fp_splitA+0x10>
    2254:	5f 3f       	cpi	r21, 0xFF	; 255
    2256:	71 f0       	breq	.+28     	; 0x2274 <__fp_splitA+0x1a>
    2258:	47 95       	ror	r20

0000225a <__fp_splitA>:
    225a:	88 0f       	add	r24, r24
    225c:	97 fb       	bst	r25, 7
    225e:	99 1f       	adc	r25, r25
    2260:	61 f0       	breq	.+24     	; 0x227a <__fp_splitA+0x20>
    2262:	9f 3f       	cpi	r25, 0xFF	; 255
    2264:	79 f0       	breq	.+30     	; 0x2284 <__fp_splitA+0x2a>
    2266:	87 95       	ror	r24
    2268:	08 95       	ret
    226a:	12 16       	cp	r1, r18
    226c:	13 06       	cpc	r1, r19
    226e:	14 06       	cpc	r1, r20
    2270:	55 1f       	adc	r21, r21
    2272:	f2 cf       	rjmp	.-28     	; 0x2258 <__fp_split3+0xe>
    2274:	46 95       	lsr	r20
    2276:	f1 df       	rcall	.-30     	; 0x225a <__fp_splitA>
    2278:	08 c0       	rjmp	.+16     	; 0x228a <__fp_splitA+0x30>
    227a:	16 16       	cp	r1, r22
    227c:	17 06       	cpc	r1, r23
    227e:	18 06       	cpc	r1, r24
    2280:	99 1f       	adc	r25, r25
    2282:	f1 cf       	rjmp	.-30     	; 0x2266 <__fp_splitA+0xc>
    2284:	86 95       	lsr	r24
    2286:	71 05       	cpc	r23, r1
    2288:	61 05       	cpc	r22, r1
    228a:	08 94       	sec
    228c:	08 95       	ret

0000228e <__fp_zero>:
    228e:	e8 94       	clt

00002290 <__fp_szero>:
    2290:	bb 27       	eor	r27, r27
    2292:	66 27       	eor	r22, r22
    2294:	77 27       	eor	r23, r23
    2296:	cb 01       	movw	r24, r22
    2298:	97 f9       	bld	r25, 7
    229a:	08 95       	ret

0000229c <__mulsf3>:
    229c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__mulsf3x>
    22a0:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__fp_round>
    22a4:	0e 94 06 11 	call	0x220c	; 0x220c <__fp_pscA>
    22a8:	38 f0       	brcs	.+14     	; 0x22b8 <__mulsf3+0x1c>
    22aa:	0e 94 0d 11 	call	0x221a	; 0x221a <__fp_pscB>
    22ae:	20 f0       	brcs	.+8      	; 0x22b8 <__mulsf3+0x1c>
    22b0:	95 23       	and	r25, r21
    22b2:	11 f0       	breq	.+4      	; 0x22b8 <__mulsf3+0x1c>
    22b4:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__fp_inf>
    22b8:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_nan>
    22bc:	11 24       	eor	r1, r1
    22be:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__fp_szero>

000022c2 <__mulsf3x>:
    22c2:	0e 94 25 11 	call	0x224a	; 0x224a <__fp_split3>
    22c6:	70 f3       	brcs	.-36     	; 0x22a4 <__mulsf3+0x8>

000022c8 <__mulsf3_pse>:
    22c8:	95 9f       	mul	r25, r21
    22ca:	c1 f3       	breq	.-16     	; 0x22bc <__mulsf3+0x20>
    22cc:	95 0f       	add	r25, r21
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	55 1f       	adc	r21, r21
    22d2:	62 9f       	mul	r22, r18
    22d4:	f0 01       	movw	r30, r0
    22d6:	72 9f       	mul	r23, r18
    22d8:	bb 27       	eor	r27, r27
    22da:	f0 0d       	add	r31, r0
    22dc:	b1 1d       	adc	r27, r1
    22de:	63 9f       	mul	r22, r19
    22e0:	aa 27       	eor	r26, r26
    22e2:	f0 0d       	add	r31, r0
    22e4:	b1 1d       	adc	r27, r1
    22e6:	aa 1f       	adc	r26, r26
    22e8:	64 9f       	mul	r22, r20
    22ea:	66 27       	eor	r22, r22
    22ec:	b0 0d       	add	r27, r0
    22ee:	a1 1d       	adc	r26, r1
    22f0:	66 1f       	adc	r22, r22
    22f2:	82 9f       	mul	r24, r18
    22f4:	22 27       	eor	r18, r18
    22f6:	b0 0d       	add	r27, r0
    22f8:	a1 1d       	adc	r26, r1
    22fa:	62 1f       	adc	r22, r18
    22fc:	73 9f       	mul	r23, r19
    22fe:	b0 0d       	add	r27, r0
    2300:	a1 1d       	adc	r26, r1
    2302:	62 1f       	adc	r22, r18
    2304:	83 9f       	mul	r24, r19
    2306:	a0 0d       	add	r26, r0
    2308:	61 1d       	adc	r22, r1
    230a:	22 1f       	adc	r18, r18
    230c:	74 9f       	mul	r23, r20
    230e:	33 27       	eor	r19, r19
    2310:	a0 0d       	add	r26, r0
    2312:	61 1d       	adc	r22, r1
    2314:	23 1f       	adc	r18, r19
    2316:	84 9f       	mul	r24, r20
    2318:	60 0d       	add	r22, r0
    231a:	21 1d       	adc	r18, r1
    231c:	82 2f       	mov	r24, r18
    231e:	76 2f       	mov	r23, r22
    2320:	6a 2f       	mov	r22, r26
    2322:	11 24       	eor	r1, r1
    2324:	9f 57       	subi	r25, 0x7F	; 127
    2326:	50 40       	sbci	r21, 0x00	; 0
    2328:	9a f0       	brmi	.+38     	; 0x2350 <__mulsf3_pse+0x88>
    232a:	f1 f0       	breq	.+60     	; 0x2368 <__mulsf3_pse+0xa0>
    232c:	88 23       	and	r24, r24
    232e:	4a f0       	brmi	.+18     	; 0x2342 <__mulsf3_pse+0x7a>
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	bb 1f       	adc	r27, r27
    2336:	66 1f       	adc	r22, r22
    2338:	77 1f       	adc	r23, r23
    233a:	88 1f       	adc	r24, r24
    233c:	91 50       	subi	r25, 0x01	; 1
    233e:	50 40       	sbci	r21, 0x00	; 0
    2340:	a9 f7       	brne	.-22     	; 0x232c <__mulsf3_pse+0x64>
    2342:	9e 3f       	cpi	r25, 0xFE	; 254
    2344:	51 05       	cpc	r21, r1
    2346:	80 f0       	brcs	.+32     	; 0x2368 <__mulsf3_pse+0xa0>
    2348:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__fp_inf>
    234c:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__fp_szero>
    2350:	5f 3f       	cpi	r21, 0xFF	; 255
    2352:	e4 f3       	brlt	.-8      	; 0x234c <__mulsf3_pse+0x84>
    2354:	98 3e       	cpi	r25, 0xE8	; 232
    2356:	d4 f3       	brlt	.-12     	; 0x234c <__mulsf3_pse+0x84>
    2358:	86 95       	lsr	r24
    235a:	77 95       	ror	r23
    235c:	67 95       	ror	r22
    235e:	b7 95       	ror	r27
    2360:	f7 95       	ror	r31
    2362:	e7 95       	ror	r30
    2364:	9f 5f       	subi	r25, 0xFF	; 255
    2366:	c1 f7       	brne	.-16     	; 0x2358 <__mulsf3_pse+0x90>
    2368:	fe 2b       	or	r31, r30
    236a:	88 0f       	add	r24, r24
    236c:	91 1d       	adc	r25, r1
    236e:	96 95       	lsr	r25
    2370:	87 95       	ror	r24
    2372:	97 f9       	bld	r25, 7
    2374:	08 95       	ret

00002376 <__udivmodsi4>:
    2376:	a1 e2       	ldi	r26, 0x21	; 33
    2378:	1a 2e       	mov	r1, r26
    237a:	aa 1b       	sub	r26, r26
    237c:	bb 1b       	sub	r27, r27
    237e:	fd 01       	movw	r30, r26
    2380:	0d c0       	rjmp	.+26     	; 0x239c <__udivmodsi4_ep>

00002382 <__udivmodsi4_loop>:
    2382:	aa 1f       	adc	r26, r26
    2384:	bb 1f       	adc	r27, r27
    2386:	ee 1f       	adc	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	a2 17       	cp	r26, r18
    238c:	b3 07       	cpc	r27, r19
    238e:	e4 07       	cpc	r30, r20
    2390:	f5 07       	cpc	r31, r21
    2392:	20 f0       	brcs	.+8      	; 0x239c <__udivmodsi4_ep>
    2394:	a2 1b       	sub	r26, r18
    2396:	b3 0b       	sbc	r27, r19
    2398:	e4 0b       	sbc	r30, r20
    239a:	f5 0b       	sbc	r31, r21

0000239c <__udivmodsi4_ep>:
    239c:	66 1f       	adc	r22, r22
    239e:	77 1f       	adc	r23, r23
    23a0:	88 1f       	adc	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	1a 94       	dec	r1
    23a6:	69 f7       	brne	.-38     	; 0x2382 <__udivmodsi4_loop>
    23a8:	60 95       	com	r22
    23aa:	70 95       	com	r23
    23ac:	80 95       	com	r24
    23ae:	90 95       	com	r25
    23b0:	9b 01       	movw	r18, r22
    23b2:	ac 01       	movw	r20, r24
    23b4:	bd 01       	movw	r22, r26
    23b6:	cf 01       	movw	r24, r30
    23b8:	08 95       	ret

000023ba <__umulhisi3>:
    23ba:	a2 9f       	mul	r26, r18
    23bc:	b0 01       	movw	r22, r0
    23be:	b3 9f       	mul	r27, r19
    23c0:	c0 01       	movw	r24, r0
    23c2:	a3 9f       	mul	r26, r19
    23c4:	70 0d       	add	r23, r0
    23c6:	81 1d       	adc	r24, r1
    23c8:	11 24       	eor	r1, r1
    23ca:	91 1d       	adc	r25, r1
    23cc:	b2 9f       	mul	r27, r18
    23ce:	70 0d       	add	r23, r0
    23d0:	81 1d       	adc	r24, r1
    23d2:	11 24       	eor	r1, r1
    23d4:	91 1d       	adc	r25, r1
    23d6:	08 95       	ret

000023d8 <_exit>:
    23d8:	f8 94       	cli

000023da <__stop_program>:
    23da:	ff cf       	rjmp	.-2      	; 0x23da <__stop_program>
