
Obstacle Avoidance Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000e78  00000f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080006c  0080006c  00000f18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a6  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c23  00000000  00000000  000028fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001119  00000000  00000000  0000351d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00004638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097e  00000000  00000000  00004ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018cb  00000000  00000000  00005526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006df1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_1>
   8:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_2>
   c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_10>
  2c:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_initialization>:
 Description: Function Control DCM with one of DCM Modes.
*/ 
void APP_initialization(void)
{
	/* MCAL Initialization */
	GLI_enableGIE();
  92:	0e 94 73 02 	call	0x4e6	; 0x4e6 <GLI_enableGIE>
	//
	// 	u8_gs_appMode = APP_CAR_STOP;
	//LCD_init();
	//KPD_initialization();
	 
	DCM_initialization( ast_g_DCMs );
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 57 00 	call	0xae	; 0xae <DCM_initialization>
	//
	// 	PWM_generatePWM( 50 );
	//
	// 	TMR2_PWM_Init (1, 3, 0);
	// 	TMR2_PWM_start(50);
	DCM_controlDCM( &ast_g_DCMs[0], DCM_U8_ROTATE_CCW, 10 );
  9e:	4a e0       	ldi	r20, 0x0A	; 10
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 94 00 	call	0x128	; 0x128 <DCM_controlDCM>
  aa:	08 95       	ret

000000ac <APP_startProgram>:
 Input: 
 Output: 
 Description: 
*/
void APP_startProgram(void)
{
  ac:	ff cf       	rjmp	.-2      	; 0xac <APP_startProgram>

000000ae <DCM_initialization>:
 Input: void
 Output: void
 Description: Function to Initialize DCM peripheral.
*/
void DCM_initialization( DCM_ST_CONFIG *st_a_DCMConfig )
{	
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	7c 01       	movw	r14, r24
	/* Initialize initial value of left DCM, in both Direction Pins */	
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2A, HIGH );
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2B, LOW );

	/* Method 2: Linking Configuration Initialization */
	for ( u8 u8_l_index = 0; u8_l_index < DCM_U8_NUMBER_OF_DCM; u8_l_index++ )
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	2d c0       	rjmp	.+90     	; 0x118 <DCM_initialization+0x6a>
	{
		/* Initialize initial direction of DCM, in both Direction and PWM Pins */
		DIO_init ( st_a_DCMConfig[u8_l_index].u8_g_directionCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCWPin  , OUT );
  be:	c1 2f       	mov	r28, r17
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	ce 01       	movw	r24, r28
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	c8 0f       	add	r28, r24
  ca:	d9 1f       	adc	r29, r25
  cc:	cc 0f       	add	r28, r28
  ce:	dd 1f       	adc	r29, r29
  d0:	ce 0d       	add	r28, r14
  d2:	df 1d       	adc	r29, r15
  d4:	69 81       	ldd	r22, Y+1	; 0x01
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	88 81       	ld	r24, Y
  da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
		DIO_init ( st_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, OUT );
  de:	6b 81       	ldd	r22, Y+3	; 0x03
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
		DIO_init ( st_a_DCMConfig[u8_l_index].u8_g_pwmPort, st_a_DCMConfig[u8_l_index].u8_g_pwmPin, OUT );
  e8:	6d 81       	ldd	r22, Y+5	; 0x05
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	8c 81       	ldd	r24, Y+4	; 0x04
  ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
	
		/* Initialize initial value of DCM, in both Direction Pins */
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCWPin  , LOW );
  f2:	69 81       	ldd	r22, Y+1	; 0x01
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	88 81       	ld	r24, Y
  f8:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, HIGH );
  fc:	6b 81       	ldd	r22, Y+3	; 0x03
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
		TMR2_PWM_Init( 0.2, st_a_DCMConfig[u8_l_index].u8_g_pwmPort, st_a_DCMConfig[u8_l_index].u8_g_pwmPin );
 106:	2d 81       	ldd	r18, Y+5	; 0x05
 108:	4c 81       	ldd	r20, Y+4	; 0x04
 10a:	6d ec       	ldi	r22, 0xCD	; 205
 10c:	7c ec       	ldi	r23, 0xCC	; 204
 10e:	8c e4       	ldi	r24, 0x4C	; 76
 110:	9e e3       	ldi	r25, 0x3E	; 62
 112:	0e 94 36 04 	call	0x86c	; 0x86c <TMR2_PWM_Init>
	/* Initialize initial value of left DCM, in both Direction Pins */	
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2A, HIGH );
// 	DIO_write( DCM_U8_DCM_L_DIR_PORT, DCM_U8_DCM_L_DIR_PIN_2B, LOW );

	/* Method 2: Linking Configuration Initialization */
	for ( u8 u8_l_index = 0; u8_l_index < DCM_U8_NUMBER_OF_DCM; u8_l_index++ )
 116:	1f 5f       	subi	r17, 0xFF	; 255
 118:	12 30       	cpi	r17, 0x02	; 2
 11a:	88 f2       	brcs	.-94     	; 0xbe <DCM_initialization+0x10>
		/* Initialize initial value of DCM, in both Direction Pins */
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCWPin  , LOW );
		DIO_write ( st_a_DCMConfig[u8_l_index].u8_g_directionCCWPort, st_a_DCMConfig[u8_l_index].u8_g_directionCCWPin, HIGH );
		TMR2_PWM_Init( 0.2, st_a_DCMConfig[u8_l_index].u8_g_pwmPort, st_a_DCMConfig[u8_l_index].u8_g_pwmPin );
	}
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	08 95       	ret

00000128 <DCM_controlDCM>:
 Input: Pointer to st DCMConfig, u8 ControlMode, and u8 SpeedPercentage
 Output: u8 Error or No Error
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM      ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode, u8 u8_a_speedPercentage )
{
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: Pointer is not equal to NULL, and ControlMode and SpeedPercentage are in the valid range */
	if ( ( pst_a_DCMConfig != NULL ) && ( u8_a_controlMode <= DCM_U8_ROTATE_CCW ) && ( u8_a_speedPercentage <= 100 ) )
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	89 f1       	breq	.+98     	; 0x194 <DCM_controlDCM+0x6c>
 132:	63 30       	cpi	r22, 0x03	; 3
 134:	88 f5       	brcc	.+98     	; 0x198 <DCM_controlDCM+0x70>
 136:	45 36       	cpi	r20, 0x65	; 101
 138:	88 f5       	brcc	.+98     	; 0x19c <DCM_controlDCM+0x74>
 13a:	14 2f       	mov	r17, r20
 13c:	ec 01       	movw	r28, r24
	{
		switch ( u8_a_controlMode )
 13e:	61 30       	cpi	r22, 0x01	; 1
 140:	79 f0       	breq	.+30     	; 0x160 <DCM_controlDCM+0x38>
 142:	18 f0       	brcs	.+6      	; 0x14a <DCM_controlDCM+0x22>
 144:	62 30       	cpi	r22, 0x02	; 2
 146:	b9 f0       	breq	.+46     	; 0x176 <DCM_controlDCM+0x4e>
 148:	20 c0       	rjmp	.+64     	; 0x18a <DCM_controlDCM+0x62>
		{
			case DCM_U8_STOP:
			DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , LOW );
 14a:	69 81       	ldd	r22, Y+1	; 0x01
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	88 81       	ld	r24, Y
 150:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW );
 154:	6b 81       	ldd	r22, Y+3	; 0x03
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			break;
 15e:	15 c0       	rjmp	.+42     	; 0x18a <DCM_controlDCM+0x62>
			
			case DCM_U8_ROTATE_CW:
			DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , HIGH );
 160:	69 81       	ldd	r22, Y+1	; 0x01
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	88 81       	ld	r24, Y
 166:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, LOW  );
 16a:	6b 81       	ldd	r22, Y+3	; 0x03
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			break;
 174:	0a c0       	rjmp	.+20     	; 0x18a <DCM_controlDCM+0x62>
			
			case DCM_U8_ROTATE_CCW:
			DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , LOW  );
 176:	69 81       	ldd	r22, Y+1	; 0x01
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	88 81       	ld	r24, Y
 17c:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, HIGH );
 180:	6b 81       	ldd	r22, Y+3	; 0x03
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
			break;
		}
		
		TMR2_PWM_start( u8_a_speedPercentage );
 18a:	81 2f       	mov	r24, r17
 18c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <TMR2_PWM_start>
 Description: Function Control DCM with one of DCM Modes.
*/
u8 DCM_controlDCM      ( DCM_ST_CONFIG *pst_a_DCMConfig, u8 u8_a_controlMode, u8 u8_a_speedPercentage )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
 190:	81 e0       	ldi	r24, 0x01	; 1
			DIO_write( pst_a_DCMConfig->u8_g_directionCWPort, pst_a_DCMConfig->u8_g_directionCWPin , LOW  );
			DIO_write( pst_a_DCMConfig->u8_g_directionCCWPort, pst_a_DCMConfig->u8_g_directionCCWPin, HIGH );
			break;
		}
		
		TMR2_PWM_start( u8_a_speedPercentage );
 192:	05 c0       	rjmp	.+10     	; 0x19e <DCM_controlDCM+0x76>
	}
	/* Check 2: Pointer is equal to NULL, or ControlMode or SpeedPercentage is not in the valid range */
	else
	{
		/* Update error state = NOK, Pointer is NULL, or wrong ControlMode or SpeedPercentage! */
		u8_l_errorState = STD_TYPES_NOK;
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	03 c0       	rjmp	.+6      	; 0x19e <DCM_controlDCM+0x76>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	01 c0       	rjmp	.+2      	; 0x19e <DCM_controlDCM+0x76>
 19c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	08 95       	ret

000001a6 <main>:
/* Main */
#include "main.h"

int main(void)
{
	APP_initialization();
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <APP_initialization>
	APP_startProgram();
 1aa:	0e 94 56 00 	call	0xac	; 0xac <APP_startProgram>
	
	return 0;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	08 95       	ret

000001b4 <DIO_init>:
		break;
		case C:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PINC_REG , en_a_pinNumber );
		break;
		case D:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PIND_REG , en_a_pinNumber );
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	11 f1       	breq	.+68     	; 0x1fc <DIO_init+0x48>
 1b8:	30 f0       	brcs	.+12     	; 0x1c6 <DIO_init+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	d1 f1       	breq	.+116    	; 0x232 <DIO_init+0x7e>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_init+0x10>
 1c2:	52 c0       	rjmp	.+164    	; 0x268 <DIO_init+0xb4>
 1c4:	08 95       	ret
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_init+0x2c>
 1ca:	2a b3       	in	r18, 0x1a	; 26
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_init+0x22>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_init+0x1e>
 1da:	82 2b       	or	r24, r18
 1dc:	8a bb       	out	0x1a, r24	; 26
 1de:	08 95       	ret
 1e0:	41 11       	cpse	r20, r1
 1e2:	5c c0       	rjmp	.+184    	; 0x29c <DIO_init+0xe8>
 1e4:	2a b3       	in	r18, 0x1a	; 26
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_init+0x3c>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_init+0x38>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	8a bb       	out	0x1a, r24	; 26
 1fa:	08 95       	ret
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	59 f4       	brne	.+22     	; 0x216 <DIO_init+0x62>
 200:	27 b3       	in	r18, 0x17	; 23
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_init+0x58>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_init+0x54>
 210:	82 2b       	or	r24, r18
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
 216:	41 11       	cpse	r20, r1
 218:	41 c0       	rjmp	.+130    	; 0x29c <DIO_init+0xe8>
 21a:	27 b3       	in	r18, 0x17	; 23
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_init+0x72>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_init+0x6e>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	87 bb       	out	0x17, r24	; 23
 230:	08 95       	ret
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	59 f4       	brne	.+22     	; 0x24c <DIO_init+0x98>
 236:	24 b3       	in	r18, 0x14	; 20
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_init+0x8e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_init+0x8a>
 246:	82 2b       	or	r24, r18
 248:	84 bb       	out	0x14, r24	; 20
 24a:	08 95       	ret
 24c:	41 11       	cpse	r20, r1
 24e:	26 c0       	rjmp	.+76     	; 0x29c <DIO_init+0xe8>
 250:	24 b3       	in	r18, 0x14	; 20
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0xa8>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0xa4>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	84 bb       	out	0x14, r24	; 20
 266:	08 95       	ret
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_init+0xce>
 26c:	21 b3       	in	r18, 0x11	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_init+0xc4>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_init+0xc0>
 27c:	82 2b       	or	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret
 282:	41 11       	cpse	r20, r1
 284:	0b c0       	rjmp	.+22     	; 0x29c <DIO_init+0xe8>
 286:	21 b3       	in	r18, 0x11	; 17
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_init+0xde>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_init+0xda>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	81 bb       	out	0x11, r24	; 17
 29c:	08 95       	ret

0000029e <DIO_write>:
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	11 f1       	breq	.+68     	; 0x2e6 <DIO_write+0x48>
 2a2:	30 f0       	brcs	.+12     	; 0x2b0 <DIO_write+0x12>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	d1 f1       	breq	.+116    	; 0x31c <DIO_write+0x7e>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_write+0x10>
 2ac:	52 c0       	rjmp	.+164    	; 0x352 <DIO_write+0xb4>
 2ae:	08 95       	ret
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_write+0x2c>
 2b4:	2b b3       	in	r18, 0x1b	; 27
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write+0x22>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write+0x1e>
 2c4:	82 2b       	or	r24, r18
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret
 2ca:	41 11       	cpse	r20, r1
 2cc:	5c c0       	rjmp	.+184    	; 0x386 <DIO_write+0xe8>
 2ce:	2b b3       	in	r18, 0x1b	; 27
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write+0x3c>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write+0x38>
 2de:	80 95       	com	r24
 2e0:	82 23       	and	r24, r18
 2e2:	8b bb       	out	0x1b, r24	; 27
 2e4:	08 95       	ret
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	59 f4       	brne	.+22     	; 0x300 <DIO_write+0x62>
 2ea:	28 b3       	in	r18, 0x18	; 24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_write+0x58>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_write+0x54>
 2fa:	82 2b       	or	r24, r18
 2fc:	88 bb       	out	0x18, r24	; 24
 2fe:	08 95       	ret
 300:	41 11       	cpse	r20, r1
 302:	41 c0       	rjmp	.+130    	; 0x386 <DIO_write+0xe8>
 304:	28 b3       	in	r18, 0x18	; 24
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_write+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_write+0x6e>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	88 bb       	out	0x18, r24	; 24
 31a:	08 95       	ret
 31c:	41 30       	cpi	r20, 0x01	; 1
 31e:	59 f4       	brne	.+22     	; 0x336 <DIO_write+0x98>
 320:	25 b3       	in	r18, 0x15	; 21
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_write+0x8e>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_write+0x8a>
 330:	82 2b       	or	r24, r18
 332:	85 bb       	out	0x15, r24	; 21
 334:	08 95       	ret
 336:	41 11       	cpse	r20, r1
 338:	26 c0       	rjmp	.+76     	; 0x386 <DIO_write+0xe8>
 33a:	25 b3       	in	r18, 0x15	; 21
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_write+0xa8>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_write+0xa4>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	85 bb       	out	0x15, r24	; 21
 350:	08 95       	ret
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	59 f4       	brne	.+22     	; 0x36c <DIO_write+0xce>
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_write+0xc4>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_write+0xc0>
 366:	82 2b       	or	r24, r18
 368:	82 bb       	out	0x12, r24	; 18
 36a:	08 95       	ret
 36c:	41 11       	cpse	r20, r1
 36e:	0b c0       	rjmp	.+22     	; 0x386 <DIO_write+0xe8>
 370:	22 b3       	in	r18, 0x12	; 18
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_write+0xde>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_write+0xda>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	82 bb       	out	0x12, r24	; 18
 386:	08 95       	ret

00000388 <DIO_toggle>:
 Output: void
 Description: Function to toggle Pin value.
*/
void DIO_toggle ( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber )
{
	switch(en_a_portNumber)
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	89 f0       	breq	.+34     	; 0x3ae <DIO_toggle+0x26>
 38c:	28 f0       	brcs	.+10     	; 0x398 <DIO_toggle+0x10>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	c9 f0       	breq	.+50     	; 0x3c4 <DIO_toggle+0x3c>
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	11 f1       	breq	.+68     	; 0x3da <DIO_toggle+0x52>
 396:	08 95       	ret
	{
		case A:
			TOG_BIT( DIO_U8_PORTA_REG , en_a_pinNumber );
 398:	2b b3       	in	r18, 0x1b	; 27
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_toggle+0x1c>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_toggle+0x18>
 3a8:	82 27       	eor	r24, r18
 3aa:	8b bb       	out	0x1b, r24	; 27
		break;
 3ac:	08 95       	ret
		case B:
			TOG_BIT( DIO_U8_PORTB_REG , en_a_pinNumber );
 3ae:	28 b3       	in	r18, 0x18	; 24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_toggle+0x32>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_toggle+0x2e>
 3be:	82 27       	eor	r24, r18
 3c0:	88 bb       	out	0x18, r24	; 24
		break;
 3c2:	08 95       	ret
		case C:
			TOG_BIT( DIO_U8_PORTC_REG , en_a_pinNumber );
 3c4:	25 b3       	in	r18, 0x15	; 21
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_toggle+0x48>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_toggle+0x44>
 3d4:	82 27       	eor	r24, r18
 3d6:	85 bb       	out	0x15, r24	; 21
		break;
 3d8:	08 95       	ret
		case D:
			TOG_BIT( DIO_U8_PORTD_REG , en_a_pinNumber );
 3da:	22 b3       	in	r18, 0x12	; 18
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_toggle+0x5e>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_toggle+0x5a>
 3ea:	82 27       	eor	r24, r18
 3ec:	82 bb       	out	0x12, r24	; 18
 3ee:	08 95       	ret

000003f0 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
 412:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 416:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0x1>
 41a:	30 97       	sbiw	r30, 0x00	; 0
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT0]();
 41e:	09 95       	icall
	}	
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
 464:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end+0x2>
 468:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x3>
 46c:	30 97       	sbiw	r30, 0x00	; 0
 46e:	09 f0       	breq	.+2      	; 0x472 <__vector_2+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT1]();
 470:	09 95       	icall
	}	
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
 4b6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x4>
 4ba:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x5>
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__vector_3+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT2]();
 4c2:	09 95       	icall
	}	
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <GLI_enableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
void GLI_enableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
 4e6:	8f b7       	in	r24, 0x3f	; 63
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	8f bf       	out	0x3f, r24	; 63
 4ec:	08 95       	ret

000004ee <__vector_10>:
		g_timeout_flag=0;				//set flag to default
		TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
}

ISR_HANDLER(TMR0_CMP)
{
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
	if(NO_OF_OVERFLOWS > 0)
 4fc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <NO_OF_OVERFLOWS>
 500:	88 23       	and	r24, r24
 502:	99 f0       	breq	.+38     	; 0x52a <__vector_10+0x3c>
	{
		g_tick++;
 504:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <g_tick>
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_tick>
		if(g_tick==NO_OF_OVERFLOWS)
 50e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <g_tick>
 512:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <NO_OF_OVERFLOWS>
 516:	98 13       	cpse	r25, r24
 518:	11 c0       	rjmp	.+34     	; 0x53c <__vector_10+0x4e>
		{
			g_timeout_flag++;
 51a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <g_timeout_flag>
 51e:	8f 5f       	subi	r24, 0xFF	; 255
 520:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <g_timeout_flag>
			g_tick = 0;			//clear the tick counter again to start new count				
 524:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <g_tick>
 528:	09 c0       	rjmp	.+18     	; 0x53c <__vector_10+0x4e>
		}
	}
	else
	{
		g_timeout_flag++;
 52a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <g_timeout_flag>
 52e:	8f 5f       	subi	r24, 0xFF	; 255
 530:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <g_timeout_flag>
		TCNT0=0;
 534:	12 be       	out	0x32, r1	; 50
		OCR0=g_initial_value;
 536:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <g_initial_value>
 53a:	8c bf       	out	0x3c, r24	; 60
	}
}
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_11>:

ISR_HANDLER(TMR0_OVF)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	if(g_callBackPtr_0 != NULL)
 56c:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <g_callBackPtr_0>
 570:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <g_callBackPtr_0+0x1>
 574:	30 97       	sbiw	r30, 0x00	; 0
 576:	b9 f0       	breq	.+46     	; 0x5a6 <__vector_11+0x5c>
	{
		if(NO_OF_OVERFLOWS > 0)
 578:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <NO_OF_OVERFLOWS>
 57c:	88 23       	and	r24, r24
 57e:	79 f0       	breq	.+30     	; 0x59e <__vector_11+0x54>
		{
			g_tick++;
 580:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <g_tick>
 584:	8f 5f       	subi	r24, 0xFF	; 255
 586:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_tick>
			if(g_tick == NO_OF_OVERFLOWS)
 58a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <g_tick>
 58e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <NO_OF_OVERFLOWS>
 592:	98 13       	cpse	r25, r24
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <__vector_11+0x5c>
			{
				g_callBackPtr_0();
 596:	09 95       	icall
				g_tick = 0; //clear the tick counter again to start new count
 598:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <g_tick>
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <__vector_11+0x5c>
			}
		}
		else
		{
			g_callBackPtr_0();
 59e:	09 95       	icall
			TCNT0=g_initial_value;
 5a0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <g_initial_value>
 5a4:	82 bf       	out	0x32, r24	; 50
		}
	}
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <calc_prescaler>:
}



static u8 calc_prescaler(f32 delay,u16* prescaler)
{
 5c8:	cf 92       	push	r12
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	6b 01       	movw	r12, r22
 5d6:	7c 01       	movw	r14, r24
 5d8:	ea 01       	movw	r28, r20
	if(delay <= MAX_DELAY_MS(P_1024))
 5da:	2f e6       	ldi	r18, 0x6F	; 111
 5dc:	32 e1       	ldi	r19, 0x12	; 18
 5de:	43 e0       	ldi	r20, 0x03	; 3
 5e0:	52 e4       	ldi	r21, 0x42	; 66
 5e2:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 5e6:	18 16       	cp	r1, r24
 5e8:	0c f4       	brge	.+2      	; 0x5ec <calc_prescaler+0x24>
 5ea:	73 c0       	rjmp	.+230    	; 0x6d2 <calc_prescaler+0x10a>
	{
		if(delay <= MAX_DELAY_MS(P_1))
 5ec:	2f e6       	ldi	r18, 0x6F	; 111
 5ee:	32 e1       	ldi	r19, 0x12	; 18
 5f0:	43 e0       	ldi	r20, 0x03	; 3
 5f2:	5d e3       	ldi	r21, 0x3D	; 61
 5f4:	c7 01       	movw	r24, r14
 5f6:	b6 01       	movw	r22, r12
 5f8:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 5fc:	18 16       	cp	r1, r24
 5fe:	2c f0       	brlt	.+10     	; 0x60a <calc_prescaler+0x42>
		*prescaler=P_1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	99 83       	std	Y+1, r25	; 0x01
 606:	88 83       	st	Y, r24
 608:	65 c0       	rjmp	.+202    	; 0x6d4 <calc_prescaler+0x10c>
		else if(delay <= MAX_DELAY_MS(P_8))
 60a:	2f e6       	ldi	r18, 0x6F	; 111
 60c:	32 e1       	ldi	r19, 0x12	; 18
 60e:	43 e8       	ldi	r20, 0x83	; 131
 610:	5e e3       	ldi	r21, 0x3E	; 62
 612:	c7 01       	movw	r24, r14
 614:	b6 01       	movw	r22, r12
 616:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 61a:	18 16       	cp	r1, r24
 61c:	34 f0       	brlt	.+12     	; 0x62a <calc_prescaler+0x62>
		*prescaler=P_8;
 61e:	88 e0       	ldi	r24, 0x08	; 8
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	99 83       	std	Y+1, r25	; 0x01
 624:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return TRUE;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	55 c0       	rjmp	.+170    	; 0x6d4 <calc_prescaler+0x10c>
	{
		if(delay <= MAX_DELAY_MS(P_1))
		*prescaler=P_1;
		else if(delay <= MAX_DELAY_MS(P_8))
		*prescaler=P_8;
		else if(delay <= MAX_DELAY_MS(P_32))
 62a:	2f e6       	ldi	r18, 0x6F	; 111
 62c:	32 e1       	ldi	r19, 0x12	; 18
 62e:	43 e8       	ldi	r20, 0x83	; 131
 630:	5f e3       	ldi	r21, 0x3F	; 63
 632:	c7 01       	movw	r24, r14
 634:	b6 01       	movw	r22, r12
 636:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 63a:	18 16       	cp	r1, r24
 63c:	34 f0       	brlt	.+12     	; 0x64a <calc_prescaler+0x82>
		*prescaler=P_32;
 63e:	80 e2       	ldi	r24, 0x20	; 32
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	99 83       	std	Y+1, r25	; 0x01
 644:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return TRUE;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	45 c0       	rjmp	.+138    	; 0x6d4 <calc_prescaler+0x10c>
		*prescaler=P_1;
		else if(delay <= MAX_DELAY_MS(P_8))
		*prescaler=P_8;
		else if(delay <= MAX_DELAY_MS(P_32))
		*prescaler=P_32;
		else if(delay <= MAX_DELAY_MS(P_64))
 64a:	2f e6       	ldi	r18, 0x6F	; 111
 64c:	32 e1       	ldi	r19, 0x12	; 18
 64e:	43 e0       	ldi	r20, 0x03	; 3
 650:	50 e4       	ldi	r21, 0x40	; 64
 652:	c7 01       	movw	r24, r14
 654:	b6 01       	movw	r22, r12
 656:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 65a:	18 16       	cp	r1, r24
 65c:	34 f0       	brlt	.+12     	; 0x66a <calc_prescaler+0xa2>
		*prescaler=P_64;
 65e:	80 e4       	ldi	r24, 0x40	; 64
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	99 83       	std	Y+1, r25	; 0x01
 664:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return TRUE;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	35 c0       	rjmp	.+106    	; 0x6d4 <calc_prescaler+0x10c>
		*prescaler=P_8;
		else if(delay <= MAX_DELAY_MS(P_32))
		*prescaler=P_32;
		else if(delay <= MAX_DELAY_MS(P_64))
		*prescaler=P_64;
		else if(delay <= MAX_DELAY_MS(P_128))
 66a:	2f e6       	ldi	r18, 0x6F	; 111
 66c:	32 e1       	ldi	r19, 0x12	; 18
 66e:	43 e8       	ldi	r20, 0x83	; 131
 670:	50 e4       	ldi	r21, 0x40	; 64
 672:	c7 01       	movw	r24, r14
 674:	b6 01       	movw	r22, r12
 676:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 67a:	18 16       	cp	r1, r24
 67c:	34 f0       	brlt	.+12     	; 0x68a <calc_prescaler+0xc2>
		*prescaler=P_128;
 67e:	80 e8       	ldi	r24, 0x80	; 128
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	99 83       	std	Y+1, r25	; 0x01
 684:	88 83       	st	Y, r24
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return TRUE;
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	25 c0       	rjmp	.+74     	; 0x6d4 <calc_prescaler+0x10c>
		*prescaler=P_32;
		else if(delay <= MAX_DELAY_MS(P_64))
		*prescaler=P_64;
		else if(delay <= MAX_DELAY_MS(P_128))
		*prescaler=P_128;
		else if(delay <= MAX_DELAY_MS(P_256))
 68a:	2f e6       	ldi	r18, 0x6F	; 111
 68c:	32 e1       	ldi	r19, 0x12	; 18
 68e:	43 e0       	ldi	r20, 0x03	; 3
 690:	51 e4       	ldi	r21, 0x41	; 65
 692:	c7 01       	movw	r24, r14
 694:	b6 01       	movw	r22, r12
 696:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 69a:	18 16       	cp	r1, r24
 69c:	34 f0       	brlt	.+12     	; 0x6aa <calc_prescaler+0xe2>
		*prescaler=P_256;
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	99 83       	std	Y+1, r25	; 0x01
 6a4:	88 83       	st	Y, r24
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
		return TRUE;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	15 c0       	rjmp	.+42     	; 0x6d4 <calc_prescaler+0x10c>
		*prescaler=P_64;
		else if(delay <= MAX_DELAY_MS(P_128))
		*prescaler=P_128;
		else if(delay <= MAX_DELAY_MS(P_256))
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
 6aa:	2f e6       	ldi	r18, 0x6F	; 111
 6ac:	32 e1       	ldi	r19, 0x12	; 18
 6ae:	43 e0       	ldi	r20, 0x03	; 3
 6b0:	52 e4       	ldi	r21, 0x42	; 66
 6b2:	c7 01       	movw	r24, r14
 6b4:	b6 01       	movw	r22, r12
 6b6:	0e 94 75 05 	call	0xaea	; 0xaea <__cmpsf2>
 6ba:	18 16       	cp	r1, r24
 6bc:	34 f0       	brlt	.+12     	; 0x6ca <calc_prescaler+0x102>
		*prescaler=P_1024;
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	94 e0       	ldi	r25, 0x04	; 4
 6c2:	99 83       	std	Y+1, r25	; 0x01
 6c4:	88 83       	st	Y, r24
		else
		*prescaler = P_0;
		return TRUE;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <calc_prescaler+0x10c>
		else if(delay <= MAX_DELAY_MS(P_256))
		*prescaler=P_256;
		else if(delay <= MAX_DELAY_MS(P_1024))
		*prescaler=P_1024;
		else
		*prescaler = P_0;
 6ca:	19 82       	std	Y+1, r1	; 0x01
 6cc:	18 82       	st	Y, r1
		return TRUE;
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <calc_prescaler+0x10c>
	}
	else
	return FALSE;
 6d2:	80 e0       	ldi	r24, 0x00	; 0
}
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	ff 90       	pop	r15
 6da:	ef 90       	pop	r14
 6dc:	df 90       	pop	r13
 6de:	cf 90       	pop	r12
 6e0:	08 95       	ret

000006e2 <calc_initialValue>:

static void calc_initialValue(u16 prescaler,u8* init_value,f32 delay)
{
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	eb 01       	movw	r28, r22
	switch(prescaler)
 6e8:	80 34       	cpi	r24, 0x40	; 64
 6ea:	91 05       	cpc	r25, r1
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <calc_initialValue+0xe>
 6ee:	4a c0       	rjmp	.+148    	; 0x784 <calc_initialValue+0xa2>
 6f0:	50 f4       	brcc	.+20     	; 0x706 <calc_initialValue+0x24>
 6f2:	88 30       	cpi	r24, 0x08	; 8
 6f4:	91 05       	cpc	r25, r1
 6f6:	31 f1       	breq	.+76     	; 0x744 <calc_initialValue+0x62>
 6f8:	80 32       	cpi	r24, 0x20	; 32
 6fa:	91 05       	cpc	r25, r1
 6fc:	99 f1       	breq	.+102    	; 0x764 <calc_initialValue+0x82>
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	09 f0       	breq	.+2      	; 0x704 <calc_initialValue+0x22>
 702:	80 c0       	rjmp	.+256    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 704:	0f c0       	rjmp	.+30     	; 0x724 <calc_initialValue+0x42>
 706:	81 15       	cp	r24, r1
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	96 07       	cpc	r25, r22
 70c:	09 f4       	brne	.+2      	; 0x710 <calc_initialValue+0x2e>
 70e:	5a c0       	rjmp	.+180    	; 0x7c4 <calc_initialValue+0xe2>
 710:	81 15       	cp	r24, r1
 712:	64 e0       	ldi	r22, 0x04	; 4
 714:	96 07       	cpc	r25, r22
 716:	09 f4       	brne	.+2      	; 0x71a <calc_initialValue+0x38>
 718:	65 c0       	rjmp	.+202    	; 0x7e4 <calc_initialValue+0x102>
 71a:	80 38       	cpi	r24, 0x80	; 128
 71c:	91 05       	cpc	r25, r1
 71e:	09 f0       	breq	.+2      	; 0x722 <calc_initialValue+0x40>
 720:	71 c0       	rjmp	.+226    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 722:	40 c0       	rjmp	.+128    	; 0x7a4 <calc_initialValue+0xc2>
	{
		case P_1:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
 724:	6f e6       	ldi	r22, 0x6F	; 111
 726:	72 e1       	ldi	r23, 0x12	; 18
 728:	83 e0       	ldi	r24, 0x03	; 3
 72a:	9d e3       	ldi	r25, 0x3D	; 61
 72c:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 730:	2f e6       	ldi	r18, 0x6F	; 111
 732:	32 e1       	ldi	r19, 0x12	; 18
 734:	43 e0       	ldi	r20, 0x03	; 3
 736:	59 e3       	ldi	r21, 0x39	; 57
 738:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 73c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 740:	68 83       	st	Y, r22
		break;
 742:	61 c0       	rjmp	.+194    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		case P_8:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
 744:	6f e6       	ldi	r22, 0x6F	; 111
 746:	72 e1       	ldi	r23, 0x12	; 18
 748:	83 e8       	ldi	r24, 0x83	; 131
 74a:	9e e3       	ldi	r25, 0x3E	; 62
 74c:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 750:	2f e6       	ldi	r18, 0x6F	; 111
 752:	32 e1       	ldi	r19, 0x12	; 18
 754:	43 e8       	ldi	r20, 0x83	; 131
 756:	5a e3       	ldi	r21, 0x3A	; 58
 758:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 75c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 760:	68 83       	st	Y, r22
		break;
 762:	51 c0       	rjmp	.+162    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		case P_32:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
 764:	6f e6       	ldi	r22, 0x6F	; 111
 766:	72 e1       	ldi	r23, 0x12	; 18
 768:	83 e8       	ldi	r24, 0x83	; 131
 76a:	9f e3       	ldi	r25, 0x3F	; 63
 76c:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 770:	2f e6       	ldi	r18, 0x6F	; 111
 772:	32 e1       	ldi	r19, 0x12	; 18
 774:	43 e8       	ldi	r20, 0x83	; 131
 776:	5b e3       	ldi	r21, 0x3B	; 59
 778:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 77c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 780:	68 83       	st	Y, r22
		break;
 782:	41 c0       	rjmp	.+130    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		case P_64:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
 784:	6f e6       	ldi	r22, 0x6F	; 111
 786:	72 e1       	ldi	r23, 0x12	; 18
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	90 e4       	ldi	r25, 0x40	; 64
 78c:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 790:	2f e6       	ldi	r18, 0x6F	; 111
 792:	32 e1       	ldi	r19, 0x12	; 18
 794:	43 e0       	ldi	r20, 0x03	; 3
 796:	5c e3       	ldi	r21, 0x3C	; 60
 798:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 79c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 7a0:	68 83       	st	Y, r22
		break;
 7a2:	31 c0       	rjmp	.+98     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		case P_128:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
 7a4:	6f e6       	ldi	r22, 0x6F	; 111
 7a6:	72 e1       	ldi	r23, 0x12	; 18
 7a8:	83 e8       	ldi	r24, 0x83	; 131
 7aa:	90 e4       	ldi	r25, 0x40	; 64
 7ac:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 7b0:	2f e6       	ldi	r18, 0x6F	; 111
 7b2:	32 e1       	ldi	r19, 0x12	; 18
 7b4:	43 e8       	ldi	r20, 0x83	; 131
 7b6:	5c e3       	ldi	r21, 0x3C	; 60
 7b8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 7bc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 7c0:	68 83       	st	Y, r22
		break;
 7c2:	21 c0       	rjmp	.+66     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		case P_256:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
 7c4:	6f e6       	ldi	r22, 0x6F	; 111
 7c6:	72 e1       	ldi	r23, 0x12	; 18
 7c8:	83 e0       	ldi	r24, 0x03	; 3
 7ca:	91 e4       	ldi	r25, 0x41	; 65
 7cc:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 7d0:	2f e6       	ldi	r18, 0x6F	; 111
 7d2:	32 e1       	ldi	r19, 0x12	; 18
 7d4:	43 e0       	ldi	r20, 0x03	; 3
 7d6:	5d e3       	ldi	r21, 0x3D	; 61
 7d8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 7dc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 7e0:	68 83       	st	Y, r22
		break;
 7e2:	11 c0       	rjmp	.+34     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		case P_1024:
		*init_value=INIT_VALUE(MAX_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
 7e4:	6f e6       	ldi	r22, 0x6F	; 111
 7e6:	72 e1       	ldi	r23, 0x12	; 18
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	92 e4       	ldi	r25, 0x42	; 66
 7ec:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 7f0:	2f e6       	ldi	r18, 0x6F	; 111
 7f2:	32 e1       	ldi	r19, 0x12	; 18
 7f4:	43 e0       	ldi	r20, 0x03	; 3
 7f6:	5e e3       	ldi	r21, 0x3E	; 62
 7f8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 7fc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 800:	68 83       	st	Y, r22
		break;
 802:	01 c0       	rjmp	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		default:
		*init_value=FALSE;
 804:	18 82       	st	Y, r1
		break;
	}
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <set_prescale>:

static void set_prescale(u16 prescaler)
{
	switch(prescaler)
 80c:	80 34       	cpi	r24, 0x40	; 64
 80e:	91 05       	cpc	r25, r1
 810:	f9 f0       	breq	.+62     	; 0x850 <set_prescale+0x44>
 812:	48 f4       	brcc	.+18     	; 0x826 <set_prescale+0x1a>
 814:	88 30       	cpi	r24, 0x08	; 8
 816:	91 05       	cpc	r25, r1
 818:	a9 f0       	breq	.+42     	; 0x844 <set_prescale+0x38>
 81a:	80 32       	cpi	r24, 0x20	; 32
 81c:	91 05       	cpc	r25, r1
 81e:	a9 f0       	breq	.+42     	; 0x84a <set_prescale+0x3e>
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	11 f5       	brne	.+68     	; 0x868 <__stack+0x9>
 824:	0c c0       	rjmp	.+24     	; 0x83e <set_prescale+0x32>
 826:	81 15       	cp	r24, r1
 828:	21 e0       	ldi	r18, 0x01	; 1
 82a:	92 07       	cpc	r25, r18
 82c:	b9 f0       	breq	.+46     	; 0x85c <set_prescale+0x50>
 82e:	81 15       	cp	r24, r1
 830:	24 e0       	ldi	r18, 0x04	; 4
 832:	92 07       	cpc	r25, r18
 834:	b1 f0       	breq	.+44     	; 0x862 <__stack+0x3>
 836:	80 38       	cpi	r24, 0x80	; 128
 838:	91 05       	cpc	r25, r1
 83a:	b1 f4       	brne	.+44     	; 0x868 <__stack+0x9>
 83c:	0c c0       	rjmp	.+24     	; 0x856 <set_prescale+0x4a>
	{
		case P_1:
		TCCR2 = (1<<FOC2) | (1<<CS20);
 83e:	81 e8       	ldi	r24, 0x81	; 129
 840:	85 bd       	out	0x25, r24	; 37
		break;
 842:	08 95       	ret
		case P_8:
		TCCR2 = (1<<FOC2) | (1<<CS21);
 844:	82 e8       	ldi	r24, 0x82	; 130
 846:	85 bd       	out	0x25, r24	; 37
		break;
 848:	08 95       	ret
		case P_32:
		TCCR2 = (1<<FOC2) | (1<<CS20) | (1<<CS21);
 84a:	83 e8       	ldi	r24, 0x83	; 131
 84c:	85 bd       	out	0x25, r24	; 37
		break;
 84e:	08 95       	ret
		case P_64:
		TCCR2 = (1<<FOC2) | (1<<CS22);
 850:	84 e8       	ldi	r24, 0x84	; 132
 852:	85 bd       	out	0x25, r24	; 37
		break;
 854:	08 95       	ret
		case P_128:
		TCCR2 = (1<<FOC2) | (1<<CS20) | (1<<CS22);
 856:	85 e8       	ldi	r24, 0x85	; 133
 858:	85 bd       	out	0x25, r24	; 37
		break;
 85a:	08 95       	ret
		case P_256:
		TCCR2 = (1<<FOC2) | (1<<CS21) | (1<<CS22);
 85c:	86 e8       	ldi	r24, 0x86	; 134
 85e:	85 bd       	out	0x25, r24	; 37
		break;
 860:	08 95       	ret
		case P_1024:
		TCCR2 = (1<<FOC2) | (1<<CS20) | (1<<CS21)| (1<<CS22);
 862:	87 e8       	ldi	r24, 0x87	; 135
 864:	85 bd       	out	0x25, r24	; 37
		break;
 866:	08 95       	ret
		default:
		TCCR2 = FALSE;
 868:	15 bc       	out	0x25, r1	; 37
 86a:	08 95       	ret

0000086c <TMR2_PWM_Init>:

/*============= FUNCTION DEFINITIONS =============*/

//pwm_frequency:frequency of PWM in KHZ
void TMR2_PWM_Init(f32 pwm_frequency,u8 port_ID,u8 pin_num)
{
 86c:	cf 92       	push	r12
 86e:	df 92       	push	r13
 870:	ef 92       	push	r14
 872:	ff 92       	push	r15
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	6b 01       	movw	r12, r22
 87a:	7c 01       	movw	r14, r24
 87c:	c4 2f       	mov	r28, r20
 87e:	d2 2f       	mov	r29, r18
	g_port=port_ID;
 880:	40 93 84 00 	sts	0x0084, r20	; 0x800084 <g_port>
	g_pin=pin_num;
 884:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <g_pin>
	//GPIO_setPinDirection(port_ID,pin_num,PIN_OUTPUT);
	DIO_init(port_ID,pin_num,OUT); 
 888:	41 e0       	ldi	r20, 0x01	; 1
 88a:	62 2f       	mov	r22, r18
 88c:	8c 2f       	mov	r24, r28
 88e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_init>
	//GPIO_writePin(port_ID,pin_num,Low);
	DIO_write(port_ID,pin_num,LOW);
 892:	40 e0       	ldi	r20, 0x00	; 0
 894:	6d 2f       	mov	r22, r29
 896:	8c 2f       	mov	r24, r28
 898:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_write>
	g_period_time=1.0F/pwm_frequency;							//PWM periodic time in milli_seconds
 89c:	a7 01       	movw	r20, r14
 89e:	96 01       	movw	r18, r12
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	80 e8       	ldi	r24, 0x80	; 128
 8a6:	9f e3       	ldi	r25, 0x3F	; 63
 8a8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 8ac:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <g_period_time>
 8b0:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <g_period_time+0x1>
 8b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <g_period_time+0x2>
 8b8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <g_period_time+0x3>
	TIMSK |= (1<<TOIE2);										// Enable Timer2 Overflow Interrupt
 8bc:	89 b7       	in	r24, 0x39	; 57
 8be:	80 64       	ori	r24, 0x40	; 64
 8c0:	89 bf       	out	0x39, r24	; 57
}
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	ff 90       	pop	r15
 8c8:	ef 90       	pop	r14
 8ca:	df 90       	pop	r13
 8cc:	cf 90       	pop	r12
 8ce:	08 95       	ret

000008d0 <TMR2_PWM_start>:

void TMR2_PWM_start(u8 duty_cycle)
{
 8d0:	8f 92       	push	r8
 8d2:	9f 92       	push	r9
 8d4:	af 92       	push	r10
 8d6:	bf 92       	push	r11
 8d8:	cf 92       	push	r12
 8da:	df 92       	push	r13
 8dc:	ef 92       	push	r14
 8de:	ff 92       	push	r15
	f32 time_on,time_off;
	time_on=((f32)g_period_time*duty_cycle)/100.0F;					//calculate on time delay
 8e0:	80 90 7e 00 	lds	r8, 0x007E	; 0x80007e <g_period_time>
 8e4:	90 90 7f 00 	lds	r9, 0x007F	; 0x80007f <g_period_time+0x1>
 8e8:	a0 90 80 00 	lds	r10, 0x0080	; 0x800080 <g_period_time+0x2>
 8ec:	b0 90 81 00 	lds	r11, 0x0081	; 0x800081 <g_period_time+0x3>
 8f0:	68 2f       	mov	r22, r24
 8f2:	70 e0       	ldi	r23, 0x00	; 0
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__floatsisf>
 8fc:	a5 01       	movw	r20, r10
 8fe:	94 01       	movw	r18, r8
 900:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__mulsf3>
 904:	20 e0       	ldi	r18, 0x00	; 0
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	48 ec       	ldi	r20, 0xC8	; 200
 90a:	52 e4       	ldi	r21, 0x42	; 66
 90c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 910:	6b 01       	movw	r12, r22
 912:	7c 01       	movw	r14, r24
	time_off=g_period_time-time_on;									//calculate off time delay
 914:	9b 01       	movw	r18, r22
 916:	ac 01       	movw	r20, r24
 918:	c5 01       	movw	r24, r10
 91a:	b4 01       	movw	r22, r8
 91c:	0e 94 08 05 	call	0xa10	; 0xa10 <__subsf3>
 920:	4b 01       	movw	r8, r22
 922:	5c 01       	movw	r10, r24
	calc_prescaler(time_on,&g_Ton_prescale);						//calculate prescaler value of on time
 924:	49 e7       	ldi	r20, 0x79	; 121
 926:	50 e0       	ldi	r21, 0x00	; 0
 928:	c7 01       	movw	r24, r14
 92a:	b6 01       	movw	r22, r12
 92c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <calc_prescaler>
	calc_prescaler(time_off,&g_Toff_prescale);						//calculate prescaler value of off time
 930:	4b e7       	ldi	r20, 0x7B	; 123
 932:	50 e0       	ldi	r21, 0x00	; 0
 934:	c5 01       	movw	r24, r10
 936:	b4 01       	movw	r22, r8
 938:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <calc_prescaler>
	calc_initialValue(g_Ton_prescale,&g_Ton_initValue,time_on);		//calculate initial value of on time
 93c:	a7 01       	movw	r20, r14
 93e:	96 01       	movw	r18, r12
 940:	6d e7       	ldi	r22, 0x7D	; 125
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_Ton_prescale>
 948:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_Ton_prescale+0x1>
 94c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <calc_initialValue>
	calc_initialValue(g_Toff_prescale,&g_Toff_initValue,time_off);	//calculate initial value of off time
 950:	a5 01       	movw	r20, r10
 952:	94 01       	movw	r18, r8
 954:	62 e8       	ldi	r22, 0x82	; 130
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_Toff_prescale>
 95c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <g_Toff_prescale+0x1>
 960:	0e 94 71 03 	call	0x6e2	; 0x6e2 <calc_initialValue>
	TCNT2=g_Ton_initValue;											//set timer initial value
 964:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <g_Ton_initValue>
 968:	84 bd       	out	0x24, r24	; 36
	set_prescale(g_Ton_prescale);									//set timer prescaler value
 96a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_Ton_prescale>
 96e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_Ton_prescale+0x1>
 972:	0e 94 06 04 	call	0x80c	; 0x80c <set_prescale>
}
 976:	ff 90       	pop	r15
 978:	ef 90       	pop	r14
 97a:	df 90       	pop	r13
 97c:	cf 90       	pop	r12
 97e:	bf 90       	pop	r11
 980:	af 90       	pop	r10
 982:	9f 90       	pop	r9
 984:	8f 90       	pop	r8
 986:	08 95       	ret

00000988 <__vector_5>:

ISR_HANDLER(TMR2_OVF)
{
 988:	1f 92       	push	r1
 98a:	0f 92       	push	r0
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	2f 93       	push	r18
 994:	3f 93       	push	r19
 996:	4f 93       	push	r20
 998:	5f 93       	push	r21
 99a:	6f 93       	push	r22
 99c:	7f 93       	push	r23
 99e:	8f 93       	push	r24
 9a0:	9f 93       	push	r25
 9a2:	af 93       	push	r26
 9a4:	bf 93       	push	r27
 9a6:	ef 93       	push	r30
 9a8:	ff 93       	push	r31
	if(g_PWM_flag==0)
 9aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <g_PWM_flag>
 9ae:	81 11       	cpse	r24, r1
 9b0:	0d c0       	rjmp	.+26     	; 0x9cc <__vector_5+0x44>
	{
		set_prescale(g_Toff_prescale);
 9b2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_Toff_prescale>
 9b6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <g_Toff_prescale+0x1>
 9ba:	0e 94 06 04 	call	0x80c	; 0x80c <set_prescale>
		TCNT2=g_Toff_initValue;
 9be:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <g_Toff_initValue>
 9c2:	84 bd       	out	0x24, r24	; 36
		g_PWM_flag=1;
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_PWM_flag>
 9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <__vector_5+0x5a>
	}
	else
	{
		set_prescale(g_Ton_prescale);
 9cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_Ton_prescale>
 9d0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_Ton_prescale+0x1>
 9d4:	0e 94 06 04 	call	0x80c	; 0x80c <set_prescale>
		TCNT2=g_Ton_initValue;
 9d8:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <g_Ton_initValue>
 9dc:	84 bd       	out	0x24, r24	; 36
		g_PWM_flag=0;
 9de:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <g_PWM_flag>
	}
	//GPIO_togglePin(g_port, g_pin);
	DIO_toggle(g_port,g_pin);
 9e2:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <g_pin>
 9e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <g_port>
 9ea:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_toggle>
}
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <__subsf3>:
 a10:	50 58       	subi	r21, 0x80	; 128

00000a12 <__addsf3>:
 a12:	bb 27       	eor	r27, r27
 a14:	aa 27       	eor	r26, r26
 a16:	0e 94 20 05 	call	0xa40	; 0xa40 <__addsf3x>
 a1a:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_round>
 a1e:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscA>
 a22:	38 f0       	brcs	.+14     	; 0xa32 <__addsf3+0x20>
 a24:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_pscB>
 a28:	20 f0       	brcs	.+8      	; 0xa32 <__addsf3+0x20>
 a2a:	39 f4       	brne	.+14     	; 0xa3a <__addsf3+0x28>
 a2c:	9f 3f       	cpi	r25, 0xFF	; 255
 a2e:	19 f4       	brne	.+6      	; 0xa36 <__addsf3+0x24>
 a30:	26 f4       	brtc	.+8      	; 0xa3a <__addsf3+0x28>
 a32:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_nan>
 a36:	0e f4       	brtc	.+2      	; 0xa3a <__addsf3+0x28>
 a38:	e0 95       	com	r30
 a3a:	e7 fb       	bst	r30, 7
 a3c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>

00000a40 <__addsf3x>:
 a40:	e9 2f       	mov	r30, r25
 a42:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fp_split3>
 a46:	58 f3       	brcs	.-42     	; 0xa1e <__addsf3+0xc>
 a48:	ba 17       	cp	r27, r26
 a4a:	62 07       	cpc	r22, r18
 a4c:	73 07       	cpc	r23, r19
 a4e:	84 07       	cpc	r24, r20
 a50:	95 07       	cpc	r25, r21
 a52:	20 f0       	brcs	.+8      	; 0xa5c <__addsf3x+0x1c>
 a54:	79 f4       	brne	.+30     	; 0xa74 <__addsf3x+0x34>
 a56:	a6 f5       	brtc	.+104    	; 0xac0 <__addsf3x+0x80>
 a58:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_zero>
 a5c:	0e f4       	brtc	.+2      	; 0xa60 <__addsf3x+0x20>
 a5e:	e0 95       	com	r30
 a60:	0b 2e       	mov	r0, r27
 a62:	ba 2f       	mov	r27, r26
 a64:	a0 2d       	mov	r26, r0
 a66:	0b 01       	movw	r0, r22
 a68:	b9 01       	movw	r22, r18
 a6a:	90 01       	movw	r18, r0
 a6c:	0c 01       	movw	r0, r24
 a6e:	ca 01       	movw	r24, r20
 a70:	a0 01       	movw	r20, r0
 a72:	11 24       	eor	r1, r1
 a74:	ff 27       	eor	r31, r31
 a76:	59 1b       	sub	r21, r25
 a78:	99 f0       	breq	.+38     	; 0xaa0 <__addsf3x+0x60>
 a7a:	59 3f       	cpi	r21, 0xF9	; 249
 a7c:	50 f4       	brcc	.+20     	; 0xa92 <__addsf3x+0x52>
 a7e:	50 3e       	cpi	r21, 0xE0	; 224
 a80:	68 f1       	brcs	.+90     	; 0xadc <__addsf3x+0x9c>
 a82:	1a 16       	cp	r1, r26
 a84:	f0 40       	sbci	r31, 0x00	; 0
 a86:	a2 2f       	mov	r26, r18
 a88:	23 2f       	mov	r18, r19
 a8a:	34 2f       	mov	r19, r20
 a8c:	44 27       	eor	r20, r20
 a8e:	58 5f       	subi	r21, 0xF8	; 248
 a90:	f3 cf       	rjmp	.-26     	; 0xa78 <__addsf3x+0x38>
 a92:	46 95       	lsr	r20
 a94:	37 95       	ror	r19
 a96:	27 95       	ror	r18
 a98:	a7 95       	ror	r26
 a9a:	f0 40       	sbci	r31, 0x00	; 0
 a9c:	53 95       	inc	r21
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__addsf3x+0x52>
 aa0:	7e f4       	brtc	.+30     	; 0xac0 <__addsf3x+0x80>
 aa2:	1f 16       	cp	r1, r31
 aa4:	ba 0b       	sbc	r27, r26
 aa6:	62 0b       	sbc	r22, r18
 aa8:	73 0b       	sbc	r23, r19
 aaa:	84 0b       	sbc	r24, r20
 aac:	ba f0       	brmi	.+46     	; 0xadc <__addsf3x+0x9c>
 aae:	91 50       	subi	r25, 0x01	; 1
 ab0:	a1 f0       	breq	.+40     	; 0xada <__addsf3x+0x9a>
 ab2:	ff 0f       	add	r31, r31
 ab4:	bb 1f       	adc	r27, r27
 ab6:	66 1f       	adc	r22, r22
 ab8:	77 1f       	adc	r23, r23
 aba:	88 1f       	adc	r24, r24
 abc:	c2 f7       	brpl	.-16     	; 0xaae <__addsf3x+0x6e>
 abe:	0e c0       	rjmp	.+28     	; 0xadc <__addsf3x+0x9c>
 ac0:	ba 0f       	add	r27, r26
 ac2:	62 1f       	adc	r22, r18
 ac4:	73 1f       	adc	r23, r19
 ac6:	84 1f       	adc	r24, r20
 ac8:	48 f4       	brcc	.+18     	; 0xadc <__addsf3x+0x9c>
 aca:	87 95       	ror	r24
 acc:	77 95       	ror	r23
 ace:	67 95       	ror	r22
 ad0:	b7 95       	ror	r27
 ad2:	f7 95       	ror	r31
 ad4:	9e 3f       	cpi	r25, 0xFE	; 254
 ad6:	08 f0       	brcs	.+2      	; 0xada <__addsf3x+0x9a>
 ad8:	b0 cf       	rjmp	.-160    	; 0xa3a <__addsf3+0x28>
 ada:	93 95       	inc	r25
 adc:	88 0f       	add	r24, r24
 ade:	08 f0       	brcs	.+2      	; 0xae2 <__addsf3x+0xa2>
 ae0:	99 27       	eor	r25, r25
 ae2:	ee 0f       	add	r30, r30
 ae4:	97 95       	ror	r25
 ae6:	87 95       	ror	r24
 ae8:	08 95       	ret

00000aea <__cmpsf2>:
 aea:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fp_cmp>
 aee:	08 f4       	brcc	.+2      	; 0xaf2 <__cmpsf2+0x8>
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	08 95       	ret

00000af4 <__divsf3>:
 af4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__divsf3x>
 af8:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_round>
 afc:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_pscB>
 b00:	58 f0       	brcs	.+22     	; 0xb18 <__divsf3+0x24>
 b02:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscA>
 b06:	40 f0       	brcs	.+16     	; 0xb18 <__divsf3+0x24>
 b08:	29 f4       	brne	.+10     	; 0xb14 <__divsf3+0x20>
 b0a:	5f 3f       	cpi	r21, 0xFF	; 255
 b0c:	29 f0       	breq	.+10     	; 0xb18 <__divsf3+0x24>
 b0e:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
 b12:	51 11       	cpse	r21, r1
 b14:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_szero>
 b18:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_nan>

00000b1c <__divsf3x>:
 b1c:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fp_split3>
 b20:	68 f3       	brcs	.-38     	; 0xafc <__divsf3+0x8>

00000b22 <__divsf3_pse>:
 b22:	99 23       	and	r25, r25
 b24:	b1 f3       	breq	.-20     	; 0xb12 <__divsf3+0x1e>
 b26:	55 23       	and	r21, r21
 b28:	91 f3       	breq	.-28     	; 0xb0e <__divsf3+0x1a>
 b2a:	95 1b       	sub	r25, r21
 b2c:	55 0b       	sbc	r21, r21
 b2e:	bb 27       	eor	r27, r27
 b30:	aa 27       	eor	r26, r26
 b32:	62 17       	cp	r22, r18
 b34:	73 07       	cpc	r23, r19
 b36:	84 07       	cpc	r24, r20
 b38:	38 f0       	brcs	.+14     	; 0xb48 <__divsf3_pse+0x26>
 b3a:	9f 5f       	subi	r25, 0xFF	; 255
 b3c:	5f 4f       	sbci	r21, 0xFF	; 255
 b3e:	22 0f       	add	r18, r18
 b40:	33 1f       	adc	r19, r19
 b42:	44 1f       	adc	r20, r20
 b44:	aa 1f       	adc	r26, r26
 b46:	a9 f3       	breq	.-22     	; 0xb32 <__divsf3_pse+0x10>
 b48:	35 d0       	rcall	.+106    	; 0xbb4 <__divsf3_pse+0x92>
 b4a:	0e 2e       	mov	r0, r30
 b4c:	3a f0       	brmi	.+14     	; 0xb5c <__divsf3_pse+0x3a>
 b4e:	e0 e8       	ldi	r30, 0x80	; 128
 b50:	32 d0       	rcall	.+100    	; 0xbb6 <__divsf3_pse+0x94>
 b52:	91 50       	subi	r25, 0x01	; 1
 b54:	50 40       	sbci	r21, 0x00	; 0
 b56:	e6 95       	lsr	r30
 b58:	00 1c       	adc	r0, r0
 b5a:	ca f7       	brpl	.-14     	; 0xb4e <__divsf3_pse+0x2c>
 b5c:	2b d0       	rcall	.+86     	; 0xbb4 <__divsf3_pse+0x92>
 b5e:	fe 2f       	mov	r31, r30
 b60:	29 d0       	rcall	.+82     	; 0xbb4 <__divsf3_pse+0x92>
 b62:	66 0f       	add	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	bb 1f       	adc	r27, r27
 b6a:	26 17       	cp	r18, r22
 b6c:	37 07       	cpc	r19, r23
 b6e:	48 07       	cpc	r20, r24
 b70:	ab 07       	cpc	r26, r27
 b72:	b0 e8       	ldi	r27, 0x80	; 128
 b74:	09 f0       	breq	.+2      	; 0xb78 <__divsf3_pse+0x56>
 b76:	bb 0b       	sbc	r27, r27
 b78:	80 2d       	mov	r24, r0
 b7a:	bf 01       	movw	r22, r30
 b7c:	ff 27       	eor	r31, r31
 b7e:	93 58       	subi	r25, 0x83	; 131
 b80:	5f 4f       	sbci	r21, 0xFF	; 255
 b82:	3a f0       	brmi	.+14     	; 0xb92 <__divsf3_pse+0x70>
 b84:	9e 3f       	cpi	r25, 0xFE	; 254
 b86:	51 05       	cpc	r21, r1
 b88:	78 f0       	brcs	.+30     	; 0xba8 <__divsf3_pse+0x86>
 b8a:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
 b8e:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_szero>
 b92:	5f 3f       	cpi	r21, 0xFF	; 255
 b94:	e4 f3       	brlt	.-8      	; 0xb8e <__divsf3_pse+0x6c>
 b96:	98 3e       	cpi	r25, 0xE8	; 232
 b98:	d4 f3       	brlt	.-12     	; 0xb8e <__divsf3_pse+0x6c>
 b9a:	86 95       	lsr	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	b7 95       	ror	r27
 ba2:	f7 95       	ror	r31
 ba4:	9f 5f       	subi	r25, 0xFF	; 255
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__divsf3_pse+0x78>
 ba8:	88 0f       	add	r24, r24
 baa:	91 1d       	adc	r25, r1
 bac:	96 95       	lsr	r25
 bae:	87 95       	ror	r24
 bb0:	97 f9       	bld	r25, 7
 bb2:	08 95       	ret
 bb4:	e1 e0       	ldi	r30, 0x01	; 1
 bb6:	66 0f       	add	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	bb 1f       	adc	r27, r27
 bbe:	62 17       	cp	r22, r18
 bc0:	73 07       	cpc	r23, r19
 bc2:	84 07       	cpc	r24, r20
 bc4:	ba 07       	cpc	r27, r26
 bc6:	20 f0       	brcs	.+8      	; 0xbd0 <__divsf3_pse+0xae>
 bc8:	62 1b       	sub	r22, r18
 bca:	73 0b       	sbc	r23, r19
 bcc:	84 0b       	sbc	r24, r20
 bce:	ba 0b       	sbc	r27, r26
 bd0:	ee 1f       	adc	r30, r30
 bd2:	88 f7       	brcc	.-30     	; 0xbb6 <__divsf3_pse+0x94>
 bd4:	e0 95       	com	r30
 bd6:	08 95       	ret

00000bd8 <__fixunssfsi>:
 bd8:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fp_splitA>
 bdc:	88 f0       	brcs	.+34     	; 0xc00 <__fixunssfsi+0x28>
 bde:	9f 57       	subi	r25, 0x7F	; 127
 be0:	98 f0       	brcs	.+38     	; 0xc08 <__fixunssfsi+0x30>
 be2:	b9 2f       	mov	r27, r25
 be4:	99 27       	eor	r25, r25
 be6:	b7 51       	subi	r27, 0x17	; 23
 be8:	b0 f0       	brcs	.+44     	; 0xc16 <__fixunssfsi+0x3e>
 bea:	e1 f0       	breq	.+56     	; 0xc24 <__fixunssfsi+0x4c>
 bec:	66 0f       	add	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	1a f0       	brmi	.+6      	; 0xbfc <__fixunssfsi+0x24>
 bf6:	ba 95       	dec	r27
 bf8:	c9 f7       	brne	.-14     	; 0xbec <__fixunssfsi+0x14>
 bfa:	14 c0       	rjmp	.+40     	; 0xc24 <__fixunssfsi+0x4c>
 bfc:	b1 30       	cpi	r27, 0x01	; 1
 bfe:	91 f0       	breq	.+36     	; 0xc24 <__fixunssfsi+0x4c>
 c00:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_zero>
 c04:	b1 e0       	ldi	r27, 0x01	; 1
 c06:	08 95       	ret
 c08:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_zero>
 c0c:	67 2f       	mov	r22, r23
 c0e:	78 2f       	mov	r23, r24
 c10:	88 27       	eor	r24, r24
 c12:	b8 5f       	subi	r27, 0xF8	; 248
 c14:	39 f0       	breq	.+14     	; 0xc24 <__fixunssfsi+0x4c>
 c16:	b9 3f       	cpi	r27, 0xF9	; 249
 c18:	cc f3       	brlt	.-14     	; 0xc0c <__fixunssfsi+0x34>
 c1a:	86 95       	lsr	r24
 c1c:	77 95       	ror	r23
 c1e:	67 95       	ror	r22
 c20:	b3 95       	inc	r27
 c22:	d9 f7       	brne	.-10     	; 0xc1a <__fixunssfsi+0x42>
 c24:	3e f4       	brtc	.+14     	; 0xc34 <__fixunssfsi+0x5c>
 c26:	90 95       	com	r25
 c28:	80 95       	com	r24
 c2a:	70 95       	com	r23
 c2c:	61 95       	neg	r22
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <__floatunsisf>:
 c36:	e8 94       	clt
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <__floatsisf+0x12>

00000c3a <__floatsisf>:
 c3a:	97 fb       	bst	r25, 7
 c3c:	3e f4       	brtc	.+14     	; 0xc4c <__floatsisf+0x12>
 c3e:	90 95       	com	r25
 c40:	80 95       	com	r24
 c42:	70 95       	com	r23
 c44:	61 95       	neg	r22
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	99 23       	and	r25, r25
 c4e:	a9 f0       	breq	.+42     	; 0xc7a <__floatsisf+0x40>
 c50:	f9 2f       	mov	r31, r25
 c52:	96 e9       	ldi	r25, 0x96	; 150
 c54:	bb 27       	eor	r27, r27
 c56:	93 95       	inc	r25
 c58:	f6 95       	lsr	r31
 c5a:	87 95       	ror	r24
 c5c:	77 95       	ror	r23
 c5e:	67 95       	ror	r22
 c60:	b7 95       	ror	r27
 c62:	f1 11       	cpse	r31, r1
 c64:	f8 cf       	rjmp	.-16     	; 0xc56 <__floatsisf+0x1c>
 c66:	fa f4       	brpl	.+62     	; 0xca6 <__floatsisf+0x6c>
 c68:	bb 0f       	add	r27, r27
 c6a:	11 f4       	brne	.+4      	; 0xc70 <__floatsisf+0x36>
 c6c:	60 ff       	sbrs	r22, 0
 c6e:	1b c0       	rjmp	.+54     	; 0xca6 <__floatsisf+0x6c>
 c70:	6f 5f       	subi	r22, 0xFF	; 255
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	8f 4f       	sbci	r24, 0xFF	; 255
 c76:	9f 4f       	sbci	r25, 0xFF	; 255
 c78:	16 c0       	rjmp	.+44     	; 0xca6 <__floatsisf+0x6c>
 c7a:	88 23       	and	r24, r24
 c7c:	11 f0       	breq	.+4      	; 0xc82 <__floatsisf+0x48>
 c7e:	96 e9       	ldi	r25, 0x96	; 150
 c80:	11 c0       	rjmp	.+34     	; 0xca4 <__floatsisf+0x6a>
 c82:	77 23       	and	r23, r23
 c84:	21 f0       	breq	.+8      	; 0xc8e <__floatsisf+0x54>
 c86:	9e e8       	ldi	r25, 0x8E	; 142
 c88:	87 2f       	mov	r24, r23
 c8a:	76 2f       	mov	r23, r22
 c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__floatsisf+0x5e>
 c8e:	66 23       	and	r22, r22
 c90:	71 f0       	breq	.+28     	; 0xcae <__floatsisf+0x74>
 c92:	96 e8       	ldi	r25, 0x86	; 134
 c94:	86 2f       	mov	r24, r22
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	60 e0       	ldi	r22, 0x00	; 0
 c9a:	2a f0       	brmi	.+10     	; 0xca6 <__floatsisf+0x6c>
 c9c:	9a 95       	dec	r25
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	da f7       	brpl	.-10     	; 0xc9c <__floatsisf+0x62>
 ca6:	88 0f       	add	r24, r24
 ca8:	96 95       	lsr	r25
 caa:	87 95       	ror	r24
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__fp_cmp>:
 cb0:	99 0f       	add	r25, r25
 cb2:	00 08       	sbc	r0, r0
 cb4:	55 0f       	add	r21, r21
 cb6:	aa 0b       	sbc	r26, r26
 cb8:	e0 e8       	ldi	r30, 0x80	; 128
 cba:	fe ef       	ldi	r31, 0xFE	; 254
 cbc:	16 16       	cp	r1, r22
 cbe:	17 06       	cpc	r1, r23
 cc0:	e8 07       	cpc	r30, r24
 cc2:	f9 07       	cpc	r31, r25
 cc4:	c0 f0       	brcs	.+48     	; 0xcf6 <__fp_cmp+0x46>
 cc6:	12 16       	cp	r1, r18
 cc8:	13 06       	cpc	r1, r19
 cca:	e4 07       	cpc	r30, r20
 ccc:	f5 07       	cpc	r31, r21
 cce:	98 f0       	brcs	.+38     	; 0xcf6 <__fp_cmp+0x46>
 cd0:	62 1b       	sub	r22, r18
 cd2:	73 0b       	sbc	r23, r19
 cd4:	84 0b       	sbc	r24, r20
 cd6:	95 0b       	sbc	r25, r21
 cd8:	39 f4       	brne	.+14     	; 0xce8 <__fp_cmp+0x38>
 cda:	0a 26       	eor	r0, r26
 cdc:	61 f0       	breq	.+24     	; 0xcf6 <__fp_cmp+0x46>
 cde:	23 2b       	or	r18, r19
 ce0:	24 2b       	or	r18, r20
 ce2:	25 2b       	or	r18, r21
 ce4:	21 f4       	brne	.+8      	; 0xcee <__fp_cmp+0x3e>
 ce6:	08 95       	ret
 ce8:	0a 26       	eor	r0, r26
 cea:	09 f4       	brne	.+2      	; 0xcee <__fp_cmp+0x3e>
 cec:	a1 40       	sbci	r26, 0x01	; 1
 cee:	a6 95       	lsr	r26
 cf0:	8f ef       	ldi	r24, 0xFF	; 255
 cf2:	81 1d       	adc	r24, r1
 cf4:	81 1d       	adc	r24, r1
 cf6:	08 95       	ret

00000cf8 <__fp_inf>:
 cf8:	97 f9       	bld	r25, 7
 cfa:	9f 67       	ori	r25, 0x7F	; 127
 cfc:	80 e8       	ldi	r24, 0x80	; 128
 cfe:	70 e0       	ldi	r23, 0x00	; 0
 d00:	60 e0       	ldi	r22, 0x00	; 0
 d02:	08 95       	ret

00000d04 <__fp_nan>:
 d04:	9f ef       	ldi	r25, 0xFF	; 255
 d06:	80 ec       	ldi	r24, 0xC0	; 192
 d08:	08 95       	ret

00000d0a <__fp_pscA>:
 d0a:	00 24       	eor	r0, r0
 d0c:	0a 94       	dec	r0
 d0e:	16 16       	cp	r1, r22
 d10:	17 06       	cpc	r1, r23
 d12:	18 06       	cpc	r1, r24
 d14:	09 06       	cpc	r0, r25
 d16:	08 95       	ret

00000d18 <__fp_pscB>:
 d18:	00 24       	eor	r0, r0
 d1a:	0a 94       	dec	r0
 d1c:	12 16       	cp	r1, r18
 d1e:	13 06       	cpc	r1, r19
 d20:	14 06       	cpc	r1, r20
 d22:	05 06       	cpc	r0, r21
 d24:	08 95       	ret

00000d26 <__fp_round>:
 d26:	09 2e       	mov	r0, r25
 d28:	03 94       	inc	r0
 d2a:	00 0c       	add	r0, r0
 d2c:	11 f4       	brne	.+4      	; 0xd32 <__fp_round+0xc>
 d2e:	88 23       	and	r24, r24
 d30:	52 f0       	brmi	.+20     	; 0xd46 <__fp_round+0x20>
 d32:	bb 0f       	add	r27, r27
 d34:	40 f4       	brcc	.+16     	; 0xd46 <__fp_round+0x20>
 d36:	bf 2b       	or	r27, r31
 d38:	11 f4       	brne	.+4      	; 0xd3e <__fp_round+0x18>
 d3a:	60 ff       	sbrs	r22, 0
 d3c:	04 c0       	rjmp	.+8      	; 0xd46 <__fp_round+0x20>
 d3e:	6f 5f       	subi	r22, 0xFF	; 255
 d40:	7f 4f       	sbci	r23, 0xFF	; 255
 d42:	8f 4f       	sbci	r24, 0xFF	; 255
 d44:	9f 4f       	sbci	r25, 0xFF	; 255
 d46:	08 95       	ret

00000d48 <__fp_split3>:
 d48:	57 fd       	sbrc	r21, 7
 d4a:	90 58       	subi	r25, 0x80	; 128
 d4c:	44 0f       	add	r20, r20
 d4e:	55 1f       	adc	r21, r21
 d50:	59 f0       	breq	.+22     	; 0xd68 <__fp_splitA+0x10>
 d52:	5f 3f       	cpi	r21, 0xFF	; 255
 d54:	71 f0       	breq	.+28     	; 0xd72 <__fp_splitA+0x1a>
 d56:	47 95       	ror	r20

00000d58 <__fp_splitA>:
 d58:	88 0f       	add	r24, r24
 d5a:	97 fb       	bst	r25, 7
 d5c:	99 1f       	adc	r25, r25
 d5e:	61 f0       	breq	.+24     	; 0xd78 <__fp_splitA+0x20>
 d60:	9f 3f       	cpi	r25, 0xFF	; 255
 d62:	79 f0       	breq	.+30     	; 0xd82 <__fp_splitA+0x2a>
 d64:	87 95       	ror	r24
 d66:	08 95       	ret
 d68:	12 16       	cp	r1, r18
 d6a:	13 06       	cpc	r1, r19
 d6c:	14 06       	cpc	r1, r20
 d6e:	55 1f       	adc	r21, r21
 d70:	f2 cf       	rjmp	.-28     	; 0xd56 <__fp_split3+0xe>
 d72:	46 95       	lsr	r20
 d74:	f1 df       	rcall	.-30     	; 0xd58 <__fp_splitA>
 d76:	08 c0       	rjmp	.+16     	; 0xd88 <__fp_splitA+0x30>
 d78:	16 16       	cp	r1, r22
 d7a:	17 06       	cpc	r1, r23
 d7c:	18 06       	cpc	r1, r24
 d7e:	99 1f       	adc	r25, r25
 d80:	f1 cf       	rjmp	.-30     	; 0xd64 <__fp_splitA+0xc>
 d82:	86 95       	lsr	r24
 d84:	71 05       	cpc	r23, r1
 d86:	61 05       	cpc	r22, r1
 d88:	08 94       	sec
 d8a:	08 95       	ret

00000d8c <__fp_zero>:
 d8c:	e8 94       	clt

00000d8e <__fp_szero>:
 d8e:	bb 27       	eor	r27, r27
 d90:	66 27       	eor	r22, r22
 d92:	77 27       	eor	r23, r23
 d94:	cb 01       	movw	r24, r22
 d96:	97 f9       	bld	r25, 7
 d98:	08 95       	ret

00000d9a <__mulsf3>:
 d9a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__mulsf3x>
 d9e:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_round>
 da2:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscA>
 da6:	38 f0       	brcs	.+14     	; 0xdb6 <__mulsf3+0x1c>
 da8:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_pscB>
 dac:	20 f0       	brcs	.+8      	; 0xdb6 <__mulsf3+0x1c>
 dae:	95 23       	and	r25, r21
 db0:	11 f0       	breq	.+4      	; 0xdb6 <__mulsf3+0x1c>
 db2:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
 db6:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_nan>
 dba:	11 24       	eor	r1, r1
 dbc:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_szero>

00000dc0 <__mulsf3x>:
 dc0:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fp_split3>
 dc4:	70 f3       	brcs	.-36     	; 0xda2 <__mulsf3+0x8>

00000dc6 <__mulsf3_pse>:
 dc6:	95 9f       	mul	r25, r21
 dc8:	c1 f3       	breq	.-16     	; 0xdba <__mulsf3+0x20>
 dca:	95 0f       	add	r25, r21
 dcc:	50 e0       	ldi	r21, 0x00	; 0
 dce:	55 1f       	adc	r21, r21
 dd0:	62 9f       	mul	r22, r18
 dd2:	f0 01       	movw	r30, r0
 dd4:	72 9f       	mul	r23, r18
 dd6:	bb 27       	eor	r27, r27
 dd8:	f0 0d       	add	r31, r0
 dda:	b1 1d       	adc	r27, r1
 ddc:	63 9f       	mul	r22, r19
 dde:	aa 27       	eor	r26, r26
 de0:	f0 0d       	add	r31, r0
 de2:	b1 1d       	adc	r27, r1
 de4:	aa 1f       	adc	r26, r26
 de6:	64 9f       	mul	r22, r20
 de8:	66 27       	eor	r22, r22
 dea:	b0 0d       	add	r27, r0
 dec:	a1 1d       	adc	r26, r1
 dee:	66 1f       	adc	r22, r22
 df0:	82 9f       	mul	r24, r18
 df2:	22 27       	eor	r18, r18
 df4:	b0 0d       	add	r27, r0
 df6:	a1 1d       	adc	r26, r1
 df8:	62 1f       	adc	r22, r18
 dfa:	73 9f       	mul	r23, r19
 dfc:	b0 0d       	add	r27, r0
 dfe:	a1 1d       	adc	r26, r1
 e00:	62 1f       	adc	r22, r18
 e02:	83 9f       	mul	r24, r19
 e04:	a0 0d       	add	r26, r0
 e06:	61 1d       	adc	r22, r1
 e08:	22 1f       	adc	r18, r18
 e0a:	74 9f       	mul	r23, r20
 e0c:	33 27       	eor	r19, r19
 e0e:	a0 0d       	add	r26, r0
 e10:	61 1d       	adc	r22, r1
 e12:	23 1f       	adc	r18, r19
 e14:	84 9f       	mul	r24, r20
 e16:	60 0d       	add	r22, r0
 e18:	21 1d       	adc	r18, r1
 e1a:	82 2f       	mov	r24, r18
 e1c:	76 2f       	mov	r23, r22
 e1e:	6a 2f       	mov	r22, r26
 e20:	11 24       	eor	r1, r1
 e22:	9f 57       	subi	r25, 0x7F	; 127
 e24:	50 40       	sbci	r21, 0x00	; 0
 e26:	9a f0       	brmi	.+38     	; 0xe4e <__mulsf3_pse+0x88>
 e28:	f1 f0       	breq	.+60     	; 0xe66 <__mulsf3_pse+0xa0>
 e2a:	88 23       	and	r24, r24
 e2c:	4a f0       	brmi	.+18     	; 0xe40 <__mulsf3_pse+0x7a>
 e2e:	ee 0f       	add	r30, r30
 e30:	ff 1f       	adc	r31, r31
 e32:	bb 1f       	adc	r27, r27
 e34:	66 1f       	adc	r22, r22
 e36:	77 1f       	adc	r23, r23
 e38:	88 1f       	adc	r24, r24
 e3a:	91 50       	subi	r25, 0x01	; 1
 e3c:	50 40       	sbci	r21, 0x00	; 0
 e3e:	a9 f7       	brne	.-22     	; 0xe2a <__mulsf3_pse+0x64>
 e40:	9e 3f       	cpi	r25, 0xFE	; 254
 e42:	51 05       	cpc	r21, r1
 e44:	80 f0       	brcs	.+32     	; 0xe66 <__mulsf3_pse+0xa0>
 e46:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
 e4a:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_szero>
 e4e:	5f 3f       	cpi	r21, 0xFF	; 255
 e50:	e4 f3       	brlt	.-8      	; 0xe4a <__mulsf3_pse+0x84>
 e52:	98 3e       	cpi	r25, 0xE8	; 232
 e54:	d4 f3       	brlt	.-12     	; 0xe4a <__mulsf3_pse+0x84>
 e56:	86 95       	lsr	r24
 e58:	77 95       	ror	r23
 e5a:	67 95       	ror	r22
 e5c:	b7 95       	ror	r27
 e5e:	f7 95       	ror	r31
 e60:	e7 95       	ror	r30
 e62:	9f 5f       	subi	r25, 0xFF	; 255
 e64:	c1 f7       	brne	.-16     	; 0xe56 <__mulsf3_pse+0x90>
 e66:	fe 2b       	or	r31, r30
 e68:	88 0f       	add	r24, r24
 e6a:	91 1d       	adc	r25, r1
 e6c:	96 95       	lsr	r25
 e6e:	87 95       	ror	r24
 e70:	97 f9       	bld	r25, 7
 e72:	08 95       	ret

00000e74 <_exit>:
 e74:	f8 94       	cli

00000e76 <__stop_program>:
 e76:	ff cf       	rjmp	.-2      	; 0xe76 <__stop_program>
