
Obstacle Avoidance Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800060  00800060  0000053e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109c  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000781  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107b  00000000  00000000  00001f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b5  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a6c  00000000  00000000  00003df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005865  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_2>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_3>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_4>
  14:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_5>
  18:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_6>
  1c:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_7>
  20:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_8>
  24:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_9>
  28:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_10>
  2c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
{
// 	APP_initialization();
// 	APP_startProgram();
	
	return 0;
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
  ba:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c2:	30 97       	sbiw	r30, 0x00	; 0
  c4:	09 f0       	breq	.+2      	; 0xc8 <__vector_1+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT0]();
  c6:	09 95       	icall
	}	
}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
 10c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 110:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 114:	30 97       	sbiw	r30, 0x00	; 0
 116:	09 f0       	breq	.+2      	; 0x11a <__vector_2+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT1]();
 118:	09 95       	icall
	}	
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
 15e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 162:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 166:	30 97       	sbiw	r30, 0x00	; 0
 168:	09 f0       	breq	.+2      	; 0x16c <__vector_3+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT2]();
 16a:	09 95       	icall
	}	
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_4>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR2 COMP */
void __vector_4( void )
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	/* Static Counter, in case the desired time to be counted; is more than Timer2 counting register ( TCNT2 = 8 bits ), i.e.: to count the number of Overflows */
	static u16 u16_l_counterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer2 counting register */
	u16_l_counterCOMP++;
 1b0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u16_l_counterCOMP.2153>
 1b4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <u16_l_counterCOMP.2153+0x1>
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <u16_l_counterCOMP.2153+0x1>
 1be:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <u16_l_counterCOMP.2153>

	/* Check 1: The COMP Counter reached the desired number of Overflows */
	if ( u16_l_counterCOMP >= TMR_U16_TMR_2_NUM_OF_OVERFLOWS )
 1c2:	89 2b       	or	r24, r25
 1c4:	59 f0       	breq	.+22     	; 0x1dc <__vector_4+0x4e>
	{
		/* Reset the COMP Counter to 0 */
		u16_l_counterCOMP = 0;
 1c6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <u16_l_counterCOMP.2153+0x1>
 1ca:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <u16_l_counterCOMP.2153>

		/* Check 1.1: TMR2 index of the Global Array is not equal to NULL */
		if ( apf_gs_COMPInterruptsAction[TMR_U8_TMR2] != NULL )
 1ce:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <apf_gs_COMPInterruptsAction+0x4>
 1d2:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <apf_gs_COMPInterruptsAction+0x5>
 1d6:	30 97       	sbiw	r30, 0x00	; 0
 1d8:	09 f0       	breq	.+2      	; 0x1dc <__vector_4+0x4e>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			apf_gs_COMPInterruptsAction[TMR_U8_TMR2]();
 1da:	09 95       	icall
		}
	}
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_5>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR2 OVF */
void __vector_5( void )
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	/* Increment the OVF Counter after every Overflow in Timer2 counting register */
	au16_gs_OVFCounters[TMR_U8_TMR2]++;
 220:	e0 e7       	ldi	r30, 0x70	; 112
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	84 81       	ldd	r24, Z+4	; 0x04
 226:	95 81       	ldd	r25, Z+5	; 0x05
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	95 83       	std	Z+5, r25	; 0x05
 22c:	84 83       	std	Z+4, r24	; 0x04

	/* Check 1: The OVF Counter reached the desired number of Overflows */
	if ( au16_gs_OVFCounters[TMR_U8_TMR2] >= TMR_U16_TMR_2_NUM_OF_OVERFLOWS )
 22e:	89 2b       	or	r24, r25
 230:	61 f0       	breq	.+24     	; 0x24a <__vector_5+0x4c>
	{
		/* Reset Preload Value */
		TMR_U8_TCNT2_REG = TMR_U8_TMR_2_PRELOAD_VALUE;
 232:	14 bc       	out	0x24, r1	; 36

		/* Reset the OVF Counter to 0 */
		au16_gs_OVFCounters[TMR_U8_TMR2] = 0;
 234:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <au16_gs_OVFCounters+0x5>
 238:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <au16_gs_OVFCounters+0x4>

		/* Check 1.1: TMR2 index of the Global Array is not equal to NULL */
		if ( apf_gs_OVFInterruptsAction[TMR_U8_TMR2] != NULL )
 23c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <apf_gs_OVFInterruptsAction+0x4>
 240:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <apf_gs_OVFInterruptsAction+0x5>
 244:	30 97       	sbiw	r30, 0x00	; 0
 246:	09 f0       	breq	.+2      	; 0x24a <__vector_5+0x4c>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			apf_gs_OVFInterruptsAction[TMR_U8_TMR2]();
 248:	09 95       	icall
		}
	}
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_6>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR1 CAPT */
void __vector_6( void )
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1

}
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__vector_7>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR1 COMPA */
void __vector_7( void )
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	2f 93       	push	r18
 28c:	3f 93       	push	r19
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
	/* Static Counter, in case the desired time to be counted; is more than Timer1 counting register ( TCNT1 = 16 bits ), i.e.: to count the number of Overflows */
	static u16 u16_l_counterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer1 counting register */
	u16_l_counterCOMP++;
 2a2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <u16_l_counterCOMP.2171>
 2a6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <u16_l_counterCOMP.2171+0x1>
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <u16_l_counterCOMP.2171+0x1>
 2b0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <u16_l_counterCOMP.2171>

	/* Check 1: The COMP Counter reached the desired number of Overflows */
	if ( u16_l_counterCOMP >= TMR_U16_TMR_1_NUM_OF_OVERFLOWS )
 2b4:	89 2b       	or	r24, r25
 2b6:	89 f0       	breq	.+34     	; 0x2da <__vector_7+0x5a>
	{
		/* Reset the COMP Counter to 0 */
		u16_l_counterCOMP = 0;
 2b8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <u16_l_counterCOMP.2171+0x1>
 2bc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <u16_l_counterCOMP.2171>

		/* Check 1.1: TMR1 index of the Global Array is not equal to NULL, and Channel A COMPFlag is raised */
		if ( ( apf_gs_COMPInterruptsAction[TMR_U8_TMR1] != NULL ) && ( u8_gs_timer1COMPAFlag != TMR_U8_FLAG_DOWN ) )
 2c0:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <apf_gs_COMPInterruptsAction+0x2>
 2c4:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <apf_gs_COMPInterruptsAction+0x3>
 2c8:	30 97       	sbiw	r30, 0x00	; 0
 2ca:	39 f0       	breq	.+14     	; 0x2da <__vector_7+0x5a>
 2cc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_gs_timer1COMPAFlag>
 2d0:	88 23       	and	r24, r24
 2d2:	19 f0       	breq	.+6      	; 0x2da <__vector_7+0x5a>
		{
			/* Reset Channel A COMPFlag to 0 */
			u8_gs_timer1COMPAFlag = TMR_U8_FLAG_DOWN;
 2d4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <u8_gs_timer1COMPAFlag>

			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			apf_gs_COMPInterruptsAction[TMR_U8_TMR1]();
 2d8:	09 95       	icall
		}
	}
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_8>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR1 COMPB */
void __vector_8( void )
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
	/* Static Counter, in case the desired time to be counted; is more than Timer1 counting register ( TCNT1 = 16 bits ), i.e.: to count the number of Overflows */
	static u16 u16_l_counterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer1 counting register */
	u16_l_counterCOMP++;
 31e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <u16_l_counterCOMP.2175>
 322:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <u16_l_counterCOMP.2175+0x1>
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <u16_l_counterCOMP.2175+0x1>
 32c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <u16_l_counterCOMP.2175>

	/* Check 1: The COMP Counter reached the desired number of Overflows */
	if ( u16_l_counterCOMP >= TMR_U16_TMR_1_NUM_OF_OVERFLOWS )
 330:	89 2b       	or	r24, r25
 332:	89 f0       	breq	.+34     	; 0x356 <__vector_8+0x5a>
	{
		/* Reset the COMP Counter to 0 */
		u16_l_counterCOMP = 0;
 334:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <u16_l_counterCOMP.2175+0x1>
 338:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <u16_l_counterCOMP.2175>

		/* Check 1.1: TMR1 index of the Global Array is not equal to NULL, and Channel B COMPFlag is raised */
		if ( ( apf_gs_COMPInterruptsAction[TMR_U8_TMR1] != NULL ) && ( u8_gs_timer1COMPBFlag != TMR_U8_FLAG_DOWN ) )
 33c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <apf_gs_COMPInterruptsAction+0x2>
 340:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <apf_gs_COMPInterruptsAction+0x3>
 344:	30 97       	sbiw	r30, 0x00	; 0
 346:	39 f0       	breq	.+14     	; 0x356 <__vector_8+0x5a>
 348:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u8_gs_timer1COMPBFlag>
 34c:	88 23       	and	r24, r24
 34e:	19 f0       	breq	.+6      	; 0x356 <__vector_8+0x5a>
		{
			/* Reset Channel B COMPFlag to 0 */
			u8_gs_timer1COMPBFlag = TMR_U8_FLAG_DOWN;
 350:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <u8_gs_timer1COMPBFlag>

			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			apf_gs_COMPInterruptsAction[TMR_U8_TMR1]();
 354:	09 95       	icall
		}
	}
}
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_9>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR1 OVF */
void __vector_9( void )
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	/* Increment the OVF Counter after every Overflow in Timer1 counting register */
	au16_gs_OVFCounters[TMR_U8_TMR1]++;
 39a:	e0 e7       	ldi	r30, 0x70	; 112
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	82 81       	ldd	r24, Z+2	; 0x02
 3a0:	93 81       	ldd	r25, Z+3	; 0x03
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	93 83       	std	Z+3, r25	; 0x03
 3a6:	82 83       	std	Z+2, r24	; 0x02

	/* Check 1: The OVF Counter reached the desired number of Overflows */
	if ( au16_gs_OVFCounters[TMR_U8_TMR1] >= TMR_U16_TMR_1_NUM_OF_OVERFLOWS )
 3a8:	89 2b       	or	r24, r25
 3aa:	69 f0       	breq	.+26     	; 0x3c6 <__vector_9+0x4e>
	{
		/* Reset Preload Value */
		TMR_U16_TCNT1_REG = TMR_U16_TMR_1_PRELOAD_VALUE;
 3ac:	1d bc       	out	0x2d, r1	; 45
 3ae:	1c bc       	out	0x2c, r1	; 44

		/* Reset the OVF Counter to 0 */
		au16_gs_OVFCounters[TMR_U8_TMR1] = 0;
 3b0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <au16_gs_OVFCounters+0x3>
 3b4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <au16_gs_OVFCounters+0x2>

		/* Check 1.1: TMR1 index of the Global Array is not equal to NULL */
		if ( apf_gs_OVFInterruptsAction[TMR_U8_TMR1] != NULL )
 3b8:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <apf_gs_OVFInterruptsAction+0x2>
 3bc:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <apf_gs_OVFInterruptsAction+0x3>
 3c0:	30 97       	sbiw	r30, 0x00	; 0
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <__vector_9+0x4e>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			apf_gs_OVFInterruptsAction[TMR_U8_TMR1]();
 3c4:	09 95       	icall
		}
	}
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_10>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR0 COMP */
void __vector_10( void )
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	4f 93       	push	r20
 3f8:	5f 93       	push	r21
 3fa:	6f 93       	push	r22
 3fc:	7f 93       	push	r23
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	af 93       	push	r26
 404:	bf 93       	push	r27
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
	/* Static Counter, in case the desired time to be counted; is more than Timer0 counting register ( TCNT0 = 8 bits ), i.e.: to count the number of Overflows */
	static u16 u16_l_counterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer0 counting register */
	u16_l_counterCOMP++;
 40a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <u16_l_counterCOMP.2186>
 40e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <u16_l_counterCOMP.2186+0x1>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <u16_l_counterCOMP.2186+0x1>
 418:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <u16_l_counterCOMP.2186>

	/* Check 1: The COMP Counter reached the desired number of Overflows */
	if ( u16_l_counterCOMP >= TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
 41c:	89 2b       	or	r24, r25
 41e:	59 f0       	breq	.+22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	{
		/* Reset the COMP Counter to 0 */
		u16_l_counterCOMP = 0;
 420:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <u16_l_counterCOMP.2186+0x1>
 424:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <u16_l_counterCOMP.2186>

		/* Check 1.1: TMR0 index of the Global Array is not equal to NULL */
		if ( apf_gs_COMPInterruptsAction[TMR_U8_TMR0] != NULL )
 428:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <apf_gs_COMPInterruptsAction>
 42c:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <apf_gs_COMPInterruptsAction+0x1>
 430:	30 97       	sbiw	r30, 0x00	; 0
 432:	09 f0       	breq	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			apf_gs_COMPInterruptsAction[TMR_U8_TMR0]();
 434:	09 95       	icall
		}
	}
}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_11>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR0 OVF */
void __vector_11( void )
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	/* Increment the OVF Counter after every Overflow in Timer0 counting register */
	au16_gs_OVFCounters[TMR_U8_TMR0]++;
 47a:	e0 e7       	ldi	r30, 0x70	; 112
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	91 81       	ldd	r25, Z+1	; 0x01
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	91 83       	std	Z+1, r25	; 0x01
 486:	80 83       	st	Z, r24

	/* Check 1: The OVF Counter reached the desired number of Overflows */
	if ( au16_gs_OVFCounters[TMR_U8_TMR0] >= TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
 488:	89 2b       	or	r24, r25
 48a:	61 f0       	breq	.+24     	; 0x4a4 <__vector_11+0x4c>
	{
		/* Reset Preload Value */
		TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
 48c:	12 be       	out	0x32, r1	; 50

		/* Reset the OVF Counter to 0 */
		au16_gs_OVFCounters[TMR_U8_TMR0] = 0;
 48e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <au16_gs_OVFCounters+0x1>
 492:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <au16_gs_OVFCounters>

		/* Check 1.1: TMR0 index of the Global Array is not equal to NULL */
		if ( apf_gs_OVFInterruptsAction[TMR_U8_TMR0] != NULL )
 496:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <apf_gs_OVFInterruptsAction>
 49a:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <apf_gs_OVFInterruptsAction+0x1>
 49e:	30 97       	sbiw	r30, 0x00	; 0
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__vector_11+0x4c>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			apf_gs_OVFInterruptsAction[TMR_U8_TMR0]();
 4a2:	09 95       	icall
		}
	}
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
